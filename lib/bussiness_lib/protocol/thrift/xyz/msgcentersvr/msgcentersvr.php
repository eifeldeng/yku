<?php
namespace xyz\msgcentersvr;
/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


interface msgcentersvrIf {
  /**
   * @param int[] $touidlist
   * @param \xyz\msgcentersvr\MsgDataProtocol $msgprotocol
   * @return \xyz\msgcentersvr\retbatch
   */
  public function sendone(array $touidlist, \xyz\msgcentersvr\MsgDataProtocol $msgprotocol);
  /**
   * @param \xyz\msgcentersvr\MsgDataProtocol $msgprotocol
   * @return \xyz\msgcentersvr\retcomm
   */
  public function addonemsg(\xyz\msgcentersvr\MsgDataProtocol $msgprotocol);
  /**
   * @param int[] $touidlist
   * @param int $msgid
   * @return \xyz\msgcentersvr\retbatch
   */
  public function sendonemsg(array $touidlist, $msgid);
  /**
   * @param \xyz\msgcentersvr\TerminalProperty $termproperty
   * @param int $msgid
   * @return \xyz\msgcentersvr\retcomm
   */
  public function cancel_onemsg(\xyz\msgcentersvr\TerminalProperty $termproperty, $msgid);
  /**
   * @param \xyz\msgcentersvr\TerminalProperty $termproperty
   * @param int $msgid
   * @return \xyz\msgcentersvr\retcomm
   */
  public function delete_onemsg(\xyz\msgcentersvr\TerminalProperty $termproperty, $msgid);
  /**
   * @param \xyz\msgcentersvr\TerminalProperty $termproperty
   * @param int $msgid
   * @param int $status
   * @return \xyz\msgcentersvr\retcomm
   */
  public function update_onestatus(\xyz\msgcentersvr\TerminalProperty $termproperty, $msgid, $status);
  /**
   * @param \xyz\msgcentersvr\TerminalProperty $termproperty
   * @param int[] $msgidlist
   * @param int $status
   * @return \xyz\msgcentersvr\retcomm
   */
  public function update_batchstatus(\xyz\msgcentersvr\TerminalProperty $termproperty, array $msgidlist, $status);
  /**
   * @param \xyz\msgcentersvr\UnloggerProtocolMsg $proto_msg
   * @param int $status
   * @return \xyz\msgcentersvr\retcomm
   */
  public function update_unloggermsg_status(\xyz\msgcentersvr\UnloggerProtocolMsg $proto_msg, $status);
  /**
   * @param \xyz\msgcentersvr\TerminalProperty $termproperty
   * @param \xyz\msgcentersvr\IndexpageMessageCondition $condition
   * @return \xyz\msgcentersvr\RetIndexpageMsg
   */
  public function get_indexpage_msg(\xyz\msgcentersvr\TerminalProperty $termproperty, \xyz\msgcentersvr\IndexpageMessageCondition $condition);
  /**
   * @param \xyz\msgcentersvr\TerminalProperty $termproperty
   * @param \xyz\msgcentersvr\InnerpageMessageCondition $condition
   * @return \xyz\msgcentersvr\RetInnerpagemsg
   */
  public function get_innerpage_msg(\xyz\msgcentersvr\TerminalProperty $termproperty, \xyz\msgcentersvr\InnerpageMessageCondition $condition);
  /**
   * @param \xyz\msgcentersvr\TerminalProperty $termproperty
   * @param \xyz\msgcentersvr\CommonMessageCondition $condition
   * @return \xyz\msgcentersvr\RetCommonMsg
   */
  public function get_user_msgs(\xyz\msgcentersvr\TerminalProperty $termproperty, \xyz\msgcentersvr\CommonMessageCondition $condition);
  /**
   * @param \xyz\msgcentersvr\TerminalProperty $termproperty
   * @param \xyz\msgcentersvr\InnerpageItemCondition $condition
   * @param int $status
   * @return \xyz\msgcentersvr\retcomm
   */
  public function update_innerpage_status(\xyz\msgcentersvr\TerminalProperty $termproperty, \xyz\msgcentersvr\InnerpageItemCondition $condition, $status);
  /**
   * @param \xyz\msgcentersvr\TerminalProperty $termproperty
   * @return \xyz\msgcentersvr\retcomm
   */
  public function update_last_subscribe_msg(\xyz\msgcentersvr\TerminalProperty $termproperty);
  /**
   * @param \xyz\msgcentersvr\TerminalProperty $termproperty
   * @param \xyz\msgcentersvr\MobileMessageQueryCondition $condition
   * @return \xyz\msgcentersvr\RetMobileMsg
   */
  public function checkPublicMessageNotify(\xyz\msgcentersvr\TerminalProperty $termproperty, \xyz\msgcentersvr\MobileMessageQueryCondition $condition);
  /**
   * @param int $touid
   * @param \xyz\msgcentersvr\UserType $type
   * @param \xyz\msgcentersvr\MobileMessageQueryCondition $condition
   * @return \xyz\msgcentersvr\MobileMessageQueryResult
   */
  public function queryMobileMessage($touid, \xyz\msgcentersvr\UserType $type, \xyz\msgcentersvr\MobileMessageQueryCondition $condition);
  /**
   * @param int $touid
   * @param \xyz\msgcentersvr\UserType $type
   * @param \xyz\msgcentersvr\condition $cond
   * @return \xyz\msgcentersvr\retmsgdata
   */
  public function getuserpopuplist($touid, \xyz\msgcentersvr\UserType $type, \xyz\msgcentersvr\Condition $cond);
  /**
   * @param int $touid
   * @param \xyz\msgcentersvr\UserType $type
   * @param \xyz\msgcentersvr\condition $cond
   * @return \xyz\msgcentersvr\retmsgdata
   */
  public function getuserlist($touid, \xyz\msgcentersvr\UserType $type, \xyz\msgcentersvr\Condition $cond);
  /**
   * @param int $touid
   * @return \xyz\msgcentersvr\retcomm
   */
  public function updatenotify($touid);
}

class msgcentersvrClient implements \xyz\msgcentersvr\msgcentersvrIf {
  protected $input_ = null;
  protected $output_ = null;

  protected $seqid_ = 0;

  public function __construct($input, $output=null) {
    $this->input_ = $input;
    $this->output_ = $output ? $output : $input;
  }

  public function sendone(array $touidlist, \xyz\msgcentersvr\MsgDataProtocol $msgprotocol)
  {
    $this->send_sendone($touidlist, $msgprotocol);
    return $this->recv_sendone();
  }

  public function send_sendone(array $touidlist, \xyz\msgcentersvr\MsgDataProtocol $msgprotocol)
  {
    $args = new \xyz\msgcentersvr\msgcentersvr_sendone_args();
    $args->touidlist = $touidlist;
    $args->msgprotocol = $msgprotocol;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'sendone', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('sendone', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_sendone()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\xyz\msgcentersvr\msgcentersvr_sendone_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \xyz\msgcentersvr\msgcentersvr_sendone_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("sendone failed: unknown result");
  }

  public function addonemsg(\xyz\msgcentersvr\MsgDataProtocol $msgprotocol)
  {
    $this->send_addonemsg($msgprotocol);
    return $this->recv_addonemsg();
  }

  public function send_addonemsg(\xyz\msgcentersvr\MsgDataProtocol $msgprotocol)
  {
    $args = new \xyz\msgcentersvr\msgcentersvr_addonemsg_args();
    $args->msgprotocol = $msgprotocol;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'addonemsg', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('addonemsg', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_addonemsg()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\xyz\msgcentersvr\msgcentersvr_addonemsg_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \xyz\msgcentersvr\msgcentersvr_addonemsg_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("addonemsg failed: unknown result");
  }

  public function sendonemsg(array $touidlist, $msgid)
  {
    $this->send_sendonemsg($touidlist, $msgid);
    return $this->recv_sendonemsg();
  }

  public function send_sendonemsg(array $touidlist, $msgid)
  {
    $args = new \xyz\msgcentersvr\msgcentersvr_sendonemsg_args();
    $args->touidlist = $touidlist;
    $args->msgid = $msgid;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'sendonemsg', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('sendonemsg', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_sendonemsg()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\xyz\msgcentersvr\msgcentersvr_sendonemsg_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \xyz\msgcentersvr\msgcentersvr_sendonemsg_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("sendonemsg failed: unknown result");
  }

  public function cancel_onemsg(\xyz\msgcentersvr\TerminalProperty $termproperty, $msgid)
  {
    $this->send_cancel_onemsg($termproperty, $msgid);
    return $this->recv_cancel_onemsg();
  }

  public function send_cancel_onemsg(\xyz\msgcentersvr\TerminalProperty $termproperty, $msgid)
  {
    $args = new \xyz\msgcentersvr\msgcentersvr_cancel_onemsg_args();
    $args->termproperty = $termproperty;
    $args->msgid = $msgid;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'cancel_onemsg', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('cancel_onemsg', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_cancel_onemsg()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\xyz\msgcentersvr\msgcentersvr_cancel_onemsg_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \xyz\msgcentersvr\msgcentersvr_cancel_onemsg_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("cancel_onemsg failed: unknown result");
  }

  public function delete_onemsg(\xyz\msgcentersvr\TerminalProperty $termproperty, $msgid)
  {
    $this->send_delete_onemsg($termproperty, $msgid);
    return $this->recv_delete_onemsg();
  }

  public function send_delete_onemsg(\xyz\msgcentersvr\TerminalProperty $termproperty, $msgid)
  {
    $args = new \xyz\msgcentersvr\msgcentersvr_delete_onemsg_args();
    $args->termproperty = $termproperty;
    $args->msgid = $msgid;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'delete_onemsg', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('delete_onemsg', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_delete_onemsg()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\xyz\msgcentersvr\msgcentersvr_delete_onemsg_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \xyz\msgcentersvr\msgcentersvr_delete_onemsg_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("delete_onemsg failed: unknown result");
  }

  public function update_onestatus(\xyz\msgcentersvr\TerminalProperty $termproperty, $msgid, $status)
  {
    $this->send_update_onestatus($termproperty, $msgid, $status);
    return $this->recv_update_onestatus();
  }

  public function send_update_onestatus(\xyz\msgcentersvr\TerminalProperty $termproperty, $msgid, $status)
  {
    $args = new \xyz\msgcentersvr\msgcentersvr_update_onestatus_args();
    $args->termproperty = $termproperty;
    $args->msgid = $msgid;
    $args->status = $status;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'update_onestatus', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('update_onestatus', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_update_onestatus()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\xyz\msgcentersvr\msgcentersvr_update_onestatus_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \xyz\msgcentersvr\msgcentersvr_update_onestatus_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("update_onestatus failed: unknown result");
  }

  public function update_batchstatus(\xyz\msgcentersvr\TerminalProperty $termproperty, array $msgidlist, $status)
  {
    $this->send_update_batchstatus($termproperty, $msgidlist, $status);
    return $this->recv_update_batchstatus();
  }

  public function send_update_batchstatus(\xyz\msgcentersvr\TerminalProperty $termproperty, array $msgidlist, $status)
  {
    $args = new \xyz\msgcentersvr\msgcentersvr_update_batchstatus_args();
    $args->termproperty = $termproperty;
    $args->msgidlist = $msgidlist;
    $args->status = $status;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'update_batchstatus', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('update_batchstatus', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_update_batchstatus()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\xyz\msgcentersvr\msgcentersvr_update_batchstatus_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \xyz\msgcentersvr\msgcentersvr_update_batchstatus_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("update_batchstatus failed: unknown result");
  }

  public function update_unloggermsg_status(\xyz\msgcentersvr\UnloggerProtocolMsg $proto_msg, $status)
  {
    $this->send_update_unloggermsg_status($proto_msg, $status);
    return $this->recv_update_unloggermsg_status();
  }

  public function send_update_unloggermsg_status(\xyz\msgcentersvr\UnloggerProtocolMsg $proto_msg, $status)
  {
    $args = new \xyz\msgcentersvr\msgcentersvr_update_unloggermsg_status_args();
    $args->proto_msg = $proto_msg;
    $args->status = $status;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'update_unloggermsg_status', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('update_unloggermsg_status', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_update_unloggermsg_status()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\xyz\msgcentersvr\msgcentersvr_update_unloggermsg_status_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \xyz\msgcentersvr\msgcentersvr_update_unloggermsg_status_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("update_unloggermsg_status failed: unknown result");
  }

  public function get_indexpage_msg(\xyz\msgcentersvr\TerminalProperty $termproperty, \xyz\msgcentersvr\IndexpageMessageCondition $condition)
  {
    $this->send_get_indexpage_msg($termproperty, $condition);
    return $this->recv_get_indexpage_msg();
  }

  public function send_get_indexpage_msg(\xyz\msgcentersvr\TerminalProperty $termproperty, \xyz\msgcentersvr\IndexpageMessageCondition $condition)
  {
    $args = new \xyz\msgcentersvr\msgcentersvr_get_indexpage_msg_args();
    $args->termproperty = $termproperty;
    $args->condition = $condition;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_indexpage_msg', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_indexpage_msg', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_indexpage_msg()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\xyz\msgcentersvr\msgcentersvr_get_indexpage_msg_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \xyz\msgcentersvr\msgcentersvr_get_indexpage_msg_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("get_indexpage_msg failed: unknown result");
  }

  public function get_innerpage_msg(\xyz\msgcentersvr\TerminalProperty $termproperty, \xyz\msgcentersvr\InnerpageMessageCondition $condition)
  {
    $this->send_get_innerpage_msg($termproperty, $condition);
    return $this->recv_get_innerpage_msg();
  }

  public function send_get_innerpage_msg(\xyz\msgcentersvr\TerminalProperty $termproperty, \xyz\msgcentersvr\InnerpageMessageCondition $condition)
  {
    $args = new \xyz\msgcentersvr\msgcentersvr_get_innerpage_msg_args();
    $args->termproperty = $termproperty;
    $args->condition = $condition;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_innerpage_msg', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_innerpage_msg', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_innerpage_msg()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\xyz\msgcentersvr\msgcentersvr_get_innerpage_msg_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \xyz\msgcentersvr\msgcentersvr_get_innerpage_msg_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("get_innerpage_msg failed: unknown result");
  }

  public function get_user_msgs(\xyz\msgcentersvr\TerminalProperty $termproperty, \xyz\msgcentersvr\CommonMessageCondition $condition)
  {
    $this->send_get_user_msgs($termproperty, $condition);
    return $this->recv_get_user_msgs();
  }

  public function send_get_user_msgs(\xyz\msgcentersvr\TerminalProperty $termproperty, \xyz\msgcentersvr\CommonMessageCondition $condition)
  {
    $args = new \xyz\msgcentersvr\msgcentersvr_get_user_msgs_args();
    $args->termproperty = $termproperty;
    $args->condition = $condition;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_user_msgs', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_user_msgs', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_user_msgs()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\xyz\msgcentersvr\msgcentersvr_get_user_msgs_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \xyz\msgcentersvr\msgcentersvr_get_user_msgs_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("get_user_msgs failed: unknown result");
  }

  public function update_innerpage_status(\xyz\msgcentersvr\TerminalProperty $termproperty, \xyz\msgcentersvr\InnerpageItemCondition $condition, $status)
  {
    $this->send_update_innerpage_status($termproperty, $condition, $status);
    return $this->recv_update_innerpage_status();
  }

  public function send_update_innerpage_status(\xyz\msgcentersvr\TerminalProperty $termproperty, \xyz\msgcentersvr\InnerpageItemCondition $condition, $status)
  {
    $args = new \xyz\msgcentersvr\msgcentersvr_update_innerpage_status_args();
    $args->termproperty = $termproperty;
    $args->condition = $condition;
    $args->status = $status;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'update_innerpage_status', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('update_innerpage_status', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_update_innerpage_status()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\xyz\msgcentersvr\msgcentersvr_update_innerpage_status_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \xyz\msgcentersvr\msgcentersvr_update_innerpage_status_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("update_innerpage_status failed: unknown result");
  }

  public function update_last_subscribe_msg(\xyz\msgcentersvr\TerminalProperty $termproperty)
  {
    $this->send_update_last_subscribe_msg($termproperty);
    return $this->recv_update_last_subscribe_msg();
  }

  public function send_update_last_subscribe_msg(\xyz\msgcentersvr\TerminalProperty $termproperty)
  {
    $args = new \xyz\msgcentersvr\msgcentersvr_update_last_subscribe_msg_args();
    $args->termproperty = $termproperty;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'update_last_subscribe_msg', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('update_last_subscribe_msg', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_update_last_subscribe_msg()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\xyz\msgcentersvr\msgcentersvr_update_last_subscribe_msg_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \xyz\msgcentersvr\msgcentersvr_update_last_subscribe_msg_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("update_last_subscribe_msg failed: unknown result");
  }

  public function checkPublicMessageNotify(\xyz\msgcentersvr\TerminalProperty $termproperty, \xyz\msgcentersvr\MobileMessageQueryCondition $condition)
  {
    $this->send_checkPublicMessageNotify($termproperty, $condition);
    return $this->recv_checkPublicMessageNotify();
  }

  public function send_checkPublicMessageNotify(\xyz\msgcentersvr\TerminalProperty $termproperty, \xyz\msgcentersvr\MobileMessageQueryCondition $condition)
  {
    $args = new \xyz\msgcentersvr\msgcentersvr_checkPublicMessageNotify_args();
    $args->termproperty = $termproperty;
    $args->condition = $condition;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'checkPublicMessageNotify', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('checkPublicMessageNotify', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_checkPublicMessageNotify()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\xyz\msgcentersvr\msgcentersvr_checkPublicMessageNotify_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \xyz\msgcentersvr\msgcentersvr_checkPublicMessageNotify_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("checkPublicMessageNotify failed: unknown result");
  }

  public function queryMobileMessage($touid, \xyz\msgcentersvr\UserType $type, \xyz\msgcentersvr\MobileMessageQueryCondition $condition)
  {
    $this->send_queryMobileMessage($touid, $type, $condition);
    return $this->recv_queryMobileMessage();
  }

  public function send_queryMobileMessage($touid, \xyz\msgcentersvr\UserType $type, \xyz\msgcentersvr\MobileMessageQueryCondition $condition)
  {
    $args = new \xyz\msgcentersvr\msgcentersvr_queryMobileMessage_args();
    $args->touid = $touid;
    $args->type = $type;
    $args->condition = $condition;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'queryMobileMessage', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('queryMobileMessage', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_queryMobileMessage()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\xyz\msgcentersvr\msgcentersvr_queryMobileMessage_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \xyz\msgcentersvr\msgcentersvr_queryMobileMessage_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("queryMobileMessage failed: unknown result");
  }

  public function getuserpopuplist($touid, \xyz\msgcentersvr\UserType $type, \xyz\msgcentersvr\Condition $cond)
  {
    $this->send_getuserpopuplist($touid, $type, $cond);
    return $this->recv_getuserpopuplist();
  }

  public function send_getuserpopuplist($touid, \xyz\msgcentersvr\UserType $type, \xyz\msgcentersvr\Condition $cond)
  {
    $args = new \xyz\msgcentersvr\msgcentersvr_getuserpopuplist_args();
    $args->touid = $touid;
    $args->type = $type;
    $args->cond = $cond;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getuserpopuplist', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getuserpopuplist', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getuserpopuplist()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\xyz\msgcentersvr\msgcentersvr_getuserpopuplist_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \xyz\msgcentersvr\msgcentersvr_getuserpopuplist_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getuserpopuplist failed: unknown result");
  }

  public function getuserlist($touid, \xyz\msgcentersvr\UserType $type, \xyz\msgcentersvr\Condition $cond)
  {
    $this->send_getuserlist($touid, $type, $cond);
    return $this->recv_getuserlist();
  }

  public function send_getuserlist($touid, \xyz\msgcentersvr\UserType $type, \xyz\msgcentersvr\Condition $cond)
  {
    $args = new \xyz\msgcentersvr\msgcentersvr_getuserlist_args();
    $args->touid = $touid;
    $args->type = $type;
    $args->cond = $cond;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getuserlist', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getuserlist', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getuserlist()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\xyz\msgcentersvr\msgcentersvr_getuserlist_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \xyz\msgcentersvr\msgcentersvr_getuserlist_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getuserlist failed: unknown result");
  }

  public function updatenotify($touid)
  {
    $this->send_updatenotify($touid);
    return $this->recv_updatenotify();
  }

  public function send_updatenotify($touid)
  {
    $args = new \xyz\msgcentersvr\msgcentersvr_updatenotify_args();
    $args->touid = $touid;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updatenotify', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updatenotify', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updatenotify()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\xyz\msgcentersvr\msgcentersvr_updatenotify_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \xyz\msgcentersvr\msgcentersvr_updatenotify_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updatenotify failed: unknown result");
  }

}

// HELPER FUNCTIONS AND STRUCTURES

class msgcentersvr_sendone_args {
  static $_TSPEC;

  /**
   * @var int[]
   */
  public $touidlist = null;
  /**
   * @var \xyz\msgcentersvr\MsgDataProtocol
   */
  public $msgprotocol = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'touidlist',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        2 => array(
          'var' => 'msgprotocol',
          'type' => TType::STRUCT,
          'class' => '\xyz\msgcentersvr\MsgDataProtocol',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['touidlist'])) {
        $this->touidlist = $vals['touidlist'];
      }
      if (isset($vals['msgprotocol'])) {
        $this->msgprotocol = $vals['msgprotocol'];
      }
    }
  }

  public function getName() {
    return 'msgcentersvr_sendone_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->touidlist = array();
            $_size146 = 0;
            $_etype149 = 0;
            $xfer += $input->readListBegin($_etype149, $_size146);
            for ($_i150 = 0; $_i150 < $_size146; ++$_i150)
            {
              $elem151 = null;
              $xfer += $input->readI64($elem151);
              $this->touidlist []= $elem151;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->msgprotocol = new \xyz\msgcentersvr\MsgDataProtocol();
            $xfer += $this->msgprotocol->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('msgcentersvr_sendone_args');
    if ($this->touidlist !== null) {
      if (!is_array($this->touidlist)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('touidlist', TType::LST, 1);
      {
        $output->writeListBegin(TType::I64, count($this->touidlist));
        {
          foreach ($this->touidlist as $iter152)
          {
            $xfer += $output->writeI64($iter152);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->msgprotocol !== null) {
      if (!is_object($this->msgprotocol)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('msgprotocol', TType::STRUCT, 2);
      $xfer += $this->msgprotocol->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class msgcentersvr_sendone_result {
  static $_TSPEC;

  /**
   * @var \xyz\msgcentersvr\retbatch
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\xyz\msgcentersvr\retbatch',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'msgcentersvr_sendone_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \xyz\msgcentersvr\retbatch();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('msgcentersvr_sendone_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class msgcentersvr_addonemsg_args {
  static $_TSPEC;

  /**
   * @var \xyz\msgcentersvr\MsgDataProtocol
   */
  public $msgprotocol = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'msgprotocol',
          'type' => TType::STRUCT,
          'class' => '\xyz\msgcentersvr\MsgDataProtocol',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['msgprotocol'])) {
        $this->msgprotocol = $vals['msgprotocol'];
      }
    }
  }

  public function getName() {
    return 'msgcentersvr_addonemsg_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->msgprotocol = new \xyz\msgcentersvr\MsgDataProtocol();
            $xfer += $this->msgprotocol->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('msgcentersvr_addonemsg_args');
    if ($this->msgprotocol !== null) {
      if (!is_object($this->msgprotocol)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('msgprotocol', TType::STRUCT, 1);
      $xfer += $this->msgprotocol->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class msgcentersvr_addonemsg_result {
  static $_TSPEC;

  /**
   * @var \xyz\msgcentersvr\retcomm
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\xyz\msgcentersvr\retcomm',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'msgcentersvr_addonemsg_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \xyz\msgcentersvr\retcomm();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('msgcentersvr_addonemsg_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class msgcentersvr_sendonemsg_args {
  static $_TSPEC;

  /**
   * @var int[]
   */
  public $touidlist = null;
  /**
   * @var int
   */
  public $msgid = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'touidlist',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        2 => array(
          'var' => 'msgid',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['touidlist'])) {
        $this->touidlist = $vals['touidlist'];
      }
      if (isset($vals['msgid'])) {
        $this->msgid = $vals['msgid'];
      }
    }
  }

  public function getName() {
    return 'msgcentersvr_sendonemsg_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->touidlist = array();
            $_size153 = 0;
            $_etype156 = 0;
            $xfer += $input->readListBegin($_etype156, $_size153);
            for ($_i157 = 0; $_i157 < $_size153; ++$_i157)
            {
              $elem158 = null;
              $xfer += $input->readI64($elem158);
              $this->touidlist []= $elem158;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->msgid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('msgcentersvr_sendonemsg_args');
    if ($this->touidlist !== null) {
      if (!is_array($this->touidlist)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('touidlist', TType::LST, 1);
      {
        $output->writeListBegin(TType::I64, count($this->touidlist));
        {
          foreach ($this->touidlist as $iter159)
          {
            $xfer += $output->writeI64($iter159);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->msgid !== null) {
      $xfer += $output->writeFieldBegin('msgid', TType::I64, 2);
      $xfer += $output->writeI64($this->msgid);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class msgcentersvr_sendonemsg_result {
  static $_TSPEC;

  /**
   * @var \xyz\msgcentersvr\retbatch
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\xyz\msgcentersvr\retbatch',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'msgcentersvr_sendonemsg_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \xyz\msgcentersvr\retbatch();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('msgcentersvr_sendonemsg_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class msgcentersvr_cancel_onemsg_args {
  static $_TSPEC;

  /**
   * @var \xyz\msgcentersvr\TerminalProperty
   */
  public $termproperty = null;
  /**
   * @var int
   */
  public $msgid = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'termproperty',
          'type' => TType::STRUCT,
          'class' => '\xyz\msgcentersvr\TerminalProperty',
          ),
        2 => array(
          'var' => 'msgid',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['termproperty'])) {
        $this->termproperty = $vals['termproperty'];
      }
      if (isset($vals['msgid'])) {
        $this->msgid = $vals['msgid'];
      }
    }
  }

  public function getName() {
    return 'msgcentersvr_cancel_onemsg_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->termproperty = new \xyz\msgcentersvr\TerminalProperty();
            $xfer += $this->termproperty->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->msgid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('msgcentersvr_cancel_onemsg_args');
    if ($this->termproperty !== null) {
      if (!is_object($this->termproperty)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('termproperty', TType::STRUCT, 1);
      $xfer += $this->termproperty->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->msgid !== null) {
      $xfer += $output->writeFieldBegin('msgid', TType::I64, 2);
      $xfer += $output->writeI64($this->msgid);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class msgcentersvr_cancel_onemsg_result {
  static $_TSPEC;

  /**
   * @var \xyz\msgcentersvr\retcomm
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\xyz\msgcentersvr\retcomm',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'msgcentersvr_cancel_onemsg_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \xyz\msgcentersvr\retcomm();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('msgcentersvr_cancel_onemsg_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class msgcentersvr_delete_onemsg_args {
  static $_TSPEC;

  /**
   * @var \xyz\msgcentersvr\TerminalProperty
   */
  public $termproperty = null;
  /**
   * @var int
   */
  public $msgid = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'termproperty',
          'type' => TType::STRUCT,
          'class' => '\xyz\msgcentersvr\TerminalProperty',
          ),
        2 => array(
          'var' => 'msgid',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['termproperty'])) {
        $this->termproperty = $vals['termproperty'];
      }
      if (isset($vals['msgid'])) {
        $this->msgid = $vals['msgid'];
      }
    }
  }

  public function getName() {
    return 'msgcentersvr_delete_onemsg_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->termproperty = new \xyz\msgcentersvr\TerminalProperty();
            $xfer += $this->termproperty->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->msgid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('msgcentersvr_delete_onemsg_args');
    if ($this->termproperty !== null) {
      if (!is_object($this->termproperty)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('termproperty', TType::STRUCT, 1);
      $xfer += $this->termproperty->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->msgid !== null) {
      $xfer += $output->writeFieldBegin('msgid', TType::I64, 2);
      $xfer += $output->writeI64($this->msgid);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class msgcentersvr_delete_onemsg_result {
  static $_TSPEC;

  /**
   * @var \xyz\msgcentersvr\retcomm
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\xyz\msgcentersvr\retcomm',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'msgcentersvr_delete_onemsg_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \xyz\msgcentersvr\retcomm();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('msgcentersvr_delete_onemsg_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class msgcentersvr_update_onestatus_args {
  static $_TSPEC;

  /**
   * @var \xyz\msgcentersvr\TerminalProperty
   */
  public $termproperty = null;
  /**
   * @var int
   */
  public $msgid = null;
  /**
   * @var int
   */
  public $status = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'termproperty',
          'type' => TType::STRUCT,
          'class' => '\xyz\msgcentersvr\TerminalProperty',
          ),
        2 => array(
          'var' => 'msgid',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'status',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['termproperty'])) {
        $this->termproperty = $vals['termproperty'];
      }
      if (isset($vals['msgid'])) {
        $this->msgid = $vals['msgid'];
      }
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
    }
  }

  public function getName() {
    return 'msgcentersvr_update_onestatus_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->termproperty = new \xyz\msgcentersvr\TerminalProperty();
            $xfer += $this->termproperty->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->msgid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('msgcentersvr_update_onestatus_args');
    if ($this->termproperty !== null) {
      if (!is_object($this->termproperty)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('termproperty', TType::STRUCT, 1);
      $xfer += $this->termproperty->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->msgid !== null) {
      $xfer += $output->writeFieldBegin('msgid', TType::I64, 2);
      $xfer += $output->writeI64($this->msgid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->status !== null) {
      $xfer += $output->writeFieldBegin('status', TType::I32, 3);
      $xfer += $output->writeI32($this->status);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class msgcentersvr_update_onestatus_result {
  static $_TSPEC;

  /**
   * @var \xyz\msgcentersvr\retcomm
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\xyz\msgcentersvr\retcomm',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'msgcentersvr_update_onestatus_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \xyz\msgcentersvr\retcomm();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('msgcentersvr_update_onestatus_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class msgcentersvr_update_batchstatus_args {
  static $_TSPEC;

  /**
   * @var \xyz\msgcentersvr\TerminalProperty
   */
  public $termproperty = null;
  /**
   * @var int[]
   */
  public $msgidlist = null;
  /**
   * @var int
   */
  public $status = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'termproperty',
          'type' => TType::STRUCT,
          'class' => '\xyz\msgcentersvr\TerminalProperty',
          ),
        2 => array(
          'var' => 'msgidlist',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        3 => array(
          'var' => 'status',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['termproperty'])) {
        $this->termproperty = $vals['termproperty'];
      }
      if (isset($vals['msgidlist'])) {
        $this->msgidlist = $vals['msgidlist'];
      }
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
    }
  }

  public function getName() {
    return 'msgcentersvr_update_batchstatus_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->termproperty = new \xyz\msgcentersvr\TerminalProperty();
            $xfer += $this->termproperty->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->msgidlist = array();
            $_size160 = 0;
            $_etype163 = 0;
            $xfer += $input->readListBegin($_etype163, $_size160);
            for ($_i164 = 0; $_i164 < $_size160; ++$_i164)
            {
              $elem165 = null;
              $xfer += $input->readI64($elem165);
              $this->msgidlist []= $elem165;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('msgcentersvr_update_batchstatus_args');
    if ($this->termproperty !== null) {
      if (!is_object($this->termproperty)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('termproperty', TType::STRUCT, 1);
      $xfer += $this->termproperty->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->msgidlist !== null) {
      if (!is_array($this->msgidlist)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('msgidlist', TType::LST, 2);
      {
        $output->writeListBegin(TType::I64, count($this->msgidlist));
        {
          foreach ($this->msgidlist as $iter166)
          {
            $xfer += $output->writeI64($iter166);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->status !== null) {
      $xfer += $output->writeFieldBegin('status', TType::I32, 3);
      $xfer += $output->writeI32($this->status);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class msgcentersvr_update_batchstatus_result {
  static $_TSPEC;

  /**
   * @var \xyz\msgcentersvr\retcomm
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\xyz\msgcentersvr\retcomm',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'msgcentersvr_update_batchstatus_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \xyz\msgcentersvr\retcomm();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('msgcentersvr_update_batchstatus_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class msgcentersvr_update_unloggermsg_status_args {
  static $_TSPEC;

  /**
   * @var \xyz\msgcentersvr\UnloggerProtocolMsg
   */
  public $proto_msg = null;
  /**
   * @var int
   */
  public $status = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'proto_msg',
          'type' => TType::STRUCT,
          'class' => '\xyz\msgcentersvr\UnloggerProtocolMsg',
          ),
        2 => array(
          'var' => 'status',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['proto_msg'])) {
        $this->proto_msg = $vals['proto_msg'];
      }
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
    }
  }

  public function getName() {
    return 'msgcentersvr_update_unloggermsg_status_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->proto_msg = new \xyz\msgcentersvr\UnloggerProtocolMsg();
            $xfer += $this->proto_msg->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('msgcentersvr_update_unloggermsg_status_args');
    if ($this->proto_msg !== null) {
      if (!is_object($this->proto_msg)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('proto_msg', TType::STRUCT, 1);
      $xfer += $this->proto_msg->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->status !== null) {
      $xfer += $output->writeFieldBegin('status', TType::I32, 2);
      $xfer += $output->writeI32($this->status);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class msgcentersvr_update_unloggermsg_status_result {
  static $_TSPEC;

  /**
   * @var \xyz\msgcentersvr\retcomm
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\xyz\msgcentersvr\retcomm',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'msgcentersvr_update_unloggermsg_status_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \xyz\msgcentersvr\retcomm();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('msgcentersvr_update_unloggermsg_status_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class msgcentersvr_get_indexpage_msg_args {
  static $_TSPEC;

  /**
   * @var \xyz\msgcentersvr\TerminalProperty
   */
  public $termproperty = null;
  /**
   * @var \xyz\msgcentersvr\IndexpageMessageCondition
   */
  public $condition = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'termproperty',
          'type' => TType::STRUCT,
          'class' => '\xyz\msgcentersvr\TerminalProperty',
          ),
        2 => array(
          'var' => 'condition',
          'type' => TType::STRUCT,
          'class' => '\xyz\msgcentersvr\IndexpageMessageCondition',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['termproperty'])) {
        $this->termproperty = $vals['termproperty'];
      }
      if (isset($vals['condition'])) {
        $this->condition = $vals['condition'];
      }
    }
  }

  public function getName() {
    return 'msgcentersvr_get_indexpage_msg_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->termproperty = new \xyz\msgcentersvr\TerminalProperty();
            $xfer += $this->termproperty->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->condition = new \xyz\msgcentersvr\IndexpageMessageCondition();
            $xfer += $this->condition->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('msgcentersvr_get_indexpage_msg_args');
    if ($this->termproperty !== null) {
      if (!is_object($this->termproperty)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('termproperty', TType::STRUCT, 1);
      $xfer += $this->termproperty->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->condition !== null) {
      if (!is_object($this->condition)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('condition', TType::STRUCT, 2);
      $xfer += $this->condition->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class msgcentersvr_get_indexpage_msg_result {
  static $_TSPEC;

  /**
   * @var \xyz\msgcentersvr\RetIndexpageMsg
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\xyz\msgcentersvr\RetIndexpageMsg',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'msgcentersvr_get_indexpage_msg_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \xyz\msgcentersvr\RetIndexpageMsg();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('msgcentersvr_get_indexpage_msg_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class msgcentersvr_get_innerpage_msg_args {
  static $_TSPEC;

  /**
   * @var \xyz\msgcentersvr\TerminalProperty
   */
  public $termproperty = null;
  /**
   * @var \xyz\msgcentersvr\InnerpageMessageCondition
   */
  public $condition = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'termproperty',
          'type' => TType::STRUCT,
          'class' => '\xyz\msgcentersvr\TerminalProperty',
          ),
        2 => array(
          'var' => 'condition',
          'type' => TType::STRUCT,
          'class' => '\xyz\msgcentersvr\InnerpageMessageCondition',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['termproperty'])) {
        $this->termproperty = $vals['termproperty'];
      }
      if (isset($vals['condition'])) {
        $this->condition = $vals['condition'];
      }
    }
  }

  public function getName() {
    return 'msgcentersvr_get_innerpage_msg_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->termproperty = new \xyz\msgcentersvr\TerminalProperty();
            $xfer += $this->termproperty->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->condition = new \xyz\msgcentersvr\InnerpageMessageCondition();
            $xfer += $this->condition->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('msgcentersvr_get_innerpage_msg_args');
    if ($this->termproperty !== null) {
      if (!is_object($this->termproperty)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('termproperty', TType::STRUCT, 1);
      $xfer += $this->termproperty->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->condition !== null) {
      if (!is_object($this->condition)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('condition', TType::STRUCT, 2);
      $xfer += $this->condition->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class msgcentersvr_get_innerpage_msg_result {
  static $_TSPEC;

  /**
   * @var \xyz\msgcentersvr\RetInnerpagemsg
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\xyz\msgcentersvr\RetInnerpagemsg',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'msgcentersvr_get_innerpage_msg_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \xyz\msgcentersvr\RetInnerpagemsg();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('msgcentersvr_get_innerpage_msg_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class msgcentersvr_get_user_msgs_args {
  static $_TSPEC;

  /**
   * @var \xyz\msgcentersvr\TerminalProperty
   */
  public $termproperty = null;
  /**
   * @var \xyz\msgcentersvr\CommonMessageCondition
   */
  public $condition = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'termproperty',
          'type' => TType::STRUCT,
          'class' => '\xyz\msgcentersvr\TerminalProperty',
          ),
        2 => array(
          'var' => 'condition',
          'type' => TType::STRUCT,
          'class' => '\xyz\msgcentersvr\CommonMessageCondition',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['termproperty'])) {
        $this->termproperty = $vals['termproperty'];
      }
      if (isset($vals['condition'])) {
        $this->condition = $vals['condition'];
      }
    }
  }

  public function getName() {
    return 'msgcentersvr_get_user_msgs_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->termproperty = new \xyz\msgcentersvr\TerminalProperty();
            $xfer += $this->termproperty->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->condition = new \xyz\msgcentersvr\CommonMessageCondition();
            $xfer += $this->condition->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('msgcentersvr_get_user_msgs_args');
    if ($this->termproperty !== null) {
      if (!is_object($this->termproperty)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('termproperty', TType::STRUCT, 1);
      $xfer += $this->termproperty->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->condition !== null) {
      if (!is_object($this->condition)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('condition', TType::STRUCT, 2);
      $xfer += $this->condition->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class msgcentersvr_get_user_msgs_result {
  static $_TSPEC;

  /**
   * @var \xyz\msgcentersvr\RetCommonMsg
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\xyz\msgcentersvr\RetCommonMsg',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'msgcentersvr_get_user_msgs_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \xyz\msgcentersvr\RetCommonMsg();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('msgcentersvr_get_user_msgs_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class msgcentersvr_update_innerpage_status_args {
  static $_TSPEC;

  /**
   * @var \xyz\msgcentersvr\TerminalProperty
   */
  public $termproperty = null;
  /**
   * @var \xyz\msgcentersvr\InnerpageItemCondition
   */
  public $condition = null;
  /**
   * @var int
   */
  public $status = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'termproperty',
          'type' => TType::STRUCT,
          'class' => '\xyz\msgcentersvr\TerminalProperty',
          ),
        2 => array(
          'var' => 'condition',
          'type' => TType::STRUCT,
          'class' => '\xyz\msgcentersvr\InnerpageItemCondition',
          ),
        3 => array(
          'var' => 'status',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['termproperty'])) {
        $this->termproperty = $vals['termproperty'];
      }
      if (isset($vals['condition'])) {
        $this->condition = $vals['condition'];
      }
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
    }
  }

  public function getName() {
    return 'msgcentersvr_update_innerpage_status_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->termproperty = new \xyz\msgcentersvr\TerminalProperty();
            $xfer += $this->termproperty->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->condition = new \xyz\msgcentersvr\InnerpageItemCondition();
            $xfer += $this->condition->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('msgcentersvr_update_innerpage_status_args');
    if ($this->termproperty !== null) {
      if (!is_object($this->termproperty)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('termproperty', TType::STRUCT, 1);
      $xfer += $this->termproperty->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->condition !== null) {
      if (!is_object($this->condition)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('condition', TType::STRUCT, 2);
      $xfer += $this->condition->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->status !== null) {
      $xfer += $output->writeFieldBegin('status', TType::I32, 3);
      $xfer += $output->writeI32($this->status);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class msgcentersvr_update_innerpage_status_result {
  static $_TSPEC;

  /**
   * @var \xyz\msgcentersvr\retcomm
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\xyz\msgcentersvr\retcomm',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'msgcentersvr_update_innerpage_status_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \xyz\msgcentersvr\retcomm();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('msgcentersvr_update_innerpage_status_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class msgcentersvr_update_last_subscribe_msg_args {
  static $_TSPEC;

  /**
   * @var \xyz\msgcentersvr\TerminalProperty
   */
  public $termproperty = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'termproperty',
          'type' => TType::STRUCT,
          'class' => '\xyz\msgcentersvr\TerminalProperty',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['termproperty'])) {
        $this->termproperty = $vals['termproperty'];
      }
    }
  }

  public function getName() {
    return 'msgcentersvr_update_last_subscribe_msg_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->termproperty = new \xyz\msgcentersvr\TerminalProperty();
            $xfer += $this->termproperty->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('msgcentersvr_update_last_subscribe_msg_args');
    if ($this->termproperty !== null) {
      if (!is_object($this->termproperty)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('termproperty', TType::STRUCT, 1);
      $xfer += $this->termproperty->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class msgcentersvr_update_last_subscribe_msg_result {
  static $_TSPEC;

  /**
   * @var \xyz\msgcentersvr\retcomm
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\xyz\msgcentersvr\retcomm',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'msgcentersvr_update_last_subscribe_msg_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \xyz\msgcentersvr\retcomm();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('msgcentersvr_update_last_subscribe_msg_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class msgcentersvr_checkPublicMessageNotify_args {
  static $_TSPEC;

  /**
   * @var \xyz\msgcentersvr\TerminalProperty
   */
  public $termproperty = null;
  /**
   * @var \xyz\msgcentersvr\MobileMessageQueryCondition
   */
  public $condition = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'termproperty',
          'type' => TType::STRUCT,
          'class' => '\xyz\msgcentersvr\TerminalProperty',
          ),
        2 => array(
          'var' => 'condition',
          'type' => TType::STRUCT,
          'class' => '\xyz\msgcentersvr\MobileMessageQueryCondition',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['termproperty'])) {
        $this->termproperty = $vals['termproperty'];
      }
      if (isset($vals['condition'])) {
        $this->condition = $vals['condition'];
      }
    }
  }

  public function getName() {
    return 'msgcentersvr_checkPublicMessageNotify_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->termproperty = new \xyz\msgcentersvr\TerminalProperty();
            $xfer += $this->termproperty->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->condition = new \xyz\msgcentersvr\MobileMessageQueryCondition();
            $xfer += $this->condition->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('msgcentersvr_checkPublicMessageNotify_args');
    if ($this->termproperty !== null) {
      if (!is_object($this->termproperty)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('termproperty', TType::STRUCT, 1);
      $xfer += $this->termproperty->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->condition !== null) {
      if (!is_object($this->condition)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('condition', TType::STRUCT, 2);
      $xfer += $this->condition->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class msgcentersvr_checkPublicMessageNotify_result {
  static $_TSPEC;

  /**
   * @var \xyz\msgcentersvr\RetMobileMsg
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\xyz\msgcentersvr\RetMobileMsg',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'msgcentersvr_checkPublicMessageNotify_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \xyz\msgcentersvr\RetMobileMsg();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('msgcentersvr_checkPublicMessageNotify_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class msgcentersvr_queryMobileMessage_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $touid = null;
  /**
   * @var \xyz\msgcentersvr\UserType
   */
  public $type = null;
  /**
   * @var \xyz\msgcentersvr\MobileMessageQueryCondition
   */
  public $condition = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'touid',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'type',
          'type' => TType::STRUCT,
          'class' => '\xyz\msgcentersvr\UserType',
          ),
        3 => array(
          'var' => 'condition',
          'type' => TType::STRUCT,
          'class' => '\xyz\msgcentersvr\MobileMessageQueryCondition',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['touid'])) {
        $this->touid = $vals['touid'];
      }
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['condition'])) {
        $this->condition = $vals['condition'];
      }
    }
  }

  public function getName() {
    return 'msgcentersvr_queryMobileMessage_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->touid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->type = new \xyz\msgcentersvr\UserType();
            $xfer += $this->type->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->condition = new \xyz\msgcentersvr\MobileMessageQueryCondition();
            $xfer += $this->condition->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('msgcentersvr_queryMobileMessage_args');
    if ($this->touid !== null) {
      $xfer += $output->writeFieldBegin('touid', TType::I64, 1);
      $xfer += $output->writeI64($this->touid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->type !== null) {
      if (!is_object($this->type)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('type', TType::STRUCT, 2);
      $xfer += $this->type->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->condition !== null) {
      if (!is_object($this->condition)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('condition', TType::STRUCT, 3);
      $xfer += $this->condition->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class msgcentersvr_queryMobileMessage_result {
  static $_TSPEC;

  /**
   * @var \xyz\msgcentersvr\MobileMessageQueryResult
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\xyz\msgcentersvr\MobileMessageQueryResult',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'msgcentersvr_queryMobileMessage_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \xyz\msgcentersvr\MobileMessageQueryResult();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('msgcentersvr_queryMobileMessage_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class msgcentersvr_getuserpopuplist_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $touid = null;
  /**
   * @var \xyz\msgcentersvr\UserType
   */
  public $type = null;
  /**
   * @var \xyz\msgcentersvr\condition
   */
  public $cond = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'touid',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'type',
          'type' => TType::STRUCT,
          'class' => '\xyz\msgcentersvr\UserType',
          ),
        3 => array(
          'var' => 'cond',
          'type' => TType::STRUCT,
          'class' => '\xyz\msgcentersvr\condition',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['touid'])) {
        $this->touid = $vals['touid'];
      }
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['cond'])) {
        $this->cond = $vals['cond'];
      }
    }
  }

  public function getName() {
    return 'msgcentersvr_getuserpopuplist_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->touid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->type = new \xyz\msgcentersvr\UserType();
            $xfer += $this->type->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->cond = new \xyz\msgcentersvr\condition();
            $xfer += $this->cond->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('msgcentersvr_getuserpopuplist_args');
    if ($this->touid !== null) {
      $xfer += $output->writeFieldBegin('touid', TType::I64, 1);
      $xfer += $output->writeI64($this->touid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->type !== null) {
      if (!is_object($this->type)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('type', TType::STRUCT, 2);
      $xfer += $this->type->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cond !== null) {
      if (!is_object($this->cond)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('cond', TType::STRUCT, 3);
      $xfer += $this->cond->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class msgcentersvr_getuserpopuplist_result {
  static $_TSPEC;

  /**
   * @var \xyz\msgcentersvr\retmsgdata
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\xyz\msgcentersvr\retmsgdata',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'msgcentersvr_getuserpopuplist_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \xyz\msgcentersvr\retmsgdata();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('msgcentersvr_getuserpopuplist_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class msgcentersvr_getuserlist_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $touid = null;
  /**
   * @var \xyz\msgcentersvr\UserType
   */
  public $type = null;
  /**
   * @var \xyz\msgcentersvr\condition
   */
  public $cond = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'touid',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'type',
          'type' => TType::STRUCT,
          'class' => '\xyz\msgcentersvr\UserType',
          ),
        3 => array(
          'var' => 'cond',
          'type' => TType::STRUCT,
          'class' => '\xyz\msgcentersvr\condition',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['touid'])) {
        $this->touid = $vals['touid'];
      }
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['cond'])) {
        $this->cond = $vals['cond'];
      }
    }
  }

  public function getName() {
    return 'msgcentersvr_getuserlist_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->touid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->type = new \xyz\msgcentersvr\UserType();
            $xfer += $this->type->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->cond = new \xyz\msgcentersvr\condition();
            $xfer += $this->cond->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('msgcentersvr_getuserlist_args');
    if ($this->touid !== null) {
      $xfer += $output->writeFieldBegin('touid', TType::I64, 1);
      $xfer += $output->writeI64($this->touid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->type !== null) {
      if (!is_object($this->type)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('type', TType::STRUCT, 2);
      $xfer += $this->type->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cond !== null) {
      if (!is_object($this->cond)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('cond', TType::STRUCT, 3);
      $xfer += $this->cond->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class msgcentersvr_getuserlist_result {
  static $_TSPEC;

  /**
   * @var \xyz\msgcentersvr\retmsgdata
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\xyz\msgcentersvr\retmsgdata',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'msgcentersvr_getuserlist_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \xyz\msgcentersvr\retmsgdata();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('msgcentersvr_getuserlist_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class msgcentersvr_updatenotify_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $touid = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'touid',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['touid'])) {
        $this->touid = $vals['touid'];
      }
    }
  }

  public function getName() {
    return 'msgcentersvr_updatenotify_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->touid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('msgcentersvr_updatenotify_args');
    if ($this->touid !== null) {
      $xfer += $output->writeFieldBegin('touid', TType::I64, 1);
      $xfer += $output->writeI64($this->touid);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class msgcentersvr_updatenotify_result {
  static $_TSPEC;

  /**
   * @var \xyz\msgcentersvr\retcomm
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\xyz\msgcentersvr\retcomm',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'msgcentersvr_updatenotify_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \xyz\msgcentersvr\retcomm();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('msgcentersvr_updatenotify_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


