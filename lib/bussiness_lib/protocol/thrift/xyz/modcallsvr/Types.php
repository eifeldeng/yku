<?php
namespace xyz\modcallsvr;

/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


final class MODID {
  const MODID_BEGIN = 1000000;
  const MODID_MESSAGE = 1000001;
  const MODID_LEVEL = 1000002;
  static public $__names = array(
    1000000 => 'MODID_BEGIN',
    1000001 => 'MODID_MESSAGE',
    1000002 => 'MODID_LEVEL',
  );
}

final class INTERFACEID {
  static public $__names = array(
  );
}

final class McSvrErrorCode {
  const ERR_EXIST_SAMENAME = -400001001;
  const ERR_MCSVR_MYSQL_GET = -400001002;
  const ERR_MCSVR_MYSQL_WRITE = -400001003;
  const ERR_MCSVR_MYSQL_EXCEPT = -400001004;
  const ERR_NOTEXIST_MODID = -400001005;
  const ERR_NOTEXIST_SERVICEID = -400001006;
  const ERR_NOTEXIST_IFCACE = -400001007;
  const ERR_EXIST_SAMEID = -400001008;
  const ERR_MCSVR_ACTIONINFO = -400001009;
  const ERR_MCSVR_REDIS_ASPUSH = -400001010;
  static public $__names = array(
    -400001001 => 'ERR_EXIST_SAMENAME',
    -400001002 => 'ERR_MCSVR_MYSQL_GET',
    -400001003 => 'ERR_MCSVR_MYSQL_WRITE',
    -400001004 => 'ERR_MCSVR_MYSQL_EXCEPT',
    -400001005 => 'ERR_NOTEXIST_MODID',
    -400001006 => 'ERR_NOTEXIST_SERVICEID',
    -400001007 => 'ERR_NOTEXIST_IFCACE',
    -400001008 => 'ERR_EXIST_SAMEID',
    -400001009 => 'ERR_MCSVR_ACTIONINFO',
    -400001010 => 'ERR_MCSVR_REDIS_ASPUSH',
  );
}

class ServiceIdAndName {
  static $_TSPEC;

  public $serviceid = null;
  public $servicename = null;
  public $username = null;
  public $mail = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'serviceid',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'servicename',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'username',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'mail',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['serviceid'])) {
        $this->serviceid = $vals['serviceid'];
      }
      if (isset($vals['servicename'])) {
        $this->servicename = $vals['servicename'];
      }
      if (isset($vals['username'])) {
        $this->username = $vals['username'];
      }
      if (isset($vals['mail'])) {
        $this->mail = $vals['mail'];
      }
    }
  }

  public function getName() {
    return 'ServiceIdAndName';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->serviceid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->servicename);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->username);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->mail);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ServiceIdAndName');
    if ($this->serviceid !== null) {
      $xfer += $output->writeFieldBegin('serviceid', TType::I32, 1);
      $xfer += $output->writeI32($this->serviceid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->servicename !== null) {
      $xfer += $output->writeFieldBegin('servicename', TType::STRING, 2);
      $xfer += $output->writeString($this->servicename);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->username !== null) {
      $xfer += $output->writeFieldBegin('username', TType::STRING, 3);
      $xfer += $output->writeString($this->username);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->mail !== null) {
      $xfer += $output->writeFieldBegin('mail', TType::STRING, 4);
      $xfer += $output->writeString($this->mail);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetServiceListRsp {
  static $_TSPEC;

  public $retcode = null;
  public $service_list = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'retcode',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'service_list',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\xyz\modcallsvr\ServiceIdAndName',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['retcode'])) {
        $this->retcode = $vals['retcode'];
      }
      if (isset($vals['service_list'])) {
        $this->service_list = $vals['service_list'];
      }
    }
  }

  public function getName() {
    return 'GetServiceListRsp';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->retcode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->service_list = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readListBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $elem5 = new \xyz\modcallsvr\ServiceIdAndName();
              $xfer += $elem5->read($input);
              $this->service_list []= $elem5;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetServiceListRsp');
    if ($this->retcode !== null) {
      $xfer += $output->writeFieldBegin('retcode', TType::I32, 1);
      $xfer += $output->writeI32($this->retcode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->service_list !== null) {
      if (!is_array($this->service_list)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('service_list', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRUCT, count($this->service_list));
        {
          foreach ($this->service_list as $iter6)
          {
            $xfer += $iter6->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ModIdAndName {
  static $_TSPEC;

  public $serviceid = null;
  public $modid = null;
  public $modname = null;
  public $username = null;
  public $mail = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'serviceid',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'modid',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'modname',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'username',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'mail',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['serviceid'])) {
        $this->serviceid = $vals['serviceid'];
      }
      if (isset($vals['modid'])) {
        $this->modid = $vals['modid'];
      }
      if (isset($vals['modname'])) {
        $this->modname = $vals['modname'];
      }
      if (isset($vals['username'])) {
        $this->username = $vals['username'];
      }
      if (isset($vals['mail'])) {
        $this->mail = $vals['mail'];
      }
    }
  }

  public function getName() {
    return 'ModIdAndName';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->serviceid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->modid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->modname);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->username);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->mail);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ModIdAndName');
    if ($this->serviceid !== null) {
      $xfer += $output->writeFieldBegin('serviceid', TType::I32, 1);
      $xfer += $output->writeI32($this->serviceid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->modid !== null) {
      $xfer += $output->writeFieldBegin('modid', TType::I32, 2);
      $xfer += $output->writeI32($this->modid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->modname !== null) {
      $xfer += $output->writeFieldBegin('modname', TType::STRING, 3);
      $xfer += $output->writeString($this->modname);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->username !== null) {
      $xfer += $output->writeFieldBegin('username', TType::STRING, 4);
      $xfer += $output->writeString($this->username);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->mail !== null) {
      $xfer += $output->writeFieldBegin('mail', TType::STRING, 5);
      $xfer += $output->writeString($this->mail);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetModListRsp {
  static $_TSPEC;

  public $retcode = null;
  public $mod_list = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'retcode',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'mod_list',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\xyz\modcallsvr\ModIdAndName',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['retcode'])) {
        $this->retcode = $vals['retcode'];
      }
      if (isset($vals['mod_list'])) {
        $this->mod_list = $vals['mod_list'];
      }
    }
  }

  public function getName() {
    return 'GetModListRsp';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->retcode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->mod_list = array();
            $_size7 = 0;
            $_etype10 = 0;
            $xfer += $input->readListBegin($_etype10, $_size7);
            for ($_i11 = 0; $_i11 < $_size7; ++$_i11)
            {
              $elem12 = null;
              $elem12 = new \xyz\modcallsvr\ModIdAndName();
              $xfer += $elem12->read($input);
              $this->mod_list []= $elem12;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetModListRsp');
    if ($this->retcode !== null) {
      $xfer += $output->writeFieldBegin('retcode', TType::I32, 1);
      $xfer += $output->writeI32($this->retcode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->mod_list !== null) {
      if (!is_array($this->mod_list)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('mod_list', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRUCT, count($this->mod_list));
        {
          foreach ($this->mod_list as $iter13)
          {
            $xfer += $iter13->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class IfaceIdAndName {
  static $_TSPEC;

  public $serviceid = null;
  public $modid = null;
  public $ifaceid = null;
  public $ifacename = null;
  public $desc = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'serviceid',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'modid',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'ifaceid',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'ifacename',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'desc',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['serviceid'])) {
        $this->serviceid = $vals['serviceid'];
      }
      if (isset($vals['modid'])) {
        $this->modid = $vals['modid'];
      }
      if (isset($vals['ifaceid'])) {
        $this->ifaceid = $vals['ifaceid'];
      }
      if (isset($vals['ifacename'])) {
        $this->ifacename = $vals['ifacename'];
      }
      if (isset($vals['desc'])) {
        $this->desc = $vals['desc'];
      }
    }
  }

  public function getName() {
    return 'IfaceIdAndName';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->serviceid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->modid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ifaceid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ifacename);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->desc);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('IfaceIdAndName');
    if ($this->serviceid !== null) {
      $xfer += $output->writeFieldBegin('serviceid', TType::I32, 1);
      $xfer += $output->writeI32($this->serviceid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->modid !== null) {
      $xfer += $output->writeFieldBegin('modid', TType::I32, 2);
      $xfer += $output->writeI32($this->modid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ifaceid !== null) {
      $xfer += $output->writeFieldBegin('ifaceid', TType::I32, 3);
      $xfer += $output->writeI32($this->ifaceid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ifacename !== null) {
      $xfer += $output->writeFieldBegin('ifacename', TType::STRING, 4);
      $xfer += $output->writeString($this->ifacename);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->desc !== null) {
      $xfer += $output->writeFieldBegin('desc', TType::STRING, 5);
      $xfer += $output->writeString($this->desc);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetIfaceListRsp {
  static $_TSPEC;

  public $retcode = null;
  public $iface_list = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'retcode',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'iface_list',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\xyz\modcallsvr\IfaceIdAndName',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['retcode'])) {
        $this->retcode = $vals['retcode'];
      }
      if (isset($vals['iface_list'])) {
        $this->iface_list = $vals['iface_list'];
      }
    }
  }

  public function getName() {
    return 'GetIfaceListRsp';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->retcode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->iface_list = array();
            $_size14 = 0;
            $_etype17 = 0;
            $xfer += $input->readListBegin($_etype17, $_size14);
            for ($_i18 = 0; $_i18 < $_size14; ++$_i18)
            {
              $elem19 = null;
              $elem19 = new \xyz\modcallsvr\IfaceIdAndName();
              $xfer += $elem19->read($input);
              $this->iface_list []= $elem19;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetIfaceListRsp');
    if ($this->retcode !== null) {
      $xfer += $output->writeFieldBegin('retcode', TType::I32, 1);
      $xfer += $output->writeI32($this->retcode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->iface_list !== null) {
      if (!is_array($this->iface_list)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('iface_list', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRUCT, count($this->iface_list));
        {
          foreach ($this->iface_list as $iter20)
          {
            $xfer += $iter20->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class NewServiceIdReq {
  static $_TSPEC;

  public $servicename = null;
  public $username = null;
  public $mail = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'servicename',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'username',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'mail',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['servicename'])) {
        $this->servicename = $vals['servicename'];
      }
      if (isset($vals['username'])) {
        $this->username = $vals['username'];
      }
      if (isset($vals['mail'])) {
        $this->mail = $vals['mail'];
      }
    }
  }

  public function getName() {
    return 'NewServiceIdReq';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->servicename);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->username);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->mail);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('NewServiceIdReq');
    if ($this->servicename !== null) {
      $xfer += $output->writeFieldBegin('servicename', TType::STRING, 1);
      $xfer += $output->writeString($this->servicename);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->username !== null) {
      $xfer += $output->writeFieldBegin('username', TType::STRING, 2);
      $xfer += $output->writeString($this->username);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->mail !== null) {
      $xfer += $output->writeFieldBegin('mail', TType::STRING, 3);
      $xfer += $output->writeString($this->mail);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class NewModIdReq {
  static $_TSPEC;

  public $serviceid = null;
  public $modname = null;
  public $username = null;
  public $mail = null;
  public $desc = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'serviceid',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'modname',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'username',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'mail',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'desc',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['serviceid'])) {
        $this->serviceid = $vals['serviceid'];
      }
      if (isset($vals['modname'])) {
        $this->modname = $vals['modname'];
      }
      if (isset($vals['username'])) {
        $this->username = $vals['username'];
      }
      if (isset($vals['mail'])) {
        $this->mail = $vals['mail'];
      }
      if (isset($vals['desc'])) {
        $this->desc = $vals['desc'];
      }
    }
  }

  public function getName() {
    return 'NewModIdReq';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->serviceid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->modname);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->username);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->mail);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->desc);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('NewModIdReq');
    if ($this->serviceid !== null) {
      $xfer += $output->writeFieldBegin('serviceid', TType::I32, 1);
      $xfer += $output->writeI32($this->serviceid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->modname !== null) {
      $xfer += $output->writeFieldBegin('modname', TType::STRING, 3);
      $xfer += $output->writeString($this->modname);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->username !== null) {
      $xfer += $output->writeFieldBegin('username', TType::STRING, 4);
      $xfer += $output->writeString($this->username);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->mail !== null) {
      $xfer += $output->writeFieldBegin('mail', TType::STRING, 5);
      $xfer += $output->writeString($this->mail);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->desc !== null) {
      $xfer += $output->writeFieldBegin('desc', TType::STRING, 6);
      $xfer += $output->writeString($this->desc);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class NewIfIdReq {
  static $_TSPEC;

  public $serviceid = null;
  public $modid = null;
  public $ifacename = null;
  public $desc = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'serviceid',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'modid',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'ifacename',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'desc',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['serviceid'])) {
        $this->serviceid = $vals['serviceid'];
      }
      if (isset($vals['modid'])) {
        $this->modid = $vals['modid'];
      }
      if (isset($vals['ifacename'])) {
        $this->ifacename = $vals['ifacename'];
      }
      if (isset($vals['desc'])) {
        $this->desc = $vals['desc'];
      }
    }
  }

  public function getName() {
    return 'NewIfIdReq';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->serviceid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->modid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ifacename);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->desc);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('NewIfIdReq');
    if ($this->serviceid !== null) {
      $xfer += $output->writeFieldBegin('serviceid', TType::I32, 1);
      $xfer += $output->writeI32($this->serviceid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->modid !== null) {
      $xfer += $output->writeFieldBegin('modid', TType::I32, 2);
      $xfer += $output->writeI32($this->modid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ifacename !== null) {
      $xfer += $output->writeFieldBegin('ifacename', TType::STRING, 3);
      $xfer += $output->writeString($this->ifacename);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->desc !== null) {
      $xfer += $output->writeFieldBegin('desc', TType::STRING, 4);
      $xfer += $output->writeString($this->desc);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ReportMcReqMsg {
  static $_TSPEC;

  public $ytid = null;
  public $callermodid = null;
  public $ifaceid = null;
  public $suc = null;
  public $retcode = null;
  public $calleeip = null;
  public $callerip = null;
  public $usetime = null;
  public $nowtime = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ytid',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'callermodid',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'ifaceid',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'suc',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'retcode',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'calleeip',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'callerip',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'usetime',
          'type' => TType::I32,
          ),
        9 => array(
          'var' => 'nowtime',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ytid'])) {
        $this->ytid = $vals['ytid'];
      }
      if (isset($vals['callermodid'])) {
        $this->callermodid = $vals['callermodid'];
      }
      if (isset($vals['ifaceid'])) {
        $this->ifaceid = $vals['ifaceid'];
      }
      if (isset($vals['suc'])) {
        $this->suc = $vals['suc'];
      }
      if (isset($vals['retcode'])) {
        $this->retcode = $vals['retcode'];
      }
      if (isset($vals['calleeip'])) {
        $this->calleeip = $vals['calleeip'];
      }
      if (isset($vals['callerip'])) {
        $this->callerip = $vals['callerip'];
      }
      if (isset($vals['usetime'])) {
        $this->usetime = $vals['usetime'];
      }
      if (isset($vals['nowtime'])) {
        $this->nowtime = $vals['nowtime'];
      }
    }
  }

  public function getName() {
    return 'ReportMcReqMsg';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->ytid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->callermodid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ifaceid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->suc);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->retcode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->calleeip);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->callerip);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->usetime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->nowtime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ReportMcReqMsg');
    if ($this->ytid !== null) {
      $xfer += $output->writeFieldBegin('ytid', TType::I64, 1);
      $xfer += $output->writeI64($this->ytid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->callermodid !== null) {
      $xfer += $output->writeFieldBegin('callermodid', TType::I32, 2);
      $xfer += $output->writeI32($this->callermodid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ifaceid !== null) {
      $xfer += $output->writeFieldBegin('ifaceid', TType::I32, 3);
      $xfer += $output->writeI32($this->ifaceid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->suc !== null) {
      $xfer += $output->writeFieldBegin('suc', TType::I32, 4);
      $xfer += $output->writeI32($this->suc);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->retcode !== null) {
      $xfer += $output->writeFieldBegin('retcode', TType::I32, 5);
      $xfer += $output->writeI32($this->retcode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->calleeip !== null) {
      $xfer += $output->writeFieldBegin('calleeip', TType::I32, 6);
      $xfer += $output->writeI32($this->calleeip);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->callerip !== null) {
      $xfer += $output->writeFieldBegin('callerip', TType::I32, 7);
      $xfer += $output->writeI32($this->callerip);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->usetime !== null) {
      $xfer += $output->writeFieldBegin('usetime', TType::I32, 8);
      $xfer += $output->writeI32($this->usetime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->nowtime !== null) {
      $xfer += $output->writeFieldBegin('nowtime', TType::I32, 9);
      $xfer += $output->writeI32($this->nowtime);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


