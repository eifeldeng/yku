<?php
namespace xyz\filtersvr;

/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


final class FilterErroCode {
  const ERR_SVR_FILTER_BEGIN = -400007001;
  const ERR_SVR_REDIS_RETURN = -400007002;
  const ERR_SVR_ACTIONID_UNMATCH = -400007003;
  const ERR_SVR_REDIS_PACK = -400007004;
  const ERR_SVR_ACTIONINFO = -400007005;
  const ERR_SVR_FILTER_END = -400008000;
  static public $__names = array(
    -400007001 => 'ERR_SVR_FILTER_BEGIN',
    -400007002 => 'ERR_SVR_REDIS_RETURN',
    -400007003 => 'ERR_SVR_ACTIONID_UNMATCH',
    -400007004 => 'ERR_SVR_REDIS_PACK',
    -400007005 => 'ERR_SVR_ACTIONINFO',
    -400008000 => 'ERR_SVR_FILTER_END',
  );
}

class CreditRsp {
  static $_TSPEC;

  public $retcode = null;
  public $yid = null;
  public $credit = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'retcode',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'yid',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'credit',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['retcode'])) {
        $this->retcode = $vals['retcode'];
      }
      if (isset($vals['yid'])) {
        $this->yid = $vals['yid'];
      }
      if (isset($vals['credit'])) {
        $this->credit = $vals['credit'];
      }
    }
  }

  public function getName() {
    return 'CreditRsp';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->retcode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->yid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->credit);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CreditRsp');
    if ($this->retcode !== null) {
      $xfer += $output->writeFieldBegin('retcode', TType::I32, 1);
      $xfer += $output->writeI32($this->retcode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->yid !== null) {
      $xfer += $output->writeFieldBegin('yid', TType::I64, 2);
      $xfer += $output->writeI64($this->yid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->credit !== null) {
      $xfer += $output->writeFieldBegin('credit', TType::I32, 3);
      $xfer += $output->writeI32($this->credit);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class LimitFreqReq {
  static $_TSPEC;

  public $yid = null;
  public $servic_ename = null;
  public $limit_name = null;
  public $limit_periods = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'yid',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'servic_ename',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'limit_name',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'limit_periods',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['yid'])) {
        $this->yid = $vals['yid'];
      }
      if (isset($vals['servic_ename'])) {
        $this->servic_ename = $vals['servic_ename'];
      }
      if (isset($vals['limit_name'])) {
        $this->limit_name = $vals['limit_name'];
      }
      if (isset($vals['limit_periods'])) {
        $this->limit_periods = $vals['limit_periods'];
      }
    }
  }

  public function getName() {
    return 'LimitFreqReq';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->yid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->servic_ename);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->limit_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->limit_periods);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('LimitFreqReq');
    if ($this->yid !== null) {
      $xfer += $output->writeFieldBegin('yid', TType::I64, 1);
      $xfer += $output->writeI64($this->yid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->servic_ename !== null) {
      $xfer += $output->writeFieldBegin('servic_ename', TType::STRING, 2);
      $xfer += $output->writeString($this->servic_ename);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->limit_name !== null) {
      $xfer += $output->writeFieldBegin('limit_name', TType::STRING, 3);
      $xfer += $output->writeString($this->limit_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->limit_periods !== null) {
      $xfer += $output->writeFieldBegin('limit_periods', TType::STRING, 4);
      $xfer += $output->writeString($this->limit_periods);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class LimitFreqRsp {
  static $_TSPEC;

  public $retcode = null;
  public $yid = null;
  public $num = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'retcode',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'yid',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'num',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['retcode'])) {
        $this->retcode = $vals['retcode'];
      }
      if (isset($vals['yid'])) {
        $this->yid = $vals['yid'];
      }
      if (isset($vals['num'])) {
        $this->num = $vals['num'];
      }
    }
  }

  public function getName() {
    return 'LimitFreqRsp';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->retcode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->yid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->num);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('LimitFreqRsp');
    if ($this->retcode !== null) {
      $xfer += $output->writeFieldBegin('retcode', TType::I32, 1);
      $xfer += $output->writeI32($this->retcode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->yid !== null) {
      $xfer += $output->writeFieldBegin('yid', TType::I64, 2);
      $xfer += $output->writeI64($this->yid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->num !== null) {
      $xfer += $output->writeFieldBegin('num', TType::I64, 3);
      $xfer += $output->writeI64($this->num);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class IsAlphaUserReq {
  static $_TSPEC;

  public $yid = null;
  public $alpha_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'yid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'alpha_id',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['yid'])) {
        $this->yid = $vals['yid'];
      }
      if (isset($vals['alpha_id'])) {
        $this->alpha_id = $vals['alpha_id'];
      }
    }
  }

  public function getName() {
    return 'IsAlphaUserReq';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->yid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->alpha_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('IsAlphaUserReq');
    if ($this->yid !== null) {
      $xfer += $output->writeFieldBegin('yid', TType::STRING, 1);
      $xfer += $output->writeString($this->yid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->alpha_id !== null) {
      $xfer += $output->writeFieldBegin('alpha_id', TType::STRING, 2);
      $xfer += $output->writeString($this->alpha_id);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class IsAlphaUserRsp {
  static $_TSPEC;

  public $retcode = null;
  public $yid = null;
  public $alpha_id = null;
  public $status = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'retcode',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'yid',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'alpha_id',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'status',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['retcode'])) {
        $this->retcode = $vals['retcode'];
      }
      if (isset($vals['yid'])) {
        $this->yid = $vals['yid'];
      }
      if (isset($vals['alpha_id'])) {
        $this->alpha_id = $vals['alpha_id'];
      }
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
    }
  }

  public function getName() {
    return 'IsAlphaUserRsp';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->retcode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->yid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->alpha_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('IsAlphaUserRsp');
    if ($this->retcode !== null) {
      $xfer += $output->writeFieldBegin('retcode', TType::I32, 1);
      $xfer += $output->writeI32($this->retcode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->yid !== null) {
      $xfer += $output->writeFieldBegin('yid', TType::STRING, 2);
      $xfer += $output->writeString($this->yid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->alpha_id !== null) {
      $xfer += $output->writeFieldBegin('alpha_id', TType::STRING, 3);
      $xfer += $output->writeString($this->alpha_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->status !== null) {
      $xfer += $output->writeFieldBegin('status', TType::I32, 4);
      $xfer += $output->writeI32($this->status);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


