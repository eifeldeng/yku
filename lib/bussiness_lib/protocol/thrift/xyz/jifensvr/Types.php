<?php
namespace xyz\jifensvr;

/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


final class JifenSvrErrorCode {
  const ERR_SVR_JIFEN_BEGIN = -400009001;
  const ERR_SVR_JIFEN_MYSQL_GET = -400009002;
  const ERR_SVR_JIFEN_REDIS_GET = -400009003;
  const ERR_SVR_JIFEN_IDMGR = -400009004;
  const ERR_SVR_JIFEN_MYSQL_SET = -400009005;
  const ERR_SVR_JIFEN_NOBUSS = -400009006;
  const ERR_SVR_JIFEN_NOACCOUT = -400009007;
  const ERR_SVR_JIFEN_SIGN = -400009008;
  const ERR_SVR_JIFEN_PACKJSON = -400009009;
  const ERR_SVR_JIFEN_REDIS_SET = -400009010;
  const ERR_SVR_JIFEN_REPEAT_ORDER = -400009011;
  const ERR_SVR_JIFEN_REPEAT_BUSS = -400009012;
  const ERR_SVR_JIFEN_BALANCE = -400009013;
  const ERR_SVR_JIFEN_JSON_READ = -400009014;
  const ERR_SVR_JIFEN_REDIS_TRANS = -400009015;
  const ERR_SVR_JIFEN_ACTIONINFO = -400009016;
  const ERR_SVR_JIFEN_REDIS_ASGET = -400009017;
  const ERR_SVR_JIFEN_FRQ_LIMIT = -400009018;
  const ERR_SVR_JIFEN_AMOUT_LIMIT = -400009019;
  const ERR_SVR_TASK_END = -400010000;
  static public $__names = array(
    -400009001 => 'ERR_SVR_JIFEN_BEGIN',
    -400009002 => 'ERR_SVR_JIFEN_MYSQL_GET',
    -400009003 => 'ERR_SVR_JIFEN_REDIS_GET',
    -400009004 => 'ERR_SVR_JIFEN_IDMGR',
    -400009005 => 'ERR_SVR_JIFEN_MYSQL_SET',
    -400009006 => 'ERR_SVR_JIFEN_NOBUSS',
    -400009007 => 'ERR_SVR_JIFEN_NOACCOUT',
    -400009008 => 'ERR_SVR_JIFEN_SIGN',
    -400009009 => 'ERR_SVR_JIFEN_PACKJSON',
    -400009010 => 'ERR_SVR_JIFEN_REDIS_SET',
    -400009011 => 'ERR_SVR_JIFEN_REPEAT_ORDER',
    -400009012 => 'ERR_SVR_JIFEN_REPEAT_BUSS',
    -400009013 => 'ERR_SVR_JIFEN_BALANCE',
    -400009014 => 'ERR_SVR_JIFEN_JSON_READ',
    -400009015 => 'ERR_SVR_JIFEN_REDIS_TRANS',
    -400009016 => 'ERR_SVR_JIFEN_ACTIONINFO',
    -400009017 => 'ERR_SVR_JIFEN_REDIS_ASGET',
    -400009018 => 'ERR_SVR_JIFEN_FRQ_LIMIT',
    -400009019 => 'ERR_SVR_JIFEN_AMOUT_LIMIT',
    -400010000 => 'ERR_SVR_TASK_END',
  );
}

final class JifenReviewState {
  const E_NEW = 0;
  const E_ACCPET = 1;
  const E_REJECT = 2;
  const E_BACK = 3;
  static public $__names = array(
    0 => 'E_NEW',
    1 => 'E_ACCPET',
    2 => 'E_REJECT',
    3 => 'E_BACK',
  );
}

class OrderReq {
  static $_TSPEC;

  public $ori_order_id = null;
  public $payer_id = null;
  public $payee_id = null;
  public $amount = null;
  public $clientip = null;
  public $product_name = null;
  public $desc = null;
  public $from_service = null;
  public $platform = null;
  public $create_time = null;
  public $remark = null;
  public $version = null;
  public $sign_type = null;
  public $sign = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ori_order_id',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'payer_id',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'payee_id',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'amount',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'clientip',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'product_name',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'desc',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'from_service',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'platform',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'create_time',
          'type' => TType::I64,
          ),
        11 => array(
          'var' => 'remark',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'version',
          'type' => TType::STRING,
          ),
        13 => array(
          'var' => 'sign_type',
          'type' => TType::STRING,
          ),
        14 => array(
          'var' => 'sign',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ori_order_id'])) {
        $this->ori_order_id = $vals['ori_order_id'];
      }
      if (isset($vals['payer_id'])) {
        $this->payer_id = $vals['payer_id'];
      }
      if (isset($vals['payee_id'])) {
        $this->payee_id = $vals['payee_id'];
      }
      if (isset($vals['amount'])) {
        $this->amount = $vals['amount'];
      }
      if (isset($vals['clientip'])) {
        $this->clientip = $vals['clientip'];
      }
      if (isset($vals['product_name'])) {
        $this->product_name = $vals['product_name'];
      }
      if (isset($vals['desc'])) {
        $this->desc = $vals['desc'];
      }
      if (isset($vals['from_service'])) {
        $this->from_service = $vals['from_service'];
      }
      if (isset($vals['platform'])) {
        $this->platform = $vals['platform'];
      }
      if (isset($vals['create_time'])) {
        $this->create_time = $vals['create_time'];
      }
      if (isset($vals['remark'])) {
        $this->remark = $vals['remark'];
      }
      if (isset($vals['version'])) {
        $this->version = $vals['version'];
      }
      if (isset($vals['sign_type'])) {
        $this->sign_type = $vals['sign_type'];
      }
      if (isset($vals['sign'])) {
        $this->sign = $vals['sign'];
      }
    }
  }

  public function getName() {
    return 'OrderReq';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ori_order_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->payer_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->payee_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->amount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientip);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->product_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->desc);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->from_service);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->platform);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->create_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->remark);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->version);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->sign_type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->sign);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderReq');
    if ($this->ori_order_id !== null) {
      $xfer += $output->writeFieldBegin('ori_order_id', TType::STRING, 1);
      $xfer += $output->writeString($this->ori_order_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->payer_id !== null) {
      $xfer += $output->writeFieldBegin('payer_id', TType::I64, 2);
      $xfer += $output->writeI64($this->payer_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->payee_id !== null) {
      $xfer += $output->writeFieldBegin('payee_id', TType::I64, 3);
      $xfer += $output->writeI64($this->payee_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->amount !== null) {
      $xfer += $output->writeFieldBegin('amount', TType::I32, 4);
      $xfer += $output->writeI32($this->amount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientip !== null) {
      $xfer += $output->writeFieldBegin('clientip', TType::STRING, 5);
      $xfer += $output->writeString($this->clientip);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->product_name !== null) {
      $xfer += $output->writeFieldBegin('product_name', TType::STRING, 6);
      $xfer += $output->writeString($this->product_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->desc !== null) {
      $xfer += $output->writeFieldBegin('desc', TType::STRING, 7);
      $xfer += $output->writeString($this->desc);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->from_service !== null) {
      $xfer += $output->writeFieldBegin('from_service', TType::STRING, 8);
      $xfer += $output->writeString($this->from_service);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->platform !== null) {
      $xfer += $output->writeFieldBegin('platform', TType::STRING, 9);
      $xfer += $output->writeString($this->platform);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->create_time !== null) {
      $xfer += $output->writeFieldBegin('create_time', TType::I64, 10);
      $xfer += $output->writeI64($this->create_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->remark !== null) {
      $xfer += $output->writeFieldBegin('remark', TType::STRING, 11);
      $xfer += $output->writeString($this->remark);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->version !== null) {
      $xfer += $output->writeFieldBegin('version', TType::STRING, 12);
      $xfer += $output->writeString($this->version);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sign_type !== null) {
      $xfer += $output->writeFieldBegin('sign_type', TType::STRING, 13);
      $xfer += $output->writeString($this->sign_type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sign !== null) {
      $xfer += $output->writeFieldBegin('sign', TType::STRING, 14);
      $xfer += $output->writeString($this->sign);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AddPointReq {
  static $_TSPEC;

  public $order = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'order',
          'type' => TType::STRUCT,
          'class' => '\xyz\jifensvr\OrderReq',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['order'])) {
        $this->order = $vals['order'];
      }
    }
  }

  public function getName() {
    return 'AddPointReq';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->order = new \xyz\jifensvr\OrderReq();
            $xfer += $this->order->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AddPointReq');
    if ($this->order !== null) {
      if (!is_object($this->order)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('order', TType::STRUCT, 1);
      $xfer += $this->order->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class QueueItem {
  static $_TSPEC;

  public $order = null;
  public $orderid = null;
  public $paytime = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'order',
          'type' => TType::STRUCT,
          'class' => '\xyz\jifensvr\OrderReq',
          ),
        2 => array(
          'var' => 'orderid',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'paytime',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['order'])) {
        $this->order = $vals['order'];
      }
      if (isset($vals['orderid'])) {
        $this->orderid = $vals['orderid'];
      }
      if (isset($vals['paytime'])) {
        $this->paytime = $vals['paytime'];
      }
    }
  }

  public function getName() {
    return 'QueueItem';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->order = new \xyz\jifensvr\OrderReq();
            $xfer += $this->order->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->orderid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->paytime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('QueueItem');
    if ($this->order !== null) {
      if (!is_object($this->order)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('order', TType::STRUCT, 1);
      $xfer += $this->order->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->orderid !== null) {
      $xfer += $output->writeFieldBegin('orderid', TType::STRING, 2);
      $xfer += $output->writeString($this->orderid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->paytime !== null) {
      $xfer += $output->writeFieldBegin('paytime', TType::I64, 3);
      $xfer += $output->writeI64($this->paytime);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderDetail {
  static $_TSPEC;

  public $ori_order_id = null;
  public $order_id = null;
  public $payer_id = null;
  public $payee_id = null;
  public $amount = null;
  public $clientip = null;
  public $product_name = null;
  public $desc = null;
  public $from_service = null;
  public $platform = null;
  public $create_time = null;
  public $pay_time = null;
  public $remark = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ori_order_id',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'order_id',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'payer_id',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'payee_id',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'amount',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'clientip',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'product_name',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'desc',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'from_service',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'platform',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'create_time',
          'type' => TType::I64,
          ),
        12 => array(
          'var' => 'pay_time',
          'type' => TType::I64,
          ),
        13 => array(
          'var' => 'remark',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ori_order_id'])) {
        $this->ori_order_id = $vals['ori_order_id'];
      }
      if (isset($vals['order_id'])) {
        $this->order_id = $vals['order_id'];
      }
      if (isset($vals['payer_id'])) {
        $this->payer_id = $vals['payer_id'];
      }
      if (isset($vals['payee_id'])) {
        $this->payee_id = $vals['payee_id'];
      }
      if (isset($vals['amount'])) {
        $this->amount = $vals['amount'];
      }
      if (isset($vals['clientip'])) {
        $this->clientip = $vals['clientip'];
      }
      if (isset($vals['product_name'])) {
        $this->product_name = $vals['product_name'];
      }
      if (isset($vals['desc'])) {
        $this->desc = $vals['desc'];
      }
      if (isset($vals['from_service'])) {
        $this->from_service = $vals['from_service'];
      }
      if (isset($vals['platform'])) {
        $this->platform = $vals['platform'];
      }
      if (isset($vals['create_time'])) {
        $this->create_time = $vals['create_time'];
      }
      if (isset($vals['pay_time'])) {
        $this->pay_time = $vals['pay_time'];
      }
      if (isset($vals['remark'])) {
        $this->remark = $vals['remark'];
      }
    }
  }

  public function getName() {
    return 'OrderDetail';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ori_order_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->order_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->payer_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->payee_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->amount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientip);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->product_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->desc);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->from_service);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->platform);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->create_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->pay_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->remark);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderDetail');
    if ($this->ori_order_id !== null) {
      $xfer += $output->writeFieldBegin('ori_order_id', TType::STRING, 1);
      $xfer += $output->writeString($this->ori_order_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->order_id !== null) {
      $xfer += $output->writeFieldBegin('order_id', TType::I64, 2);
      $xfer += $output->writeI64($this->order_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->payer_id !== null) {
      $xfer += $output->writeFieldBegin('payer_id', TType::I64, 3);
      $xfer += $output->writeI64($this->payer_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->payee_id !== null) {
      $xfer += $output->writeFieldBegin('payee_id', TType::I64, 4);
      $xfer += $output->writeI64($this->payee_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->amount !== null) {
      $xfer += $output->writeFieldBegin('amount', TType::I32, 5);
      $xfer += $output->writeI32($this->amount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientip !== null) {
      $xfer += $output->writeFieldBegin('clientip', TType::STRING, 6);
      $xfer += $output->writeString($this->clientip);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->product_name !== null) {
      $xfer += $output->writeFieldBegin('product_name', TType::STRING, 7);
      $xfer += $output->writeString($this->product_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->desc !== null) {
      $xfer += $output->writeFieldBegin('desc', TType::STRING, 8);
      $xfer += $output->writeString($this->desc);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->from_service !== null) {
      $xfer += $output->writeFieldBegin('from_service', TType::STRING, 9);
      $xfer += $output->writeString($this->from_service);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->platform !== null) {
      $xfer += $output->writeFieldBegin('platform', TType::STRING, 10);
      $xfer += $output->writeString($this->platform);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->create_time !== null) {
      $xfer += $output->writeFieldBegin('create_time', TType::I64, 11);
      $xfer += $output->writeI64($this->create_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pay_time !== null) {
      $xfer += $output->writeFieldBegin('pay_time', TType::I64, 12);
      $xfer += $output->writeI64($this->pay_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->remark !== null) {
      $xfer += $output->writeFieldBegin('remark', TType::STRING, 13);
      $xfer += $output->writeString($this->remark);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AddPointRsp {
  static $_TSPEC;

  public $retcode = null;
  public $order_detail = null;
  public $balance = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'retcode',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'order_detail',
          'type' => TType::STRUCT,
          'class' => '\xyz\jifensvr\OrderDetail',
          ),
        3 => array(
          'var' => 'balance',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['retcode'])) {
        $this->retcode = $vals['retcode'];
      }
      if (isset($vals['order_detail'])) {
        $this->order_detail = $vals['order_detail'];
      }
      if (isset($vals['balance'])) {
        $this->balance = $vals['balance'];
      }
    }
  }

  public function getName() {
    return 'AddPointRsp';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->retcode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->order_detail = new \xyz\jifensvr\OrderDetail();
            $xfer += $this->order_detail->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->balance);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AddPointRsp');
    if ($this->retcode !== null) {
      $xfer += $output->writeFieldBegin('retcode', TType::I32, 1);
      $xfer += $output->writeI32($this->retcode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->order_detail !== null) {
      if (!is_object($this->order_detail)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('order_detail', TType::STRUCT, 2);
      $xfer += $this->order_detail->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->balance !== null) {
      $xfer += $output->writeFieldBegin('balance', TType::I32, 3);
      $xfer += $output->writeI32($this->balance);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConsumePointReq {
  static $_TSPEC;

  public $order = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'order',
          'type' => TType::STRUCT,
          'class' => '\xyz\jifensvr\OrderReq',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['order'])) {
        $this->order = $vals['order'];
      }
    }
  }

  public function getName() {
    return 'ConsumePointReq';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->order = new \xyz\jifensvr\OrderReq();
            $xfer += $this->order->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConsumePointReq');
    if ($this->order !== null) {
      if (!is_object($this->order)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('order', TType::STRUCT, 1);
      $xfer += $this->order->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConsumePointRsp {
  static $_TSPEC;

  public $retcode = null;
  public $order_detail = null;
  public $balance = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'retcode',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'order_detail',
          'type' => TType::STRUCT,
          'class' => '\xyz\jifensvr\OrderDetail',
          ),
        3 => array(
          'var' => 'balance',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['retcode'])) {
        $this->retcode = $vals['retcode'];
      }
      if (isset($vals['order_detail'])) {
        $this->order_detail = $vals['order_detail'];
      }
      if (isset($vals['balance'])) {
        $this->balance = $vals['balance'];
      }
    }
  }

  public function getName() {
    return 'ConsumePointRsp';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->retcode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->order_detail = new \xyz\jifensvr\OrderDetail();
            $xfer += $this->order_detail->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->balance);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConsumePointRsp');
    if ($this->retcode !== null) {
      $xfer += $output->writeFieldBegin('retcode', TType::I32, 1);
      $xfer += $output->writeI32($this->retcode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->order_detail !== null) {
      if (!is_object($this->order_detail)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('order_detail', TType::STRUCT, 2);
      $xfer += $this->order_detail->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->balance !== null) {
      $xfer += $output->writeFieldBegin('balance', TType::I32, 3);
      $xfer += $output->writeI32($this->balance);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class QueryOrderRsp {
  static $_TSPEC;

  public $retcode = null;
  public $order_detail = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'retcode',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'order_detail',
          'type' => TType::STRUCT,
          'class' => '\xyz\jifensvr\OrderDetail',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['retcode'])) {
        $this->retcode = $vals['retcode'];
      }
      if (isset($vals['order_detail'])) {
        $this->order_detail = $vals['order_detail'];
      }
    }
  }

  public function getName() {
    return 'QueryOrderRsp';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->retcode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->order_detail = new \xyz\jifensvr\OrderDetail();
            $xfer += $this->order_detail->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('QueryOrderRsp');
    if ($this->retcode !== null) {
      $xfer += $output->writeFieldBegin('retcode', TType::I32, 1);
      $xfer += $output->writeI32($this->retcode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->order_detail !== null) {
      if (!is_object($this->order_detail)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('order_detail', TType::STRUCT, 2);
      $xfer += $this->order_detail->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class QueryOrderListReq {
  static $_TSPEC;

  public $ytid = null;
  public $pay_type = null;
  public $start_time = null;
  public $end_time = null;
  public $page_no = null;
  public $page_size = null;
  public $clientip = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ytid',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'pay_type',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'start_time',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'end_time',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'page_no',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'page_size',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'clientip',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ytid'])) {
        $this->ytid = $vals['ytid'];
      }
      if (isset($vals['pay_type'])) {
        $this->pay_type = $vals['pay_type'];
      }
      if (isset($vals['start_time'])) {
        $this->start_time = $vals['start_time'];
      }
      if (isset($vals['end_time'])) {
        $this->end_time = $vals['end_time'];
      }
      if (isset($vals['page_no'])) {
        $this->page_no = $vals['page_no'];
      }
      if (isset($vals['page_size'])) {
        $this->page_size = $vals['page_size'];
      }
      if (isset($vals['clientip'])) {
        $this->clientip = $vals['clientip'];
      }
    }
  }

  public function getName() {
    return 'QueryOrderListReq';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->ytid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->pay_type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->start_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->end_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->page_no);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->page_size);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientip);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('QueryOrderListReq');
    if ($this->ytid !== null) {
      $xfer += $output->writeFieldBegin('ytid', TType::I64, 1);
      $xfer += $output->writeI64($this->ytid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pay_type !== null) {
      $xfer += $output->writeFieldBegin('pay_type', TType::I32, 2);
      $xfer += $output->writeI32($this->pay_type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->start_time !== null) {
      $xfer += $output->writeFieldBegin('start_time', TType::I64, 3);
      $xfer += $output->writeI64($this->start_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->end_time !== null) {
      $xfer += $output->writeFieldBegin('end_time', TType::I64, 4);
      $xfer += $output->writeI64($this->end_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->page_no !== null) {
      $xfer += $output->writeFieldBegin('page_no', TType::I32, 5);
      $xfer += $output->writeI32($this->page_no);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->page_size !== null) {
      $xfer += $output->writeFieldBegin('page_size', TType::I32, 6);
      $xfer += $output->writeI32($this->page_size);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientip !== null) {
      $xfer += $output->writeFieldBegin('clientip', TType::STRING, 7);
      $xfer += $output->writeString($this->clientip);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class QueryOrderListRsp {
  static $_TSPEC;

  public $retcode = null;
  public $total = null;
  public $page_no = null;
  public $order_detail_list = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'retcode',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'total',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'page_no',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'order_detail_list',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\xyz\jifensvr\OrderDetail',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['retcode'])) {
        $this->retcode = $vals['retcode'];
      }
      if (isset($vals['total'])) {
        $this->total = $vals['total'];
      }
      if (isset($vals['page_no'])) {
        $this->page_no = $vals['page_no'];
      }
      if (isset($vals['order_detail_list'])) {
        $this->order_detail_list = $vals['order_detail_list'];
      }
    }
  }

  public function getName() {
    return 'QueryOrderListRsp';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->retcode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->total);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->page_no);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::LST) {
            $this->order_detail_list = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readListBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $elem5 = new \xyz\jifensvr\OrderDetail();
              $xfer += $elem5->read($input);
              $this->order_detail_list []= $elem5;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('QueryOrderListRsp');
    if ($this->retcode !== null) {
      $xfer += $output->writeFieldBegin('retcode', TType::I32, 1);
      $xfer += $output->writeI32($this->retcode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->total !== null) {
      $xfer += $output->writeFieldBegin('total', TType::I32, 2);
      $xfer += $output->writeI32($this->total);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->page_no !== null) {
      $xfer += $output->writeFieldBegin('page_no', TType::I32, 3);
      $xfer += $output->writeI32($this->page_no);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->order_detail_list !== null) {
      if (!is_array($this->order_detail_list)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('order_detail_list', TType::LST, 4);
      {
        $output->writeListBegin(TType::STRUCT, count($this->order_detail_list));
        {
          foreach ($this->order_detail_list as $iter6)
          {
            $xfer += $iter6->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ApplyMerchantReq {
  static $_TSPEC;

  public $merchant_name = null;
  public $linkman = null;
  public $mobile = null;
  public $email = null;
  public $applyman = null;
  public $desc = null;
  public $clientip = null;
  public $pubkey = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'merchant_name',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'linkman',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'mobile',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'email',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'applyman',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'desc',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'clientip',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'pubkey',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['merchant_name'])) {
        $this->merchant_name = $vals['merchant_name'];
      }
      if (isset($vals['linkman'])) {
        $this->linkman = $vals['linkman'];
      }
      if (isset($vals['mobile'])) {
        $this->mobile = $vals['mobile'];
      }
      if (isset($vals['email'])) {
        $this->email = $vals['email'];
      }
      if (isset($vals['applyman'])) {
        $this->applyman = $vals['applyman'];
      }
      if (isset($vals['desc'])) {
        $this->desc = $vals['desc'];
      }
      if (isset($vals['clientip'])) {
        $this->clientip = $vals['clientip'];
      }
      if (isset($vals['pubkey'])) {
        $this->pubkey = $vals['pubkey'];
      }
    }
  }

  public function getName() {
    return 'ApplyMerchantReq';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->merchant_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->linkman);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->mobile);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->email);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->applyman);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->desc);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientip);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->pubkey);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ApplyMerchantReq');
    if ($this->merchant_name !== null) {
      $xfer += $output->writeFieldBegin('merchant_name', TType::STRING, 1);
      $xfer += $output->writeString($this->merchant_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->linkman !== null) {
      $xfer += $output->writeFieldBegin('linkman', TType::STRING, 2);
      $xfer += $output->writeString($this->linkman);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->mobile !== null) {
      $xfer += $output->writeFieldBegin('mobile', TType::STRING, 3);
      $xfer += $output->writeString($this->mobile);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->email !== null) {
      $xfer += $output->writeFieldBegin('email', TType::STRING, 4);
      $xfer += $output->writeString($this->email);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->applyman !== null) {
      $xfer += $output->writeFieldBegin('applyman', TType::STRING, 5);
      $xfer += $output->writeString($this->applyman);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->desc !== null) {
      $xfer += $output->writeFieldBegin('desc', TType::STRING, 6);
      $xfer += $output->writeString($this->desc);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientip !== null) {
      $xfer += $output->writeFieldBegin('clientip', TType::STRING, 7);
      $xfer += $output->writeString($this->clientip);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pubkey !== null) {
      $xfer += $output->writeFieldBegin('pubkey', TType::STRING, 8);
      $xfer += $output->writeString($this->pubkey);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ApplyMerchantRsp {
  static $_TSPEC;

  public $retcode = null;
  public $merchantid = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'retcode',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'merchantid',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['retcode'])) {
        $this->retcode = $vals['retcode'];
      }
      if (isset($vals['merchantid'])) {
        $this->merchantid = $vals['merchantid'];
      }
    }
  }

  public function getName() {
    return 'ApplyMerchantRsp';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->retcode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->merchantid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ApplyMerchantRsp');
    if ($this->retcode !== null) {
      $xfer += $output->writeFieldBegin('retcode', TType::I32, 1);
      $xfer += $output->writeI32($this->retcode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->merchantid !== null) {
      $xfer += $output->writeFieldBegin('merchantid', TType::I32, 2);
      $xfer += $output->writeI32($this->merchantid);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ReviewApplyReq {
  static $_TSPEC;

  public $merchantid = null;
  public $reviewman = null;
  public $review_info = null;
  public $review_state = null;
  public $clientip = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'merchantid',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'reviewman',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'review_info',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'review_state',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'clientip',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['merchantid'])) {
        $this->merchantid = $vals['merchantid'];
      }
      if (isset($vals['reviewman'])) {
        $this->reviewman = $vals['reviewman'];
      }
      if (isset($vals['review_info'])) {
        $this->review_info = $vals['review_info'];
      }
      if (isset($vals['review_state'])) {
        $this->review_state = $vals['review_state'];
      }
      if (isset($vals['clientip'])) {
        $this->clientip = $vals['clientip'];
      }
    }
  }

  public function getName() {
    return 'ReviewApplyReq';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->merchantid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->reviewman);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->review_info);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->review_state);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientip);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ReviewApplyReq');
    if ($this->merchantid !== null) {
      $xfer += $output->writeFieldBegin('merchantid', TType::I32, 1);
      $xfer += $output->writeI32($this->merchantid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->reviewman !== null) {
      $xfer += $output->writeFieldBegin('reviewman', TType::STRING, 2);
      $xfer += $output->writeString($this->reviewman);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->review_info !== null) {
      $xfer += $output->writeFieldBegin('review_info', TType::STRING, 3);
      $xfer += $output->writeString($this->review_info);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->review_state !== null) {
      $xfer += $output->writeFieldBegin('review_state', TType::I32, 4);
      $xfer += $output->writeI32($this->review_state);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientip !== null) {
      $xfer += $output->writeFieldBegin('clientip', TType::STRING, 5);
      $xfer += $output->writeString($this->clientip);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ReviewApplyRsp {
  static $_TSPEC;

  public $retcode = null;
  public $merchantid = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'retcode',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'merchantid',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['retcode'])) {
        $this->retcode = $vals['retcode'];
      }
      if (isset($vals['merchantid'])) {
        $this->merchantid = $vals['merchantid'];
      }
    }
  }

  public function getName() {
    return 'ReviewApplyRsp';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->retcode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->merchantid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ReviewApplyRsp');
    if ($this->retcode !== null) {
      $xfer += $output->writeFieldBegin('retcode', TType::I32, 1);
      $xfer += $output->writeI32($this->retcode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->merchantid !== null) {
      $xfer += $output->writeFieldBegin('merchantid', TType::I64, 2);
      $xfer += $output->writeI64($this->merchantid);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class QueryMerchantListReq {
  static $_TSPEC;

  public $merchantid = null;
  public $merchant_name = null;
  public $linkman = null;
  public $mobile = null;
  public $email = null;
  public $applyman = null;
  public $reviewman = null;
  public $pageno = null;
  public $pagesize = null;
  public $state = null;
  public $clientip = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'merchantid',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'merchant_name',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'linkman',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'mobile',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'email',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'applyman',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'reviewman',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'pageno',
          'type' => TType::I32,
          ),
        10 => array(
          'var' => 'pagesize',
          'type' => TType::I32,
          ),
        11 => array(
          'var' => 'state',
          'type' => TType::I32,
          ),
        12 => array(
          'var' => 'clientip',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['merchantid'])) {
        $this->merchantid = $vals['merchantid'];
      }
      if (isset($vals['merchant_name'])) {
        $this->merchant_name = $vals['merchant_name'];
      }
      if (isset($vals['linkman'])) {
        $this->linkman = $vals['linkman'];
      }
      if (isset($vals['mobile'])) {
        $this->mobile = $vals['mobile'];
      }
      if (isset($vals['email'])) {
        $this->email = $vals['email'];
      }
      if (isset($vals['applyman'])) {
        $this->applyman = $vals['applyman'];
      }
      if (isset($vals['reviewman'])) {
        $this->reviewman = $vals['reviewman'];
      }
      if (isset($vals['pageno'])) {
        $this->pageno = $vals['pageno'];
      }
      if (isset($vals['pagesize'])) {
        $this->pagesize = $vals['pagesize'];
      }
      if (isset($vals['state'])) {
        $this->state = $vals['state'];
      }
      if (isset($vals['clientip'])) {
        $this->clientip = $vals['clientip'];
      }
    }
  }

  public function getName() {
    return 'QueryMerchantListReq';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->merchantid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->merchant_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->linkman);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->mobile);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->email);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->applyman);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->reviewman);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->pageno);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->pagesize);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->state);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientip);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('QueryMerchantListReq');
    if ($this->merchantid !== null) {
      $xfer += $output->writeFieldBegin('merchantid', TType::I64, 1);
      $xfer += $output->writeI64($this->merchantid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->merchant_name !== null) {
      $xfer += $output->writeFieldBegin('merchant_name', TType::STRING, 2);
      $xfer += $output->writeString($this->merchant_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->linkman !== null) {
      $xfer += $output->writeFieldBegin('linkman', TType::STRING, 3);
      $xfer += $output->writeString($this->linkman);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->mobile !== null) {
      $xfer += $output->writeFieldBegin('mobile', TType::STRING, 4);
      $xfer += $output->writeString($this->mobile);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->email !== null) {
      $xfer += $output->writeFieldBegin('email', TType::STRING, 5);
      $xfer += $output->writeString($this->email);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->applyman !== null) {
      $xfer += $output->writeFieldBegin('applyman', TType::STRING, 6);
      $xfer += $output->writeString($this->applyman);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->reviewman !== null) {
      $xfer += $output->writeFieldBegin('reviewman', TType::STRING, 8);
      $xfer += $output->writeString($this->reviewman);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pageno !== null) {
      $xfer += $output->writeFieldBegin('pageno', TType::I32, 9);
      $xfer += $output->writeI32($this->pageno);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pagesize !== null) {
      $xfer += $output->writeFieldBegin('pagesize', TType::I32, 10);
      $xfer += $output->writeI32($this->pagesize);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->state !== null) {
      $xfer += $output->writeFieldBegin('state', TType::I32, 11);
      $xfer += $output->writeI32($this->state);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientip !== null) {
      $xfer += $output->writeFieldBegin('clientip', TType::STRING, 12);
      $xfer += $output->writeString($this->clientip);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MerchantInfo {
  static $_TSPEC;

  public $merchantid = null;
  public $merchant_name = null;
  public $linkman = null;
  public $mobile = null;
  public $email = null;
  public $applyman = null;
  public $desc = null;
  public $reviewman = null;
  public $review_info = null;
  public $review_state = null;
  public $apply_time = null;
  public $review_time = null;
  public $pubkey = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'merchantid',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'merchant_name',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'linkman',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'mobile',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'email',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'applyman',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'desc',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'reviewman',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'review_info',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'review_state',
          'type' => TType::I32,
          ),
        11 => array(
          'var' => 'apply_time',
          'type' => TType::I64,
          ),
        12 => array(
          'var' => 'review_time',
          'type' => TType::I64,
          ),
        13 => array(
          'var' => 'pubkey',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['merchantid'])) {
        $this->merchantid = $vals['merchantid'];
      }
      if (isset($vals['merchant_name'])) {
        $this->merchant_name = $vals['merchant_name'];
      }
      if (isset($vals['linkman'])) {
        $this->linkman = $vals['linkman'];
      }
      if (isset($vals['mobile'])) {
        $this->mobile = $vals['mobile'];
      }
      if (isset($vals['email'])) {
        $this->email = $vals['email'];
      }
      if (isset($vals['applyman'])) {
        $this->applyman = $vals['applyman'];
      }
      if (isset($vals['desc'])) {
        $this->desc = $vals['desc'];
      }
      if (isset($vals['reviewman'])) {
        $this->reviewman = $vals['reviewman'];
      }
      if (isset($vals['review_info'])) {
        $this->review_info = $vals['review_info'];
      }
      if (isset($vals['review_state'])) {
        $this->review_state = $vals['review_state'];
      }
      if (isset($vals['apply_time'])) {
        $this->apply_time = $vals['apply_time'];
      }
      if (isset($vals['review_time'])) {
        $this->review_time = $vals['review_time'];
      }
      if (isset($vals['pubkey'])) {
        $this->pubkey = $vals['pubkey'];
      }
    }
  }

  public function getName() {
    return 'MerchantInfo';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->merchantid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->merchant_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->linkman);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->mobile);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->email);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->applyman);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->desc);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->reviewman);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->review_info);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->review_state);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->apply_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->review_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->pubkey);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MerchantInfo');
    if ($this->merchantid !== null) {
      $xfer += $output->writeFieldBegin('merchantid', TType::I64, 1);
      $xfer += $output->writeI64($this->merchantid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->merchant_name !== null) {
      $xfer += $output->writeFieldBegin('merchant_name', TType::STRING, 2);
      $xfer += $output->writeString($this->merchant_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->linkman !== null) {
      $xfer += $output->writeFieldBegin('linkman', TType::STRING, 3);
      $xfer += $output->writeString($this->linkman);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->mobile !== null) {
      $xfer += $output->writeFieldBegin('mobile', TType::STRING, 4);
      $xfer += $output->writeString($this->mobile);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->email !== null) {
      $xfer += $output->writeFieldBegin('email', TType::STRING, 5);
      $xfer += $output->writeString($this->email);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->applyman !== null) {
      $xfer += $output->writeFieldBegin('applyman', TType::STRING, 6);
      $xfer += $output->writeString($this->applyman);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->desc !== null) {
      $xfer += $output->writeFieldBegin('desc', TType::STRING, 7);
      $xfer += $output->writeString($this->desc);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->reviewman !== null) {
      $xfer += $output->writeFieldBegin('reviewman', TType::STRING, 8);
      $xfer += $output->writeString($this->reviewman);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->review_info !== null) {
      $xfer += $output->writeFieldBegin('review_info', TType::STRING, 9);
      $xfer += $output->writeString($this->review_info);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->review_state !== null) {
      $xfer += $output->writeFieldBegin('review_state', TType::I32, 10);
      $xfer += $output->writeI32($this->review_state);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->apply_time !== null) {
      $xfer += $output->writeFieldBegin('apply_time', TType::I64, 11);
      $xfer += $output->writeI64($this->apply_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->review_time !== null) {
      $xfer += $output->writeFieldBegin('review_time', TType::I64, 12);
      $xfer += $output->writeI64($this->review_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pubkey !== null) {
      $xfer += $output->writeFieldBegin('pubkey', TType::STRING, 13);
      $xfer += $output->writeString($this->pubkey);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class QueryMerchantListRsp {
  static $_TSPEC;

  public $retcode = null;
  public $total = null;
  public $merchant_list = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'retcode',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'total',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'merchant_list',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\xyz\jifensvr\MerchantInfo',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['retcode'])) {
        $this->retcode = $vals['retcode'];
      }
      if (isset($vals['total'])) {
        $this->total = $vals['total'];
      }
      if (isset($vals['merchant_list'])) {
        $this->merchant_list = $vals['merchant_list'];
      }
    }
  }

  public function getName() {
    return 'QueryMerchantListRsp';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->retcode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->total);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->merchant_list = array();
            $_size7 = 0;
            $_etype10 = 0;
            $xfer += $input->readListBegin($_etype10, $_size7);
            for ($_i11 = 0; $_i11 < $_size7; ++$_i11)
            {
              $elem12 = null;
              $elem12 = new \xyz\jifensvr\MerchantInfo();
              $xfer += $elem12->read($input);
              $this->merchant_list []= $elem12;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('QueryMerchantListRsp');
    if ($this->retcode !== null) {
      $xfer += $output->writeFieldBegin('retcode', TType::I32, 1);
      $xfer += $output->writeI32($this->retcode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->total !== null) {
      $xfer += $output->writeFieldBegin('total', TType::I32, 2);
      $xfer += $output->writeI32($this->total);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->merchant_list !== null) {
      if (!is_array($this->merchant_list)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('merchant_list', TType::LST, 3);
      {
        $output->writeListBegin(TType::STRUCT, count($this->merchant_list));
        {
          foreach ($this->merchant_list as $iter13)
          {
            $xfer += $iter13->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ModifyMerchantReq {
  static $_TSPEC;

  public $merchantid = null;
  public $merchant_name = null;
  public $linkman = null;
  public $mobile = null;
  public $email = null;
  public $applyman = null;
  public $desc = null;
  public $clientip = null;
  public $pubkey = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'merchantid',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'merchant_name',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'linkman',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'mobile',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'email',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'applyman',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'desc',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'clientip',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'pubkey',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['merchantid'])) {
        $this->merchantid = $vals['merchantid'];
      }
      if (isset($vals['merchant_name'])) {
        $this->merchant_name = $vals['merchant_name'];
      }
      if (isset($vals['linkman'])) {
        $this->linkman = $vals['linkman'];
      }
      if (isset($vals['mobile'])) {
        $this->mobile = $vals['mobile'];
      }
      if (isset($vals['email'])) {
        $this->email = $vals['email'];
      }
      if (isset($vals['applyman'])) {
        $this->applyman = $vals['applyman'];
      }
      if (isset($vals['desc'])) {
        $this->desc = $vals['desc'];
      }
      if (isset($vals['clientip'])) {
        $this->clientip = $vals['clientip'];
      }
      if (isset($vals['pubkey'])) {
        $this->pubkey = $vals['pubkey'];
      }
    }
  }

  public function getName() {
    return 'ModifyMerchantReq';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->merchantid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->merchant_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->linkman);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->mobile);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->email);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->applyman);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->desc);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientip);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->pubkey);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ModifyMerchantReq');
    if ($this->merchantid !== null) {
      $xfer += $output->writeFieldBegin('merchantid', TType::I64, 1);
      $xfer += $output->writeI64($this->merchantid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->merchant_name !== null) {
      $xfer += $output->writeFieldBegin('merchant_name', TType::STRING, 2);
      $xfer += $output->writeString($this->merchant_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->linkman !== null) {
      $xfer += $output->writeFieldBegin('linkman', TType::STRING, 3);
      $xfer += $output->writeString($this->linkman);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->mobile !== null) {
      $xfer += $output->writeFieldBegin('mobile', TType::STRING, 4);
      $xfer += $output->writeString($this->mobile);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->email !== null) {
      $xfer += $output->writeFieldBegin('email', TType::STRING, 5);
      $xfer += $output->writeString($this->email);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->applyman !== null) {
      $xfer += $output->writeFieldBegin('applyman', TType::STRING, 6);
      $xfer += $output->writeString($this->applyman);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->desc !== null) {
      $xfer += $output->writeFieldBegin('desc', TType::STRING, 7);
      $xfer += $output->writeString($this->desc);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientip !== null) {
      $xfer += $output->writeFieldBegin('clientip', TType::STRING, 8);
      $xfer += $output->writeString($this->clientip);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pubkey !== null) {
      $xfer += $output->writeFieldBegin('pubkey', TType::STRING, 9);
      $xfer += $output->writeString($this->pubkey);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ApplyPointReq {
  static $_TSPEC;

  public $merchantid = null;
  public $amount = null;
  public $applyman = null;
  public $desc = null;
  public $clientip = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'merchantid',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'amount',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'applyman',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'desc',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'clientip',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['merchantid'])) {
        $this->merchantid = $vals['merchantid'];
      }
      if (isset($vals['amount'])) {
        $this->amount = $vals['amount'];
      }
      if (isset($vals['applyman'])) {
        $this->applyman = $vals['applyman'];
      }
      if (isset($vals['desc'])) {
        $this->desc = $vals['desc'];
      }
      if (isset($vals['clientip'])) {
        $this->clientip = $vals['clientip'];
      }
    }
  }

  public function getName() {
    return 'ApplyPointReq';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->merchantid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->amount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->applyman);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->desc);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientip);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ApplyPointReq');
    if ($this->merchantid !== null) {
      $xfer += $output->writeFieldBegin('merchantid', TType::I64, 1);
      $xfer += $output->writeI64($this->merchantid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->amount !== null) {
      $xfer += $output->writeFieldBegin('amount', TType::I32, 2);
      $xfer += $output->writeI32($this->amount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->applyman !== null) {
      $xfer += $output->writeFieldBegin('applyman', TType::STRING, 3);
      $xfer += $output->writeString($this->applyman);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->desc !== null) {
      $xfer += $output->writeFieldBegin('desc', TType::STRING, 4);
      $xfer += $output->writeString($this->desc);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientip !== null) {
      $xfer += $output->writeFieldBegin('clientip', TType::STRING, 5);
      $xfer += $output->writeString($this->clientip);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ApplyPointRsp {
  static $_TSPEC;

  public $retcode = null;
  public $applyid = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'retcode',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'applyid',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['retcode'])) {
        $this->retcode = $vals['retcode'];
      }
      if (isset($vals['applyid'])) {
        $this->applyid = $vals['applyid'];
      }
    }
  }

  public function getName() {
    return 'ApplyPointRsp';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->retcode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->applyid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ApplyPointRsp');
    if ($this->retcode !== null) {
      $xfer += $output->writeFieldBegin('retcode', TType::I32, 1);
      $xfer += $output->writeI32($this->retcode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->applyid !== null) {
      $xfer += $output->writeFieldBegin('applyid', TType::I32, 2);
      $xfer += $output->writeI32($this->applyid);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ReviewAppluPointReq {
  static $_TSPEC;

  public $applyid = null;
  public $reviewman = null;
  public $review_info = null;
  public $review_state = null;
  public $clientip = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'applyid',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'reviewman',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'review_info',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'review_state',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'clientip',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['applyid'])) {
        $this->applyid = $vals['applyid'];
      }
      if (isset($vals['reviewman'])) {
        $this->reviewman = $vals['reviewman'];
      }
      if (isset($vals['review_info'])) {
        $this->review_info = $vals['review_info'];
      }
      if (isset($vals['review_state'])) {
        $this->review_state = $vals['review_state'];
      }
      if (isset($vals['clientip'])) {
        $this->clientip = $vals['clientip'];
      }
    }
  }

  public function getName() {
    return 'ReviewAppluPointReq';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->applyid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->reviewman);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->review_info);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->review_state);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientip);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ReviewAppluPointReq');
    if ($this->applyid !== null) {
      $xfer += $output->writeFieldBegin('applyid', TType::I32, 1);
      $xfer += $output->writeI32($this->applyid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->reviewman !== null) {
      $xfer += $output->writeFieldBegin('reviewman', TType::STRING, 2);
      $xfer += $output->writeString($this->reviewman);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->review_info !== null) {
      $xfer += $output->writeFieldBegin('review_info', TType::STRING, 3);
      $xfer += $output->writeString($this->review_info);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->review_state !== null) {
      $xfer += $output->writeFieldBegin('review_state', TType::I32, 4);
      $xfer += $output->writeI32($this->review_state);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientip !== null) {
      $xfer += $output->writeFieldBegin('clientip', TType::STRING, 5);
      $xfer += $output->writeString($this->clientip);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ReviewAppluPointRsp {
  static $_TSPEC;

  public $retcode = null;
  public $orderid = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'retcode',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'orderid',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['retcode'])) {
        $this->retcode = $vals['retcode'];
      }
      if (isset($vals['orderid'])) {
        $this->orderid = $vals['orderid'];
      }
    }
  }

  public function getName() {
    return 'ReviewAppluPointRsp';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->retcode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->orderid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ReviewAppluPointRsp');
    if ($this->retcode !== null) {
      $xfer += $output->writeFieldBegin('retcode', TType::I32, 1);
      $xfer += $output->writeI32($this->retcode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->orderid !== null) {
      $xfer += $output->writeFieldBegin('orderid', TType::I64, 2);
      $xfer += $output->writeI64($this->orderid);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class QueryApplyPointListReq {
  static $_TSPEC;

  public $pageno = null;
  public $pagesize = null;
  public $state = null;
  public $clientip = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'pageno',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'pagesize',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'state',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'clientip',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['pageno'])) {
        $this->pageno = $vals['pageno'];
      }
      if (isset($vals['pagesize'])) {
        $this->pagesize = $vals['pagesize'];
      }
      if (isset($vals['state'])) {
        $this->state = $vals['state'];
      }
      if (isset($vals['clientip'])) {
        $this->clientip = $vals['clientip'];
      }
    }
  }

  public function getName() {
    return 'QueryApplyPointListReq';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->pageno);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->pagesize);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->state);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientip);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('QueryApplyPointListReq');
    if ($this->pageno !== null) {
      $xfer += $output->writeFieldBegin('pageno', TType::I32, 1);
      $xfer += $output->writeI32($this->pageno);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pagesize !== null) {
      $xfer += $output->writeFieldBegin('pagesize', TType::I32, 2);
      $xfer += $output->writeI32($this->pagesize);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->state !== null) {
      $xfer += $output->writeFieldBegin('state', TType::I32, 3);
      $xfer += $output->writeI32($this->state);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientip !== null) {
      $xfer += $output->writeFieldBegin('clientip', TType::STRING, 4);
      $xfer += $output->writeString($this->clientip);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ApplyPointInfo {
  static $_TSPEC;

  public $applyid = null;
  public $orderid = null;
  public $merchantid = null;
  public $amount = null;
  public $applyman = null;
  public $desc = null;
  public $reviewman = null;
  public $review_info = null;
  public $review_state = null;
  public $apply_time = null;
  public $review_time = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'applyid',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'orderid',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'merchantid',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'amount',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'applyman',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'desc',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'reviewman',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'review_info',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'review_state',
          'type' => TType::I32,
          ),
        10 => array(
          'var' => 'apply_time',
          'type' => TType::I64,
          ),
        11 => array(
          'var' => 'review_time',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['applyid'])) {
        $this->applyid = $vals['applyid'];
      }
      if (isset($vals['orderid'])) {
        $this->orderid = $vals['orderid'];
      }
      if (isset($vals['merchantid'])) {
        $this->merchantid = $vals['merchantid'];
      }
      if (isset($vals['amount'])) {
        $this->amount = $vals['amount'];
      }
      if (isset($vals['applyman'])) {
        $this->applyman = $vals['applyman'];
      }
      if (isset($vals['desc'])) {
        $this->desc = $vals['desc'];
      }
      if (isset($vals['reviewman'])) {
        $this->reviewman = $vals['reviewman'];
      }
      if (isset($vals['review_info'])) {
        $this->review_info = $vals['review_info'];
      }
      if (isset($vals['review_state'])) {
        $this->review_state = $vals['review_state'];
      }
      if (isset($vals['apply_time'])) {
        $this->apply_time = $vals['apply_time'];
      }
      if (isset($vals['review_time'])) {
        $this->review_time = $vals['review_time'];
      }
    }
  }

  public function getName() {
    return 'ApplyPointInfo';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->applyid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->orderid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->merchantid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->amount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->applyman);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->desc);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->reviewman);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->review_info);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->review_state);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->apply_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->review_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ApplyPointInfo');
    if ($this->applyid !== null) {
      $xfer += $output->writeFieldBegin('applyid', TType::I32, 1);
      $xfer += $output->writeI32($this->applyid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->orderid !== null) {
      $xfer += $output->writeFieldBegin('orderid', TType::I64, 2);
      $xfer += $output->writeI64($this->orderid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->merchantid !== null) {
      $xfer += $output->writeFieldBegin('merchantid', TType::I64, 3);
      $xfer += $output->writeI64($this->merchantid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->amount !== null) {
      $xfer += $output->writeFieldBegin('amount', TType::I32, 4);
      $xfer += $output->writeI32($this->amount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->applyman !== null) {
      $xfer += $output->writeFieldBegin('applyman', TType::STRING, 5);
      $xfer += $output->writeString($this->applyman);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->desc !== null) {
      $xfer += $output->writeFieldBegin('desc', TType::STRING, 6);
      $xfer += $output->writeString($this->desc);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->reviewman !== null) {
      $xfer += $output->writeFieldBegin('reviewman', TType::STRING, 7);
      $xfer += $output->writeString($this->reviewman);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->review_info !== null) {
      $xfer += $output->writeFieldBegin('review_info', TType::STRING, 8);
      $xfer += $output->writeString($this->review_info);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->review_state !== null) {
      $xfer += $output->writeFieldBegin('review_state', TType::I32, 9);
      $xfer += $output->writeI32($this->review_state);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->apply_time !== null) {
      $xfer += $output->writeFieldBegin('apply_time', TType::I64, 10);
      $xfer += $output->writeI64($this->apply_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->review_time !== null) {
      $xfer += $output->writeFieldBegin('review_time', TType::I64, 11);
      $xfer += $output->writeI64($this->review_time);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class QueryApplyPointListRsp {
  static $_TSPEC;

  public $retcode = null;
  public $total = null;
  public $apply_info_list = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'retcode',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'total',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'apply_info_list',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\xyz\jifensvr\ApplyPointInfo',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['retcode'])) {
        $this->retcode = $vals['retcode'];
      }
      if (isset($vals['total'])) {
        $this->total = $vals['total'];
      }
      if (isset($vals['apply_info_list'])) {
        $this->apply_info_list = $vals['apply_info_list'];
      }
    }
  }

  public function getName() {
    return 'QueryApplyPointListRsp';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->retcode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->total);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->apply_info_list = array();
            $_size14 = 0;
            $_etype17 = 0;
            $xfer += $input->readListBegin($_etype17, $_size14);
            for ($_i18 = 0; $_i18 < $_size14; ++$_i18)
            {
              $elem19 = null;
              $elem19 = new \xyz\jifensvr\ApplyPointInfo();
              $xfer += $elem19->read($input);
              $this->apply_info_list []= $elem19;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('QueryApplyPointListRsp');
    if ($this->retcode !== null) {
      $xfer += $output->writeFieldBegin('retcode', TType::I32, 1);
      $xfer += $output->writeI32($this->retcode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->total !== null) {
      $xfer += $output->writeFieldBegin('total', TType::I32, 2);
      $xfer += $output->writeI32($this->total);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->apply_info_list !== null) {
      if (!is_array($this->apply_info_list)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('apply_info_list', TType::LST, 3);
      {
        $output->writeListBegin(TType::STRUCT, count($this->apply_info_list));
        {
          foreach ($this->apply_info_list as $iter20)
          {
            $xfer += $iter20->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


