<?php
namespace xyz\mallsvr;

/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


final class MallSvrErrorCode {
  const ERR_SVR_MALL_BEGIN = -400020001;
  const ERR_SVR_MALL_MYSQL_GET = -400020002;
  const ERR_SVR_MALL_MYSQL_SET = -400020003;
  const ERR_SVR_MALL_MYSQL_REPEAT = -400020004;
  const ERR_SVR_MALL_REDIS_GET = -400020005;
  const ERR_SVR_MALL_REDIS_SET = -400020006;
  const ERR_SVR_MALL_JSON_READ = -400020007;
  const ERR_SVR_MALL_JSON_WRITE = -400020008;
  const ERR_SVR_MALL_GET_GOODSINFO = -400020009;
  const ERR_SVR_MALL_GET_GOODS = -400020010;
  const ERR_SVR_MALL_GET_ID = -400020011;
  const ERR_SVR_MALL_NO_ORDER = -400020012;
  const ERR_SVR_MALL_POINT_LACK = -400020013;
  const ERR_SVR_MALL_GOODS_LACK = -400020014;
  const ERR_SVR_MALL_JIFEN_SVR = -400020015;
  const ERR_SVR_MALL_GOODS_SVR = -400020016;
  const ERR_SVR_MALL_PRICE = -400020017;
  const ERR_SVR_MALL_GOODS_NOTEXIST = -400020018;
  const ERR_SVR_MALL_FRQ_1_DAY = -400020019;
  const ERR_SVR_MALL_FRQ_7_DAY = -400020020;
  const ERR_SVR_MALL_FRQ_1_MONTH = -400020021;
  const ERR_SVR_MALL_LIMIT_1_DAY = -400020022;
  const ERR_SVR_MALL_LIMIT_7_DAY = -400020023;
  const ERR_SVR_MALL_LIMIT_1_MONTH = -400020024;
  const ERR_SVR_MALL_LIMIT_RECVINFO = -400020025;
  const ERR_SVR_MALL_APPLYID_EXIST = -400020026;
  const ERR_SVR_MALL_JIFEN_LIMIT = -400020027;
  const ERR_SVR_MALL_GUESS_ERROR = -400020028;
  const ERR_SVR_MALL_GUESS_LIMIT = -400020029;
  const ERR_SVR_MALL_LOTTERY_FAILED = -400020030;
  const ERR_SVR_MALL_LOTTERY_LIMIT = -400020031;
  const ERR_SVR_MALL_RECEIVER_NOTEXIST = -400020032;
  const ERR_SVR_MALL_AUCTION_FAILED = -400020033;
  const ERR_SVR_MALL_PROMO_UNSTART = -400020034;
  const ERR_SVR_MALL_PROMO_OVER = -400020035;
  const ERR_SVR_MALL_END = -400030000;
  static public $__names = array(
    -400020001 => 'ERR_SVR_MALL_BEGIN',
    -400020002 => 'ERR_SVR_MALL_MYSQL_GET',
    -400020003 => 'ERR_SVR_MALL_MYSQL_SET',
    -400020004 => 'ERR_SVR_MALL_MYSQL_REPEAT',
    -400020005 => 'ERR_SVR_MALL_REDIS_GET',
    -400020006 => 'ERR_SVR_MALL_REDIS_SET',
    -400020007 => 'ERR_SVR_MALL_JSON_READ',
    -400020008 => 'ERR_SVR_MALL_JSON_WRITE',
    -400020009 => 'ERR_SVR_MALL_GET_GOODSINFO',
    -400020010 => 'ERR_SVR_MALL_GET_GOODS',
    -400020011 => 'ERR_SVR_MALL_GET_ID',
    -400020012 => 'ERR_SVR_MALL_NO_ORDER',
    -400020013 => 'ERR_SVR_MALL_POINT_LACK',
    -400020014 => 'ERR_SVR_MALL_GOODS_LACK',
    -400020015 => 'ERR_SVR_MALL_JIFEN_SVR',
    -400020016 => 'ERR_SVR_MALL_GOODS_SVR',
    -400020017 => 'ERR_SVR_MALL_PRICE',
    -400020018 => 'ERR_SVR_MALL_GOODS_NOTEXIST',
    -400020019 => 'ERR_SVR_MALL_FRQ_1_DAY',
    -400020020 => 'ERR_SVR_MALL_FRQ_7_DAY',
    -400020021 => 'ERR_SVR_MALL_FRQ_1_MONTH',
    -400020022 => 'ERR_SVR_MALL_LIMIT_1_DAY',
    -400020023 => 'ERR_SVR_MALL_LIMIT_7_DAY',
    -400020024 => 'ERR_SVR_MALL_LIMIT_1_MONTH',
    -400020025 => 'ERR_SVR_MALL_LIMIT_RECVINFO',
    -400020026 => 'ERR_SVR_MALL_APPLYID_EXIST',
    -400020027 => 'ERR_SVR_MALL_JIFEN_LIMIT',
    -400020028 => 'ERR_SVR_MALL_GUESS_ERROR',
    -400020029 => 'ERR_SVR_MALL_GUESS_LIMIT',
    -400020030 => 'ERR_SVR_MALL_LOTTERY_FAILED',
    -400020031 => 'ERR_SVR_MALL_LOTTERY_LIMIT',
    -400020032 => 'ERR_SVR_MALL_RECEIVER_NOTEXIST',
    -400020033 => 'ERR_SVR_MALL_AUCTION_FAILED',
    -400020034 => 'ERR_SVR_MALL_PROMO_UNSTART',
    -400020035 => 'ERR_SVR_MALL_PROMO_OVER',
    -400030000 => 'ERR_SVR_MALL_END',
  );
}

class RegPartnerReq {
  static $_TSPEC;

  public $jifen_merchantid = null;
  public $jifen_pubkey = null;
  public $jifen_sign_type = null;
  public $goods_applyid = null;
  public $goods_pubkey = null;
  public $goods_sign_type = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'jifen_merchantid',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'jifen_pubkey',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'jifen_sign_type',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'goods_applyid',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'goods_pubkey',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'goods_sign_type',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['jifen_merchantid'])) {
        $this->jifen_merchantid = $vals['jifen_merchantid'];
      }
      if (isset($vals['jifen_pubkey'])) {
        $this->jifen_pubkey = $vals['jifen_pubkey'];
      }
      if (isset($vals['jifen_sign_type'])) {
        $this->jifen_sign_type = $vals['jifen_sign_type'];
      }
      if (isset($vals['goods_applyid'])) {
        $this->goods_applyid = $vals['goods_applyid'];
      }
      if (isset($vals['goods_pubkey'])) {
        $this->goods_pubkey = $vals['goods_pubkey'];
      }
      if (isset($vals['goods_sign_type'])) {
        $this->goods_sign_type = $vals['goods_sign_type'];
      }
    }
  }

  public function getName() {
    return 'RegPartnerReq';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->jifen_merchantid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->jifen_pubkey);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->jifen_sign_type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->goods_applyid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->goods_pubkey);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->goods_sign_type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('RegPartnerReq');
    if ($this->jifen_merchantid !== null) {
      $xfer += $output->writeFieldBegin('jifen_merchantid', TType::I64, 1);
      $xfer += $output->writeI64($this->jifen_merchantid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->jifen_pubkey !== null) {
      $xfer += $output->writeFieldBegin('jifen_pubkey', TType::STRING, 2);
      $xfer += $output->writeString($this->jifen_pubkey);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->jifen_sign_type !== null) {
      $xfer += $output->writeFieldBegin('jifen_sign_type', TType::STRING, 3);
      $xfer += $output->writeString($this->jifen_sign_type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->goods_applyid !== null) {
      $xfer += $output->writeFieldBegin('goods_applyid', TType::I64, 4);
      $xfer += $output->writeI64($this->goods_applyid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->goods_pubkey !== null) {
      $xfer += $output->writeFieldBegin('goods_pubkey', TType::STRING, 5);
      $xfer += $output->writeString($this->goods_pubkey);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->goods_sign_type !== null) {
      $xfer += $output->writeFieldBegin('goods_sign_type', TType::STRING, 6);
      $xfer += $output->writeString($this->goods_sign_type);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class RegPartnerRsp {
  static $_TSPEC;

  public $retcode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'retcode',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['retcode'])) {
        $this->retcode = $vals['retcode'];
      }
    }
  }

  public function getName() {
    return 'RegPartnerRsp';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->retcode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('RegPartnerRsp');
    if ($this->retcode !== null) {
      $xfer += $output->writeFieldBegin('retcode', TType::I32, 1);
      $xfer += $output->writeI32($this->retcode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TradeReq {
  static $_TSPEC;

  public $jifen_merchantid = null;
  public $goods_applyid = null;
  public $group = null;
  public $buyer_id = null;
  public $product_id = null;
  public $product_name = null;
  public $product_num = null;
  public $amount = null;
  public $desc = null;
  public $from_service = null;
  public $platform = null;
  public $clientip = null;
  public $receiver_info = null;
  public $receiver_info_id = null;
  public $ext_info = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'jifen_merchantid',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'goods_applyid',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'group',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'buyer_id',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'product_id',
          'type' => TType::I64,
          ),
        6 => array(
          'var' => 'product_name',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'product_num',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'amount',
          'type' => TType::I32,
          ),
        9 => array(
          'var' => 'desc',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'from_service',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'platform',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'clientip',
          'type' => TType::STRING,
          ),
        13 => array(
          'var' => 'receiver_info',
          'type' => TType::STRING,
          ),
        14 => array(
          'var' => 'receiver_info_id',
          'type' => TType::I64,
          ),
        15 => array(
          'var' => 'ext_info',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['jifen_merchantid'])) {
        $this->jifen_merchantid = $vals['jifen_merchantid'];
      }
      if (isset($vals['goods_applyid'])) {
        $this->goods_applyid = $vals['goods_applyid'];
      }
      if (isset($vals['group'])) {
        $this->group = $vals['group'];
      }
      if (isset($vals['buyer_id'])) {
        $this->buyer_id = $vals['buyer_id'];
      }
      if (isset($vals['product_id'])) {
        $this->product_id = $vals['product_id'];
      }
      if (isset($vals['product_name'])) {
        $this->product_name = $vals['product_name'];
      }
      if (isset($vals['product_num'])) {
        $this->product_num = $vals['product_num'];
      }
      if (isset($vals['amount'])) {
        $this->amount = $vals['amount'];
      }
      if (isset($vals['desc'])) {
        $this->desc = $vals['desc'];
      }
      if (isset($vals['from_service'])) {
        $this->from_service = $vals['from_service'];
      }
      if (isset($vals['platform'])) {
        $this->platform = $vals['platform'];
      }
      if (isset($vals['clientip'])) {
        $this->clientip = $vals['clientip'];
      }
      if (isset($vals['receiver_info'])) {
        $this->receiver_info = $vals['receiver_info'];
      }
      if (isset($vals['receiver_info_id'])) {
        $this->receiver_info_id = $vals['receiver_info_id'];
      }
      if (isset($vals['ext_info'])) {
        $this->ext_info = $vals['ext_info'];
      }
    }
  }

  public function getName() {
    return 'TradeReq';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->jifen_merchantid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->goods_applyid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->group);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->buyer_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->product_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->product_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->product_num);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->amount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->desc);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->from_service);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->platform);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientip);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->receiver_info);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->receiver_info_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ext_info);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TradeReq');
    if ($this->jifen_merchantid !== null) {
      $xfer += $output->writeFieldBegin('jifen_merchantid', TType::I64, 1);
      $xfer += $output->writeI64($this->jifen_merchantid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->goods_applyid !== null) {
      $xfer += $output->writeFieldBegin('goods_applyid', TType::I64, 2);
      $xfer += $output->writeI64($this->goods_applyid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->group !== null) {
      $xfer += $output->writeFieldBegin('group', TType::I64, 3);
      $xfer += $output->writeI64($this->group);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->buyer_id !== null) {
      $xfer += $output->writeFieldBegin('buyer_id', TType::I64, 4);
      $xfer += $output->writeI64($this->buyer_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->product_id !== null) {
      $xfer += $output->writeFieldBegin('product_id', TType::I64, 5);
      $xfer += $output->writeI64($this->product_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->product_name !== null) {
      $xfer += $output->writeFieldBegin('product_name', TType::STRING, 6);
      $xfer += $output->writeString($this->product_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->product_num !== null) {
      $xfer += $output->writeFieldBegin('product_num', TType::I32, 7);
      $xfer += $output->writeI32($this->product_num);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->amount !== null) {
      $xfer += $output->writeFieldBegin('amount', TType::I32, 8);
      $xfer += $output->writeI32($this->amount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->desc !== null) {
      $xfer += $output->writeFieldBegin('desc', TType::STRING, 9);
      $xfer += $output->writeString($this->desc);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->from_service !== null) {
      $xfer += $output->writeFieldBegin('from_service', TType::STRING, 10);
      $xfer += $output->writeString($this->from_service);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->platform !== null) {
      $xfer += $output->writeFieldBegin('platform', TType::STRING, 11);
      $xfer += $output->writeString($this->platform);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientip !== null) {
      $xfer += $output->writeFieldBegin('clientip', TType::STRING, 12);
      $xfer += $output->writeString($this->clientip);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->receiver_info !== null) {
      $xfer += $output->writeFieldBegin('receiver_info', TType::STRING, 13);
      $xfer += $output->writeString($this->receiver_info);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->receiver_info_id !== null) {
      $xfer += $output->writeFieldBegin('receiver_info_id', TType::I64, 14);
      $xfer += $output->writeI64($this->receiver_info_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ext_info !== null) {
      $xfer += $output->writeFieldBegin('ext_info', TType::STRING, 15);
      $xfer += $output->writeString($this->ext_info);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TradeRsp {
  static $_TSPEC;

  public $retcode = null;
  public $orderid = null;
  public $info = null;
  public $goods_applyid = null;
  public $balance = null;
  public $goods_left = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'retcode',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'orderid',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'info',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'goods_applyid',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'balance',
          'type' => TType::I64,
          ),
        6 => array(
          'var' => 'goods_left',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['retcode'])) {
        $this->retcode = $vals['retcode'];
      }
      if (isset($vals['orderid'])) {
        $this->orderid = $vals['orderid'];
      }
      if (isset($vals['info'])) {
        $this->info = $vals['info'];
      }
      if (isset($vals['goods_applyid'])) {
        $this->goods_applyid = $vals['goods_applyid'];
      }
      if (isset($vals['balance'])) {
        $this->balance = $vals['balance'];
      }
      if (isset($vals['goods_left'])) {
        $this->goods_left = $vals['goods_left'];
      }
    }
  }

  public function getName() {
    return 'TradeRsp';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->retcode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->orderid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->info);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->goods_applyid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->balance);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->goods_left);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TradeRsp');
    if ($this->retcode !== null) {
      $xfer += $output->writeFieldBegin('retcode', TType::I32, 1);
      $xfer += $output->writeI32($this->retcode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->orderid !== null) {
      $xfer += $output->writeFieldBegin('orderid', TType::I64, 2);
      $xfer += $output->writeI64($this->orderid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->info !== null) {
      $xfer += $output->writeFieldBegin('info', TType::STRING, 3);
      $xfer += $output->writeString($this->info);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->goods_applyid !== null) {
      $xfer += $output->writeFieldBegin('goods_applyid', TType::I64, 4);
      $xfer += $output->writeI64($this->goods_applyid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->balance !== null) {
      $xfer += $output->writeFieldBegin('balance', TType::I64, 5);
      $xfer += $output->writeI64($this->balance);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->goods_left !== null) {
      $xfer += $output->writeFieldBegin('goods_left', TType::I64, 6);
      $xfer += $output->writeI64($this->goods_left);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GoodsLotteryReq {
  static $_TSPEC;

  public $goods_applyid = null;
  public $group = null;
  public $buyer_id = null;
  public $amount = null;
  public $desc = null;
  public $from_service = null;
  public $platform = null;
  public $clientip = null;
  public $product_name = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'goods_applyid',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'group',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'buyer_id',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'amount',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'desc',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'from_service',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'platform',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'clientip',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'product_name',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['goods_applyid'])) {
        $this->goods_applyid = $vals['goods_applyid'];
      }
      if (isset($vals['group'])) {
        $this->group = $vals['group'];
      }
      if (isset($vals['buyer_id'])) {
        $this->buyer_id = $vals['buyer_id'];
      }
      if (isset($vals['amount'])) {
        $this->amount = $vals['amount'];
      }
      if (isset($vals['desc'])) {
        $this->desc = $vals['desc'];
      }
      if (isset($vals['from_service'])) {
        $this->from_service = $vals['from_service'];
      }
      if (isset($vals['platform'])) {
        $this->platform = $vals['platform'];
      }
      if (isset($vals['clientip'])) {
        $this->clientip = $vals['clientip'];
      }
      if (isset($vals['product_name'])) {
        $this->product_name = $vals['product_name'];
      }
    }
  }

  public function getName() {
    return 'GoodsLotteryReq';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->goods_applyid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->group);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->buyer_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->amount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->desc);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->from_service);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->platform);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientip);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->product_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GoodsLotteryReq');
    if ($this->goods_applyid !== null) {
      $xfer += $output->writeFieldBegin('goods_applyid', TType::I64, 1);
      $xfer += $output->writeI64($this->goods_applyid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->group !== null) {
      $xfer += $output->writeFieldBegin('group', TType::I64, 2);
      $xfer += $output->writeI64($this->group);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->buyer_id !== null) {
      $xfer += $output->writeFieldBegin('buyer_id', TType::I64, 3);
      $xfer += $output->writeI64($this->buyer_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->amount !== null) {
      $xfer += $output->writeFieldBegin('amount', TType::I32, 4);
      $xfer += $output->writeI32($this->amount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->desc !== null) {
      $xfer += $output->writeFieldBegin('desc', TType::STRING, 5);
      $xfer += $output->writeString($this->desc);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->from_service !== null) {
      $xfer += $output->writeFieldBegin('from_service', TType::STRING, 6);
      $xfer += $output->writeString($this->from_service);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->platform !== null) {
      $xfer += $output->writeFieldBegin('platform', TType::STRING, 7);
      $xfer += $output->writeString($this->platform);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientip !== null) {
      $xfer += $output->writeFieldBegin('clientip', TType::STRING, 8);
      $xfer += $output->writeString($this->clientip);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->product_name !== null) {
      $xfer += $output->writeFieldBegin('product_name', TType::STRING, 9);
      $xfer += $output->writeString($this->product_name);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GoodsLotteryRsp {
  static $_TSPEC;

  public $retcode = null;
  public $balance = null;
  public $amount = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'retcode',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'balance',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'amount',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['retcode'])) {
        $this->retcode = $vals['retcode'];
      }
      if (isset($vals['balance'])) {
        $this->balance = $vals['balance'];
      }
      if (isset($vals['amount'])) {
        $this->amount = $vals['amount'];
      }
    }
  }

  public function getName() {
    return 'GoodsLotteryRsp';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->retcode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->balance);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->amount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GoodsLotteryRsp');
    if ($this->retcode !== null) {
      $xfer += $output->writeFieldBegin('retcode', TType::I32, 1);
      $xfer += $output->writeI32($this->retcode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->balance !== null) {
      $xfer += $output->writeFieldBegin('balance', TType::I32, 2);
      $xfer += $output->writeI32($this->balance);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->amount !== null) {
      $xfer += $output->writeFieldBegin('amount', TType::I32, 3);
      $xfer += $output->writeI32($this->amount);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class QueryOrderListReq {
  static $_TSPEC;

  public $ytid = null;
  public $start_time = null;
  public $end_time = null;
  public $page_no = null;
  public $page_size = null;
  public $clientip = null;
  public $from_service = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ytid',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'start_time',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'end_time',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'page_no',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'page_size',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'clientip',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'from_service',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ytid'])) {
        $this->ytid = $vals['ytid'];
      }
      if (isset($vals['start_time'])) {
        $this->start_time = $vals['start_time'];
      }
      if (isset($vals['end_time'])) {
        $this->end_time = $vals['end_time'];
      }
      if (isset($vals['page_no'])) {
        $this->page_no = $vals['page_no'];
      }
      if (isset($vals['page_size'])) {
        $this->page_size = $vals['page_size'];
      }
      if (isset($vals['clientip'])) {
        $this->clientip = $vals['clientip'];
      }
      if (isset($vals['from_service'])) {
        $this->from_service = $vals['from_service'];
      }
    }
  }

  public function getName() {
    return 'QueryOrderListReq';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->ytid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->start_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->end_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->page_no);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->page_size);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientip);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->from_service);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('QueryOrderListReq');
    if ($this->ytid !== null) {
      $xfer += $output->writeFieldBegin('ytid', TType::I64, 1);
      $xfer += $output->writeI64($this->ytid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->start_time !== null) {
      $xfer += $output->writeFieldBegin('start_time', TType::I64, 2);
      $xfer += $output->writeI64($this->start_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->end_time !== null) {
      $xfer += $output->writeFieldBegin('end_time', TType::I64, 3);
      $xfer += $output->writeI64($this->end_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->page_no !== null) {
      $xfer += $output->writeFieldBegin('page_no', TType::I32, 4);
      $xfer += $output->writeI32($this->page_no);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->page_size !== null) {
      $xfer += $output->writeFieldBegin('page_size', TType::I32, 5);
      $xfer += $output->writeI32($this->page_size);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientip !== null) {
      $xfer += $output->writeFieldBegin('clientip', TType::STRING, 6);
      $xfer += $output->writeString($this->clientip);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->from_service !== null) {
      $xfer += $output->writeFieldBegin('from_service', TType::STRING, 7);
      $xfer += $output->writeString($this->from_service);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderDetail {
  static $_TSPEC;

  public $order_id = null;
  public $jifen_order_id = null;
  public $goods_order_id = null;
  public $payer_id = null;
  public $payee_id = null;
  public $clientip = null;
  public $goods_spu = null;
  public $goods_sku = null;
  public $goods_type = null;
  public $goods_applyid = null;
  public $goods_name = null;
  public $goods_desc = null;
  public $goods_detail = null;
  public $goods_num = null;
  public $goods_total = null;
  public $goods_left = null;
  public $goods_price = null;
  public $goods_amount = null;
  public $goods_img_url_min = null;
  public $goods_img_url = null;
  public $goods_img_url_big = null;
  public $goods_click_url = null;
  public $from_service = null;
  public $platform = null;
  public $create_time = null;
  public $pay_time = null;
  public $operation = null;
  public $status = null;
  public $goods_sub_type = null;
  public $goods_img_url_horizontal = null;
  public $receiver_info = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'order_id',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'jifen_order_id',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'goods_order_id',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'payer_id',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'payee_id',
          'type' => TType::I64,
          ),
        6 => array(
          'var' => 'clientip',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'goods_spu',
          'type' => TType::I64,
          ),
        8 => array(
          'var' => 'goods_sku',
          'type' => TType::I64,
          ),
        9 => array(
          'var' => 'goods_type',
          'type' => TType::I32,
          ),
        10 => array(
          'var' => 'goods_applyid',
          'type' => TType::I64,
          ),
        11 => array(
          'var' => 'goods_name',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'goods_desc',
          'type' => TType::STRING,
          ),
        13 => array(
          'var' => 'goods_detail',
          'type' => TType::STRING,
          ),
        14 => array(
          'var' => 'goods_num',
          'type' => TType::I32,
          ),
        15 => array(
          'var' => 'goods_total',
          'type' => TType::I32,
          ),
        16 => array(
          'var' => 'goods_left',
          'type' => TType::I32,
          ),
        17 => array(
          'var' => 'goods_price',
          'type' => TType::I32,
          ),
        18 => array(
          'var' => 'goods_amount',
          'type' => TType::I32,
          ),
        19 => array(
          'var' => 'goods_img_url_min',
          'type' => TType::STRING,
          ),
        20 => array(
          'var' => 'goods_img_url',
          'type' => TType::STRING,
          ),
        21 => array(
          'var' => 'goods_img_url_big',
          'type' => TType::STRING,
          ),
        22 => array(
          'var' => 'goods_click_url',
          'type' => TType::STRING,
          ),
        23 => array(
          'var' => 'from_service',
          'type' => TType::STRING,
          ),
        24 => array(
          'var' => 'platform',
          'type' => TType::STRING,
          ),
        25 => array(
          'var' => 'create_time',
          'type' => TType::I64,
          ),
        26 => array(
          'var' => 'pay_time',
          'type' => TType::I64,
          ),
        27 => array(
          'var' => 'operation',
          'type' => TType::I32,
          ),
        28 => array(
          'var' => 'status',
          'type' => TType::I32,
          ),
        29 => array(
          'var' => 'goods_sub_type',
          'type' => TType::I32,
          ),
        30 => array(
          'var' => 'goods_img_url_horizontal',
          'type' => TType::STRING,
          ),
        31 => array(
          'var' => 'receiver_info',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['order_id'])) {
        $this->order_id = $vals['order_id'];
      }
      if (isset($vals['jifen_order_id'])) {
        $this->jifen_order_id = $vals['jifen_order_id'];
      }
      if (isset($vals['goods_order_id'])) {
        $this->goods_order_id = $vals['goods_order_id'];
      }
      if (isset($vals['payer_id'])) {
        $this->payer_id = $vals['payer_id'];
      }
      if (isset($vals['payee_id'])) {
        $this->payee_id = $vals['payee_id'];
      }
      if (isset($vals['clientip'])) {
        $this->clientip = $vals['clientip'];
      }
      if (isset($vals['goods_spu'])) {
        $this->goods_spu = $vals['goods_spu'];
      }
      if (isset($vals['goods_sku'])) {
        $this->goods_sku = $vals['goods_sku'];
      }
      if (isset($vals['goods_type'])) {
        $this->goods_type = $vals['goods_type'];
      }
      if (isset($vals['goods_applyid'])) {
        $this->goods_applyid = $vals['goods_applyid'];
      }
      if (isset($vals['goods_name'])) {
        $this->goods_name = $vals['goods_name'];
      }
      if (isset($vals['goods_desc'])) {
        $this->goods_desc = $vals['goods_desc'];
      }
      if (isset($vals['goods_detail'])) {
        $this->goods_detail = $vals['goods_detail'];
      }
      if (isset($vals['goods_num'])) {
        $this->goods_num = $vals['goods_num'];
      }
      if (isset($vals['goods_total'])) {
        $this->goods_total = $vals['goods_total'];
      }
      if (isset($vals['goods_left'])) {
        $this->goods_left = $vals['goods_left'];
      }
      if (isset($vals['goods_price'])) {
        $this->goods_price = $vals['goods_price'];
      }
      if (isset($vals['goods_amount'])) {
        $this->goods_amount = $vals['goods_amount'];
      }
      if (isset($vals['goods_img_url_min'])) {
        $this->goods_img_url_min = $vals['goods_img_url_min'];
      }
      if (isset($vals['goods_img_url'])) {
        $this->goods_img_url = $vals['goods_img_url'];
      }
      if (isset($vals['goods_img_url_big'])) {
        $this->goods_img_url_big = $vals['goods_img_url_big'];
      }
      if (isset($vals['goods_click_url'])) {
        $this->goods_click_url = $vals['goods_click_url'];
      }
      if (isset($vals['from_service'])) {
        $this->from_service = $vals['from_service'];
      }
      if (isset($vals['platform'])) {
        $this->platform = $vals['platform'];
      }
      if (isset($vals['create_time'])) {
        $this->create_time = $vals['create_time'];
      }
      if (isset($vals['pay_time'])) {
        $this->pay_time = $vals['pay_time'];
      }
      if (isset($vals['operation'])) {
        $this->operation = $vals['operation'];
      }
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['goods_sub_type'])) {
        $this->goods_sub_type = $vals['goods_sub_type'];
      }
      if (isset($vals['goods_img_url_horizontal'])) {
        $this->goods_img_url_horizontal = $vals['goods_img_url_horizontal'];
      }
      if (isset($vals['receiver_info'])) {
        $this->receiver_info = $vals['receiver_info'];
      }
    }
  }

  public function getName() {
    return 'OrderDetail';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->order_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->jifen_order_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->goods_order_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->payer_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->payee_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientip);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->goods_spu);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->goods_sku);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->goods_type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->goods_applyid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->goods_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->goods_desc);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->goods_detail);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->goods_num);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->goods_total);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->goods_left);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->goods_price);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 18:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->goods_amount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 19:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->goods_img_url_min);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 20:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->goods_img_url);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 21:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->goods_img_url_big);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 22:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->goods_click_url);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 23:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->from_service);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 24:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->platform);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 25:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->create_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 26:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->pay_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 27:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->operation);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 28:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 29:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->goods_sub_type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 30:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->goods_img_url_horizontal);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 31:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->receiver_info);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderDetail');
    if ($this->order_id !== null) {
      $xfer += $output->writeFieldBegin('order_id', TType::I64, 1);
      $xfer += $output->writeI64($this->order_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->jifen_order_id !== null) {
      $xfer += $output->writeFieldBegin('jifen_order_id', TType::I64, 2);
      $xfer += $output->writeI64($this->jifen_order_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->goods_order_id !== null) {
      $xfer += $output->writeFieldBegin('goods_order_id', TType::I64, 3);
      $xfer += $output->writeI64($this->goods_order_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->payer_id !== null) {
      $xfer += $output->writeFieldBegin('payer_id', TType::I64, 4);
      $xfer += $output->writeI64($this->payer_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->payee_id !== null) {
      $xfer += $output->writeFieldBegin('payee_id', TType::I64, 5);
      $xfer += $output->writeI64($this->payee_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientip !== null) {
      $xfer += $output->writeFieldBegin('clientip', TType::STRING, 6);
      $xfer += $output->writeString($this->clientip);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->goods_spu !== null) {
      $xfer += $output->writeFieldBegin('goods_spu', TType::I64, 7);
      $xfer += $output->writeI64($this->goods_spu);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->goods_sku !== null) {
      $xfer += $output->writeFieldBegin('goods_sku', TType::I64, 8);
      $xfer += $output->writeI64($this->goods_sku);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->goods_type !== null) {
      $xfer += $output->writeFieldBegin('goods_type', TType::I32, 9);
      $xfer += $output->writeI32($this->goods_type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->goods_applyid !== null) {
      $xfer += $output->writeFieldBegin('goods_applyid', TType::I64, 10);
      $xfer += $output->writeI64($this->goods_applyid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->goods_name !== null) {
      $xfer += $output->writeFieldBegin('goods_name', TType::STRING, 11);
      $xfer += $output->writeString($this->goods_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->goods_desc !== null) {
      $xfer += $output->writeFieldBegin('goods_desc', TType::STRING, 12);
      $xfer += $output->writeString($this->goods_desc);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->goods_detail !== null) {
      $xfer += $output->writeFieldBegin('goods_detail', TType::STRING, 13);
      $xfer += $output->writeString($this->goods_detail);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->goods_num !== null) {
      $xfer += $output->writeFieldBegin('goods_num', TType::I32, 14);
      $xfer += $output->writeI32($this->goods_num);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->goods_total !== null) {
      $xfer += $output->writeFieldBegin('goods_total', TType::I32, 15);
      $xfer += $output->writeI32($this->goods_total);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->goods_left !== null) {
      $xfer += $output->writeFieldBegin('goods_left', TType::I32, 16);
      $xfer += $output->writeI32($this->goods_left);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->goods_price !== null) {
      $xfer += $output->writeFieldBegin('goods_price', TType::I32, 17);
      $xfer += $output->writeI32($this->goods_price);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->goods_amount !== null) {
      $xfer += $output->writeFieldBegin('goods_amount', TType::I32, 18);
      $xfer += $output->writeI32($this->goods_amount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->goods_img_url_min !== null) {
      $xfer += $output->writeFieldBegin('goods_img_url_min', TType::STRING, 19);
      $xfer += $output->writeString($this->goods_img_url_min);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->goods_img_url !== null) {
      $xfer += $output->writeFieldBegin('goods_img_url', TType::STRING, 20);
      $xfer += $output->writeString($this->goods_img_url);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->goods_img_url_big !== null) {
      $xfer += $output->writeFieldBegin('goods_img_url_big', TType::STRING, 21);
      $xfer += $output->writeString($this->goods_img_url_big);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->goods_click_url !== null) {
      $xfer += $output->writeFieldBegin('goods_click_url', TType::STRING, 22);
      $xfer += $output->writeString($this->goods_click_url);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->from_service !== null) {
      $xfer += $output->writeFieldBegin('from_service', TType::STRING, 23);
      $xfer += $output->writeString($this->from_service);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->platform !== null) {
      $xfer += $output->writeFieldBegin('platform', TType::STRING, 24);
      $xfer += $output->writeString($this->platform);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->create_time !== null) {
      $xfer += $output->writeFieldBegin('create_time', TType::I64, 25);
      $xfer += $output->writeI64($this->create_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pay_time !== null) {
      $xfer += $output->writeFieldBegin('pay_time', TType::I64, 26);
      $xfer += $output->writeI64($this->pay_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->operation !== null) {
      $xfer += $output->writeFieldBegin('operation', TType::I32, 27);
      $xfer += $output->writeI32($this->operation);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->status !== null) {
      $xfer += $output->writeFieldBegin('status', TType::I32, 28);
      $xfer += $output->writeI32($this->status);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->goods_sub_type !== null) {
      $xfer += $output->writeFieldBegin('goods_sub_type', TType::I32, 29);
      $xfer += $output->writeI32($this->goods_sub_type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->goods_img_url_horizontal !== null) {
      $xfer += $output->writeFieldBegin('goods_img_url_horizontal', TType::STRING, 30);
      $xfer += $output->writeString($this->goods_img_url_horizontal);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->receiver_info !== null) {
      $xfer += $output->writeFieldBegin('receiver_info', TType::STRING, 31);
      $xfer += $output->writeString($this->receiver_info);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class QueryOrderListRsp {
  static $_TSPEC;

  public $retcode = null;
  public $total = null;
  public $page_no = null;
  public $order_detail_list = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'retcode',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'total',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'page_no',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'order_detail_list',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\xyz\mallsvr\OrderDetail',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['retcode'])) {
        $this->retcode = $vals['retcode'];
      }
      if (isset($vals['total'])) {
        $this->total = $vals['total'];
      }
      if (isset($vals['page_no'])) {
        $this->page_no = $vals['page_no'];
      }
      if (isset($vals['order_detail_list'])) {
        $this->order_detail_list = $vals['order_detail_list'];
      }
    }
  }

  public function getName() {
    return 'QueryOrderListRsp';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->retcode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->total);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->page_no);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::LST) {
            $this->order_detail_list = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readListBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $elem5 = new \xyz\mallsvr\OrderDetail();
              $xfer += $elem5->read($input);
              $this->order_detail_list []= $elem5;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('QueryOrderListRsp');
    if ($this->retcode !== null) {
      $xfer += $output->writeFieldBegin('retcode', TType::I32, 1);
      $xfer += $output->writeI32($this->retcode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->total !== null) {
      $xfer += $output->writeFieldBegin('total', TType::I32, 2);
      $xfer += $output->writeI32($this->total);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->page_no !== null) {
      $xfer += $output->writeFieldBegin('page_no', TType::I32, 3);
      $xfer += $output->writeI32($this->page_no);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->order_detail_list !== null) {
      if (!is_array($this->order_detail_list)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('order_detail_list', TType::LST, 4);
      {
        $output->writeListBegin(TType::STRUCT, count($this->order_detail_list));
        {
          foreach ($this->order_detail_list as $iter6)
          {
            $xfer += $iter6->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetOrderInfoRsp {
  static $_TSPEC;

  public $retcode = null;
  public $order_detail = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'retcode',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'order_detail',
          'type' => TType::STRUCT,
          'class' => '\xyz\mallsvr\OrderDetail',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['retcode'])) {
        $this->retcode = $vals['retcode'];
      }
      if (isset($vals['order_detail'])) {
        $this->order_detail = $vals['order_detail'];
      }
    }
  }

  public function getName() {
    return 'GetOrderInfoRsp';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->retcode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->order_detail = new \xyz\mallsvr\OrderDetail();
            $xfer += $this->order_detail->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetOrderInfoRsp');
    if ($this->retcode !== null) {
      $xfer += $output->writeFieldBegin('retcode', TType::I32, 1);
      $xfer += $output->writeI32($this->retcode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->order_detail !== null) {
      if (!is_object($this->order_detail)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('order_detail', TType::STRUCT, 2);
      $xfer += $this->order_detail->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetGoodsShowListReq {
  static $_TSPEC;

  public $group = null;
  public $page_no = null;
  public $page_size = null;
  public $status = null;
  public $need_rule = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'group',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'page_no',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'page_size',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'status',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'need_rule',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['group'])) {
        $this->group = $vals['group'];
      }
      if (isset($vals['page_no'])) {
        $this->page_no = $vals['page_no'];
      }
      if (isset($vals['page_size'])) {
        $this->page_size = $vals['page_size'];
      }
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['need_rule'])) {
        $this->need_rule = $vals['need_rule'];
      }
    }
  }

  public function getName() {
    return 'GetGoodsShowListReq';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->group);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->page_no);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->page_size);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->need_rule);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetGoodsShowListReq');
    if ($this->group !== null) {
      $xfer += $output->writeFieldBegin('group', TType::I32, 1);
      $xfer += $output->writeI32($this->group);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->page_no !== null) {
      $xfer += $output->writeFieldBegin('page_no', TType::I32, 2);
      $xfer += $output->writeI32($this->page_no);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->page_size !== null) {
      $xfer += $output->writeFieldBegin('page_size', TType::I32, 3);
      $xfer += $output->writeI32($this->page_size);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->status !== null) {
      $xfer += $output->writeFieldBegin('status', TType::I32, 4);
      $xfer += $output->writeI32($this->status);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->need_rule !== null) {
      $xfer += $output->writeFieldBegin('need_rule', TType::I32, 5);
      $xfer += $output->writeI32($this->need_rule);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GoodsItem {
  static $_TSPEC;

  public $group = null;
  public $groupname = null;
  public $goods_applyid = null;
  public $goods_spuid = null;
  public $postion = null;
  public $goods_type = null;
  public $goods_name = null;
  public $goods_desc = null;
  public $goods_detail = null;
  public $goods_total = null;
  public $goods_left = null;
  public $goods_price = null;
  public $goods_img_url_min = null;
  public $goods_img_url = null;
  public $goods_img_url_big = null;
  public $goods_click_url = null;
  public $status = null;
  public $org_price = null;
  public $up_shelf_time = null;
  public $down_shelf_time = null;
  public $goods_sub_type = null;
  public $start_time = null;
  public $end_time = null;
  public $promotion_price = null;
  public $promotion_type = null;
  public $sign_type = null;
  public $goods_img_url_horizontal = null;
  public $limit_rule = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'group',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'groupname',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'goods_applyid',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'goods_spuid',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'postion',
          'type' => TType::I64,
          ),
        6 => array(
          'var' => 'goods_type',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'goods_name',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'goods_desc',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'goods_detail',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'goods_total',
          'type' => TType::I32,
          ),
        11 => array(
          'var' => 'goods_left',
          'type' => TType::I32,
          ),
        12 => array(
          'var' => 'goods_price',
          'type' => TType::I32,
          ),
        13 => array(
          'var' => 'goods_img_url_min',
          'type' => TType::STRING,
          ),
        14 => array(
          'var' => 'goods_img_url',
          'type' => TType::STRING,
          ),
        15 => array(
          'var' => 'goods_img_url_big',
          'type' => TType::STRING,
          ),
        16 => array(
          'var' => 'goods_click_url',
          'type' => TType::STRING,
          ),
        17 => array(
          'var' => 'status',
          'type' => TType::I32,
          ),
        18 => array(
          'var' => 'org_price',
          'type' => TType::I32,
          ),
        19 => array(
          'var' => 'up_shelf_time',
          'type' => TType::I64,
          ),
        20 => array(
          'var' => 'down_shelf_time',
          'type' => TType::I64,
          ),
        21 => array(
          'var' => 'goods_sub_type',
          'type' => TType::I32,
          ),
        22 => array(
          'var' => 'start_time',
          'type' => TType::I64,
          ),
        23 => array(
          'var' => 'end_time',
          'type' => TType::I64,
          ),
        24 => array(
          'var' => 'promotion_price',
          'type' => TType::I32,
          ),
        25 => array(
          'var' => 'promotion_type',
          'type' => TType::I32,
          ),
        26 => array(
          'var' => 'sign_type',
          'type' => TType::I32,
          ),
        27 => array(
          'var' => 'goods_img_url_horizontal',
          'type' => TType::STRING,
          ),
        28 => array(
          'var' => 'limit_rule',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['group'])) {
        $this->group = $vals['group'];
      }
      if (isset($vals['groupname'])) {
        $this->groupname = $vals['groupname'];
      }
      if (isset($vals['goods_applyid'])) {
        $this->goods_applyid = $vals['goods_applyid'];
      }
      if (isset($vals['goods_spuid'])) {
        $this->goods_spuid = $vals['goods_spuid'];
      }
      if (isset($vals['postion'])) {
        $this->postion = $vals['postion'];
      }
      if (isset($vals['goods_type'])) {
        $this->goods_type = $vals['goods_type'];
      }
      if (isset($vals['goods_name'])) {
        $this->goods_name = $vals['goods_name'];
      }
      if (isset($vals['goods_desc'])) {
        $this->goods_desc = $vals['goods_desc'];
      }
      if (isset($vals['goods_detail'])) {
        $this->goods_detail = $vals['goods_detail'];
      }
      if (isset($vals['goods_total'])) {
        $this->goods_total = $vals['goods_total'];
      }
      if (isset($vals['goods_left'])) {
        $this->goods_left = $vals['goods_left'];
      }
      if (isset($vals['goods_price'])) {
        $this->goods_price = $vals['goods_price'];
      }
      if (isset($vals['goods_img_url_min'])) {
        $this->goods_img_url_min = $vals['goods_img_url_min'];
      }
      if (isset($vals['goods_img_url'])) {
        $this->goods_img_url = $vals['goods_img_url'];
      }
      if (isset($vals['goods_img_url_big'])) {
        $this->goods_img_url_big = $vals['goods_img_url_big'];
      }
      if (isset($vals['goods_click_url'])) {
        $this->goods_click_url = $vals['goods_click_url'];
      }
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['org_price'])) {
        $this->org_price = $vals['org_price'];
      }
      if (isset($vals['up_shelf_time'])) {
        $this->up_shelf_time = $vals['up_shelf_time'];
      }
      if (isset($vals['down_shelf_time'])) {
        $this->down_shelf_time = $vals['down_shelf_time'];
      }
      if (isset($vals['goods_sub_type'])) {
        $this->goods_sub_type = $vals['goods_sub_type'];
      }
      if (isset($vals['start_time'])) {
        $this->start_time = $vals['start_time'];
      }
      if (isset($vals['end_time'])) {
        $this->end_time = $vals['end_time'];
      }
      if (isset($vals['promotion_price'])) {
        $this->promotion_price = $vals['promotion_price'];
      }
      if (isset($vals['promotion_type'])) {
        $this->promotion_type = $vals['promotion_type'];
      }
      if (isset($vals['sign_type'])) {
        $this->sign_type = $vals['sign_type'];
      }
      if (isset($vals['goods_img_url_horizontal'])) {
        $this->goods_img_url_horizontal = $vals['goods_img_url_horizontal'];
      }
      if (isset($vals['limit_rule'])) {
        $this->limit_rule = $vals['limit_rule'];
      }
    }
  }

  public function getName() {
    return 'GoodsItem';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->group);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->groupname);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->goods_applyid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->goods_spuid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->postion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->goods_type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->goods_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->goods_desc);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->goods_detail);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->goods_total);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->goods_left);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->goods_price);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->goods_img_url_min);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->goods_img_url);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->goods_img_url_big);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->goods_click_url);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 18:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->org_price);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 19:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->up_shelf_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 20:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->down_shelf_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 21:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->goods_sub_type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 22:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->start_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 23:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->end_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 24:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->promotion_price);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 25:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->promotion_type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 26:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->sign_type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 27:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->goods_img_url_horizontal);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 28:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->limit_rule);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GoodsItem');
    if ($this->group !== null) {
      $xfer += $output->writeFieldBegin('group', TType::I32, 1);
      $xfer += $output->writeI32($this->group);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->groupname !== null) {
      $xfer += $output->writeFieldBegin('groupname', TType::STRING, 2);
      $xfer += $output->writeString($this->groupname);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->goods_applyid !== null) {
      $xfer += $output->writeFieldBegin('goods_applyid', TType::I64, 3);
      $xfer += $output->writeI64($this->goods_applyid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->goods_spuid !== null) {
      $xfer += $output->writeFieldBegin('goods_spuid', TType::I64, 4);
      $xfer += $output->writeI64($this->goods_spuid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->postion !== null) {
      $xfer += $output->writeFieldBegin('postion', TType::I64, 5);
      $xfer += $output->writeI64($this->postion);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->goods_type !== null) {
      $xfer += $output->writeFieldBegin('goods_type', TType::I32, 6);
      $xfer += $output->writeI32($this->goods_type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->goods_name !== null) {
      $xfer += $output->writeFieldBegin('goods_name', TType::STRING, 7);
      $xfer += $output->writeString($this->goods_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->goods_desc !== null) {
      $xfer += $output->writeFieldBegin('goods_desc', TType::STRING, 8);
      $xfer += $output->writeString($this->goods_desc);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->goods_detail !== null) {
      $xfer += $output->writeFieldBegin('goods_detail', TType::STRING, 9);
      $xfer += $output->writeString($this->goods_detail);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->goods_total !== null) {
      $xfer += $output->writeFieldBegin('goods_total', TType::I32, 10);
      $xfer += $output->writeI32($this->goods_total);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->goods_left !== null) {
      $xfer += $output->writeFieldBegin('goods_left', TType::I32, 11);
      $xfer += $output->writeI32($this->goods_left);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->goods_price !== null) {
      $xfer += $output->writeFieldBegin('goods_price', TType::I32, 12);
      $xfer += $output->writeI32($this->goods_price);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->goods_img_url_min !== null) {
      $xfer += $output->writeFieldBegin('goods_img_url_min', TType::STRING, 13);
      $xfer += $output->writeString($this->goods_img_url_min);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->goods_img_url !== null) {
      $xfer += $output->writeFieldBegin('goods_img_url', TType::STRING, 14);
      $xfer += $output->writeString($this->goods_img_url);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->goods_img_url_big !== null) {
      $xfer += $output->writeFieldBegin('goods_img_url_big', TType::STRING, 15);
      $xfer += $output->writeString($this->goods_img_url_big);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->goods_click_url !== null) {
      $xfer += $output->writeFieldBegin('goods_click_url', TType::STRING, 16);
      $xfer += $output->writeString($this->goods_click_url);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->status !== null) {
      $xfer += $output->writeFieldBegin('status', TType::I32, 17);
      $xfer += $output->writeI32($this->status);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->org_price !== null) {
      $xfer += $output->writeFieldBegin('org_price', TType::I32, 18);
      $xfer += $output->writeI32($this->org_price);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->up_shelf_time !== null) {
      $xfer += $output->writeFieldBegin('up_shelf_time', TType::I64, 19);
      $xfer += $output->writeI64($this->up_shelf_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->down_shelf_time !== null) {
      $xfer += $output->writeFieldBegin('down_shelf_time', TType::I64, 20);
      $xfer += $output->writeI64($this->down_shelf_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->goods_sub_type !== null) {
      $xfer += $output->writeFieldBegin('goods_sub_type', TType::I32, 21);
      $xfer += $output->writeI32($this->goods_sub_type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->start_time !== null) {
      $xfer += $output->writeFieldBegin('start_time', TType::I64, 22);
      $xfer += $output->writeI64($this->start_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->end_time !== null) {
      $xfer += $output->writeFieldBegin('end_time', TType::I64, 23);
      $xfer += $output->writeI64($this->end_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->promotion_price !== null) {
      $xfer += $output->writeFieldBegin('promotion_price', TType::I32, 24);
      $xfer += $output->writeI32($this->promotion_price);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->promotion_type !== null) {
      $xfer += $output->writeFieldBegin('promotion_type', TType::I32, 25);
      $xfer += $output->writeI32($this->promotion_type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sign_type !== null) {
      $xfer += $output->writeFieldBegin('sign_type', TType::I32, 26);
      $xfer += $output->writeI32($this->sign_type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->goods_img_url_horizontal !== null) {
      $xfer += $output->writeFieldBegin('goods_img_url_horizontal', TType::STRING, 27);
      $xfer += $output->writeString($this->goods_img_url_horizontal);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->limit_rule !== null) {
      $xfer += $output->writeFieldBegin('limit_rule', TType::STRING, 28);
      $xfer += $output->writeString($this->limit_rule);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetGoodsShowListRsp {
  static $_TSPEC;

  public $retcode = null;
  public $total = null;
  public $page_no = null;
  public $goods_list = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'retcode',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'total',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'page_no',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'goods_list',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\xyz\mallsvr\GoodsItem',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['retcode'])) {
        $this->retcode = $vals['retcode'];
      }
      if (isset($vals['total'])) {
        $this->total = $vals['total'];
      }
      if (isset($vals['page_no'])) {
        $this->page_no = $vals['page_no'];
      }
      if (isset($vals['goods_list'])) {
        $this->goods_list = $vals['goods_list'];
      }
    }
  }

  public function getName() {
    return 'GetGoodsShowListRsp';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->retcode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->total);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->page_no);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::LST) {
            $this->goods_list = array();
            $_size7 = 0;
            $_etype10 = 0;
            $xfer += $input->readListBegin($_etype10, $_size7);
            for ($_i11 = 0; $_i11 < $_size7; ++$_i11)
            {
              $elem12 = null;
              $elem12 = new \xyz\mallsvr\GoodsItem();
              $xfer += $elem12->read($input);
              $this->goods_list []= $elem12;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetGoodsShowListRsp');
    if ($this->retcode !== null) {
      $xfer += $output->writeFieldBegin('retcode', TType::I32, 1);
      $xfer += $output->writeI32($this->retcode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->total !== null) {
      $xfer += $output->writeFieldBegin('total', TType::I32, 2);
      $xfer += $output->writeI32($this->total);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->page_no !== null) {
      $xfer += $output->writeFieldBegin('page_no', TType::I32, 3);
      $xfer += $output->writeI32($this->page_no);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->goods_list !== null) {
      if (!is_array($this->goods_list)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('goods_list', TType::LST, 4);
      {
        $output->writeListBegin(TType::STRUCT, count($this->goods_list));
        {
          foreach ($this->goods_list as $iter13)
          {
            $xfer += $iter13->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AddGoodsTosheftReq {
  static $_TSPEC;

  public $group = null;
  public $groupname = null;
  public $goods_applyid = null;
  public $goods_spu = null;
  public $postion = null;
  public $goods_price = null;
  public $up_shelf_time = null;
  public $down_shelf_time = null;
  public $limit_rule = null;
  public $status = null;
  public $start_time = null;
  public $end_time = null;
  public $promotion_price = null;
  public $promotion_type = null;
  public $sign_type = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'group',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'groupname',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'goods_applyid',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'goods_spu',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'postion',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'goods_price',
          'type' => TType::I64,
          ),
        7 => array(
          'var' => 'up_shelf_time',
          'type' => TType::I64,
          ),
        8 => array(
          'var' => 'down_shelf_time',
          'type' => TType::I64,
          ),
        9 => array(
          'var' => 'limit_rule',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'status',
          'type' => TType::I32,
          ),
        11 => array(
          'var' => 'start_time',
          'type' => TType::I64,
          ),
        12 => array(
          'var' => 'end_time',
          'type' => TType::I64,
          ),
        13 => array(
          'var' => 'promotion_price',
          'type' => TType::I32,
          ),
        14 => array(
          'var' => 'promotion_type',
          'type' => TType::I32,
          ),
        15 => array(
          'var' => 'sign_type',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['group'])) {
        $this->group = $vals['group'];
      }
      if (isset($vals['groupname'])) {
        $this->groupname = $vals['groupname'];
      }
      if (isset($vals['goods_applyid'])) {
        $this->goods_applyid = $vals['goods_applyid'];
      }
      if (isset($vals['goods_spu'])) {
        $this->goods_spu = $vals['goods_spu'];
      }
      if (isset($vals['postion'])) {
        $this->postion = $vals['postion'];
      }
      if (isset($vals['goods_price'])) {
        $this->goods_price = $vals['goods_price'];
      }
      if (isset($vals['up_shelf_time'])) {
        $this->up_shelf_time = $vals['up_shelf_time'];
      }
      if (isset($vals['down_shelf_time'])) {
        $this->down_shelf_time = $vals['down_shelf_time'];
      }
      if (isset($vals['limit_rule'])) {
        $this->limit_rule = $vals['limit_rule'];
      }
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['start_time'])) {
        $this->start_time = $vals['start_time'];
      }
      if (isset($vals['end_time'])) {
        $this->end_time = $vals['end_time'];
      }
      if (isset($vals['promotion_price'])) {
        $this->promotion_price = $vals['promotion_price'];
      }
      if (isset($vals['promotion_type'])) {
        $this->promotion_type = $vals['promotion_type'];
      }
      if (isset($vals['sign_type'])) {
        $this->sign_type = $vals['sign_type'];
      }
    }
  }

  public function getName() {
    return 'AddGoodsTosheftReq';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->group);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->groupname);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->goods_applyid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->goods_spu);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->postion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->goods_price);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->up_shelf_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->down_shelf_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->limit_rule);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->start_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->end_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->promotion_price);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->promotion_type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->sign_type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AddGoodsTosheftReq');
    if ($this->group !== null) {
      $xfer += $output->writeFieldBegin('group', TType::I32, 1);
      $xfer += $output->writeI32($this->group);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->groupname !== null) {
      $xfer += $output->writeFieldBegin('groupname', TType::STRING, 2);
      $xfer += $output->writeString($this->groupname);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->goods_applyid !== null) {
      $xfer += $output->writeFieldBegin('goods_applyid', TType::I64, 3);
      $xfer += $output->writeI64($this->goods_applyid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->goods_spu !== null) {
      $xfer += $output->writeFieldBegin('goods_spu', TType::I64, 4);
      $xfer += $output->writeI64($this->goods_spu);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->postion !== null) {
      $xfer += $output->writeFieldBegin('postion', TType::I32, 5);
      $xfer += $output->writeI32($this->postion);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->goods_price !== null) {
      $xfer += $output->writeFieldBegin('goods_price', TType::I64, 6);
      $xfer += $output->writeI64($this->goods_price);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->up_shelf_time !== null) {
      $xfer += $output->writeFieldBegin('up_shelf_time', TType::I64, 7);
      $xfer += $output->writeI64($this->up_shelf_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->down_shelf_time !== null) {
      $xfer += $output->writeFieldBegin('down_shelf_time', TType::I64, 8);
      $xfer += $output->writeI64($this->down_shelf_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->limit_rule !== null) {
      $xfer += $output->writeFieldBegin('limit_rule', TType::STRING, 9);
      $xfer += $output->writeString($this->limit_rule);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->status !== null) {
      $xfer += $output->writeFieldBegin('status', TType::I32, 10);
      $xfer += $output->writeI32($this->status);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->start_time !== null) {
      $xfer += $output->writeFieldBegin('start_time', TType::I64, 11);
      $xfer += $output->writeI64($this->start_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->end_time !== null) {
      $xfer += $output->writeFieldBegin('end_time', TType::I64, 12);
      $xfer += $output->writeI64($this->end_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->promotion_price !== null) {
      $xfer += $output->writeFieldBegin('promotion_price', TType::I32, 13);
      $xfer += $output->writeI32($this->promotion_price);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->promotion_type !== null) {
      $xfer += $output->writeFieldBegin('promotion_type', TType::I32, 14);
      $xfer += $output->writeI32($this->promotion_type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sign_type !== null) {
      $xfer += $output->writeFieldBegin('sign_type', TType::I32, 15);
      $xfer += $output->writeI32($this->sign_type);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AddGoodsTosheftRsp {
  static $_TSPEC;

  public $retcode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'retcode',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['retcode'])) {
        $this->retcode = $vals['retcode'];
      }
    }
  }

  public function getName() {
    return 'AddGoodsTosheftRsp';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->retcode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AddGoodsTosheftRsp');
    if ($this->retcode !== null) {
      $xfer += $output->writeFieldBegin('retcode', TType::I32, 1);
      $xfer += $output->writeI32($this->retcode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class UpdateGoodsTosheftReq {
  static $_TSPEC;

  public $group = null;
  public $groupname = null;
  public $goods_applyid = null;
  public $goods_spu = null;
  public $postion = null;
  public $goods_price = null;
  public $up_shelf_time = null;
  public $down_shelf_time = null;
  public $limit_rule = null;
  public $status = null;
  public $start_time = null;
  public $end_time = null;
  public $promotion_price = null;
  public $promotion_type = null;
  public $sign_type = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'group',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'groupname',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'goods_applyid',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'goods_spu',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'postion',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'goods_price',
          'type' => TType::I64,
          ),
        7 => array(
          'var' => 'up_shelf_time',
          'type' => TType::I64,
          ),
        8 => array(
          'var' => 'down_shelf_time',
          'type' => TType::I64,
          ),
        9 => array(
          'var' => 'limit_rule',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'status',
          'type' => TType::I32,
          ),
        11 => array(
          'var' => 'start_time',
          'type' => TType::I64,
          ),
        12 => array(
          'var' => 'end_time',
          'type' => TType::I64,
          ),
        13 => array(
          'var' => 'promotion_price',
          'type' => TType::I32,
          ),
        14 => array(
          'var' => 'promotion_type',
          'type' => TType::I32,
          ),
        15 => array(
          'var' => 'sign_type',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['group'])) {
        $this->group = $vals['group'];
      }
      if (isset($vals['groupname'])) {
        $this->groupname = $vals['groupname'];
      }
      if (isset($vals['goods_applyid'])) {
        $this->goods_applyid = $vals['goods_applyid'];
      }
      if (isset($vals['goods_spu'])) {
        $this->goods_spu = $vals['goods_spu'];
      }
      if (isset($vals['postion'])) {
        $this->postion = $vals['postion'];
      }
      if (isset($vals['goods_price'])) {
        $this->goods_price = $vals['goods_price'];
      }
      if (isset($vals['up_shelf_time'])) {
        $this->up_shelf_time = $vals['up_shelf_time'];
      }
      if (isset($vals['down_shelf_time'])) {
        $this->down_shelf_time = $vals['down_shelf_time'];
      }
      if (isset($vals['limit_rule'])) {
        $this->limit_rule = $vals['limit_rule'];
      }
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['start_time'])) {
        $this->start_time = $vals['start_time'];
      }
      if (isset($vals['end_time'])) {
        $this->end_time = $vals['end_time'];
      }
      if (isset($vals['promotion_price'])) {
        $this->promotion_price = $vals['promotion_price'];
      }
      if (isset($vals['promotion_type'])) {
        $this->promotion_type = $vals['promotion_type'];
      }
      if (isset($vals['sign_type'])) {
        $this->sign_type = $vals['sign_type'];
      }
    }
  }

  public function getName() {
    return 'UpdateGoodsTosheftReq';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->group);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->groupname);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->goods_applyid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->goods_spu);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->postion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->goods_price);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->up_shelf_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->down_shelf_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->limit_rule);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->start_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->end_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->promotion_price);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->promotion_type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->sign_type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('UpdateGoodsTosheftReq');
    if ($this->group !== null) {
      $xfer += $output->writeFieldBegin('group', TType::I32, 1);
      $xfer += $output->writeI32($this->group);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->groupname !== null) {
      $xfer += $output->writeFieldBegin('groupname', TType::STRING, 2);
      $xfer += $output->writeString($this->groupname);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->goods_applyid !== null) {
      $xfer += $output->writeFieldBegin('goods_applyid', TType::I64, 3);
      $xfer += $output->writeI64($this->goods_applyid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->goods_spu !== null) {
      $xfer += $output->writeFieldBegin('goods_spu', TType::I64, 4);
      $xfer += $output->writeI64($this->goods_spu);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->postion !== null) {
      $xfer += $output->writeFieldBegin('postion', TType::I32, 5);
      $xfer += $output->writeI32($this->postion);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->goods_price !== null) {
      $xfer += $output->writeFieldBegin('goods_price', TType::I64, 6);
      $xfer += $output->writeI64($this->goods_price);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->up_shelf_time !== null) {
      $xfer += $output->writeFieldBegin('up_shelf_time', TType::I64, 7);
      $xfer += $output->writeI64($this->up_shelf_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->down_shelf_time !== null) {
      $xfer += $output->writeFieldBegin('down_shelf_time', TType::I64, 8);
      $xfer += $output->writeI64($this->down_shelf_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->limit_rule !== null) {
      $xfer += $output->writeFieldBegin('limit_rule', TType::STRING, 9);
      $xfer += $output->writeString($this->limit_rule);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->status !== null) {
      $xfer += $output->writeFieldBegin('status', TType::I32, 10);
      $xfer += $output->writeI32($this->status);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->start_time !== null) {
      $xfer += $output->writeFieldBegin('start_time', TType::I64, 11);
      $xfer += $output->writeI64($this->start_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->end_time !== null) {
      $xfer += $output->writeFieldBegin('end_time', TType::I64, 12);
      $xfer += $output->writeI64($this->end_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->promotion_price !== null) {
      $xfer += $output->writeFieldBegin('promotion_price', TType::I32, 13);
      $xfer += $output->writeI32($this->promotion_price);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->promotion_type !== null) {
      $xfer += $output->writeFieldBegin('promotion_type', TType::I32, 14);
      $xfer += $output->writeI32($this->promotion_type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sign_type !== null) {
      $xfer += $output->writeFieldBegin('sign_type', TType::I32, 15);
      $xfer += $output->writeI32($this->sign_type);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class UpdateGoodsTosheftRsp {
  static $_TSPEC;

  public $retcode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'retcode',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['retcode'])) {
        $this->retcode = $vals['retcode'];
      }
    }
  }

  public function getName() {
    return 'UpdateGoodsTosheftRsp';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->retcode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('UpdateGoodsTosheftRsp');
    if ($this->retcode !== null) {
      $xfer += $output->writeFieldBegin('retcode', TType::I32, 1);
      $xfer += $output->writeI32($this->retcode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetGoodsInfoReq {
  static $_TSPEC;

  public $goods_applyid = null;
  public $group = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'goods_applyid',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'group',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['goods_applyid'])) {
        $this->goods_applyid = $vals['goods_applyid'];
      }
      if (isset($vals['group'])) {
        $this->group = $vals['group'];
      }
    }
  }

  public function getName() {
    return 'GetGoodsInfoReq';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->goods_applyid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->group);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetGoodsInfoReq');
    if ($this->goods_applyid !== null) {
      $xfer += $output->writeFieldBegin('goods_applyid', TType::I64, 1);
      $xfer += $output->writeI64($this->goods_applyid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->group !== null) {
      $xfer += $output->writeFieldBegin('group', TType::I64, 2);
      $xfer += $output->writeI64($this->group);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetGoodsInfoRsp {
  static $_TSPEC;

  public $retcode = null;
  public $goods = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'retcode',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'goods',
          'type' => TType::STRUCT,
          'class' => '\xyz\mallsvr\GoodsItem',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['retcode'])) {
        $this->retcode = $vals['retcode'];
      }
      if (isset($vals['goods'])) {
        $this->goods = $vals['goods'];
      }
    }
  }

  public function getName() {
    return 'GetGoodsInfoRsp';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->retcode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->goods = new \xyz\mallsvr\GoodsItem();
            $xfer += $this->goods->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetGoodsInfoRsp');
    if ($this->retcode !== null) {
      $xfer += $output->writeFieldBegin('retcode', TType::I32, 1);
      $xfer += $output->writeI32($this->retcode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->goods !== null) {
      if (!is_object($this->goods)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('goods', TType::STRUCT, 2);
      $xfer += $this->goods->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class FlashGoodsReq {
  static $_TSPEC;

  public $group = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'group',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['group'])) {
        $this->group = $vals['group'];
      }
    }
  }

  public function getName() {
    return 'FlashGoodsReq';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->group);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('FlashGoodsReq');
    if ($this->group !== null) {
      $xfer += $output->writeFieldBegin('group', TType::I32, 1);
      $xfer += $output->writeI32($this->group);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class FlashGoodsRsp {
  static $_TSPEC;

  public $retcode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'retcode',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['retcode'])) {
        $this->retcode = $vals['retcode'];
      }
    }
  }

  public function getName() {
    return 'FlashGoodsRsp';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->retcode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('FlashGoodsRsp');
    if ($this->retcode !== null) {
      $xfer += $output->writeFieldBegin('retcode', TType::I32, 1);
      $xfer += $output->writeI32($this->retcode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AddReceiverInfoReq {
  static $_TSPEC;

  public $buyer_id = null;
  public $receiver_name = null;
  public $address = null;
  public $phone = null;
  public $zip = null;
  public $default_receiver = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'buyer_id',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'receiver_name',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'address',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'phone',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'zip',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'default_receiver',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['buyer_id'])) {
        $this->buyer_id = $vals['buyer_id'];
      }
      if (isset($vals['receiver_name'])) {
        $this->receiver_name = $vals['receiver_name'];
      }
      if (isset($vals['address'])) {
        $this->address = $vals['address'];
      }
      if (isset($vals['phone'])) {
        $this->phone = $vals['phone'];
      }
      if (isset($vals['zip'])) {
        $this->zip = $vals['zip'];
      }
      if (isset($vals['default_receiver'])) {
        $this->default_receiver = $vals['default_receiver'];
      }
    }
  }

  public function getName() {
    return 'AddReceiverInfoReq';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->buyer_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->receiver_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->address);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->phone);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->zip);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->default_receiver);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AddReceiverInfoReq');
    if ($this->buyer_id !== null) {
      $xfer += $output->writeFieldBegin('buyer_id', TType::I64, 1);
      $xfer += $output->writeI64($this->buyer_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->receiver_name !== null) {
      $xfer += $output->writeFieldBegin('receiver_name', TType::STRING, 2);
      $xfer += $output->writeString($this->receiver_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->address !== null) {
      $xfer += $output->writeFieldBegin('address', TType::STRING, 3);
      $xfer += $output->writeString($this->address);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->phone !== null) {
      $xfer += $output->writeFieldBegin('phone', TType::STRING, 4);
      $xfer += $output->writeString($this->phone);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->zip !== null) {
      $xfer += $output->writeFieldBegin('zip', TType::STRING, 5);
      $xfer += $output->writeString($this->zip);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->default_receiver !== null) {
      $xfer += $output->writeFieldBegin('default_receiver', TType::BOOL, 6);
      $xfer += $output->writeBool($this->default_receiver);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AddReceiverInfoRsp {
  static $_TSPEC;

  public $retcode = null;
  public $receiver_info_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'retcode',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'receiver_info_id',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['retcode'])) {
        $this->retcode = $vals['retcode'];
      }
      if (isset($vals['receiver_info_id'])) {
        $this->receiver_info_id = $vals['receiver_info_id'];
      }
    }
  }

  public function getName() {
    return 'AddReceiverInfoRsp';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->retcode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->receiver_info_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AddReceiverInfoRsp');
    if ($this->retcode !== null) {
      $xfer += $output->writeFieldBegin('retcode', TType::I32, 1);
      $xfer += $output->writeI32($this->retcode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->receiver_info_id !== null) {
      $xfer += $output->writeFieldBegin('receiver_info_id', TType::I64, 2);
      $xfer += $output->writeI64($this->receiver_info_id);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class DelReceiverInfoReq {
  static $_TSPEC;

  public $receiver_info_id = null;
  public $buyer_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'receiver_info_id',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'buyer_id',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['receiver_info_id'])) {
        $this->receiver_info_id = $vals['receiver_info_id'];
      }
      if (isset($vals['buyer_id'])) {
        $this->buyer_id = $vals['buyer_id'];
      }
    }
  }

  public function getName() {
    return 'DelReceiverInfoReq';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->receiver_info_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->buyer_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('DelReceiverInfoReq');
    if ($this->receiver_info_id !== null) {
      $xfer += $output->writeFieldBegin('receiver_info_id', TType::I64, 1);
      $xfer += $output->writeI64($this->receiver_info_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->buyer_id !== null) {
      $xfer += $output->writeFieldBegin('buyer_id', TType::I64, 2);
      $xfer += $output->writeI64($this->buyer_id);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class DelReceiverInfoRsp {
  static $_TSPEC;

  public $retcode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'retcode',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['retcode'])) {
        $this->retcode = $vals['retcode'];
      }
    }
  }

  public function getName() {
    return 'DelReceiverInfoRsp';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->retcode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('DelReceiverInfoRsp');
    if ($this->retcode !== null) {
      $xfer += $output->writeFieldBegin('retcode', TType::I32, 1);
      $xfer += $output->writeI32($this->retcode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class UpdateReceiverInfoReq {
  static $_TSPEC;

  public $receiver_info_id = null;
  public $receiver_name = null;
  public $address = null;
  public $phone = null;
  public $zip = null;
  public $default_receiver = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'receiver_info_id',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'receiver_name',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'address',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'phone',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'zip',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'default_receiver',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['receiver_info_id'])) {
        $this->receiver_info_id = $vals['receiver_info_id'];
      }
      if (isset($vals['receiver_name'])) {
        $this->receiver_name = $vals['receiver_name'];
      }
      if (isset($vals['address'])) {
        $this->address = $vals['address'];
      }
      if (isset($vals['phone'])) {
        $this->phone = $vals['phone'];
      }
      if (isset($vals['zip'])) {
        $this->zip = $vals['zip'];
      }
      if (isset($vals['default_receiver'])) {
        $this->default_receiver = $vals['default_receiver'];
      }
    }
  }

  public function getName() {
    return 'UpdateReceiverInfoReq';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->receiver_info_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->receiver_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->address);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->phone);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->zip);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->default_receiver);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('UpdateReceiverInfoReq');
    if ($this->receiver_info_id !== null) {
      $xfer += $output->writeFieldBegin('receiver_info_id', TType::I64, 1);
      $xfer += $output->writeI64($this->receiver_info_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->receiver_name !== null) {
      $xfer += $output->writeFieldBegin('receiver_name', TType::STRING, 2);
      $xfer += $output->writeString($this->receiver_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->address !== null) {
      $xfer += $output->writeFieldBegin('address', TType::STRING, 3);
      $xfer += $output->writeString($this->address);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->phone !== null) {
      $xfer += $output->writeFieldBegin('phone', TType::STRING, 4);
      $xfer += $output->writeString($this->phone);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->zip !== null) {
      $xfer += $output->writeFieldBegin('zip', TType::STRING, 5);
      $xfer += $output->writeString($this->zip);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->default_receiver !== null) {
      $xfer += $output->writeFieldBegin('default_receiver', TType::BOOL, 6);
      $xfer += $output->writeBool($this->default_receiver);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class UpdateReceiverInfoRsp {
  static $_TSPEC;

  public $retcode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'retcode',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['retcode'])) {
        $this->retcode = $vals['retcode'];
      }
    }
  }

  public function getName() {
    return 'UpdateReceiverInfoRsp';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->retcode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('UpdateReceiverInfoRsp');
    if ($this->retcode !== null) {
      $xfer += $output->writeFieldBegin('retcode', TType::I32, 1);
      $xfer += $output->writeI32($this->retcode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class QueryReceiverInfoReq {
  static $_TSPEC;

  public $buyer_id = null;
  public $page_no = null;
  public $page_size = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'buyer_id',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'page_no',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'page_size',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['buyer_id'])) {
        $this->buyer_id = $vals['buyer_id'];
      }
      if (isset($vals['page_no'])) {
        $this->page_no = $vals['page_no'];
      }
      if (isset($vals['page_size'])) {
        $this->page_size = $vals['page_size'];
      }
    }
  }

  public function getName() {
    return 'QueryReceiverInfoReq';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->buyer_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->page_no);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->page_size);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('QueryReceiverInfoReq');
    if ($this->buyer_id !== null) {
      $xfer += $output->writeFieldBegin('buyer_id', TType::I64, 1);
      $xfer += $output->writeI64($this->buyer_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->page_no !== null) {
      $xfer += $output->writeFieldBegin('page_no', TType::I32, 2);
      $xfer += $output->writeI32($this->page_no);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->page_size !== null) {
      $xfer += $output->writeFieldBegin('page_size', TType::I32, 3);
      $xfer += $output->writeI32($this->page_size);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ReceiverInfo {
  static $_TSPEC;

  public $receiver_info_id = null;
  public $receiver_name = null;
  public $address = null;
  public $phone = null;
  public $zip = null;
  public $default_receiver = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'receiver_info_id',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'receiver_name',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'address',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'phone',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'zip',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'default_receiver',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['receiver_info_id'])) {
        $this->receiver_info_id = $vals['receiver_info_id'];
      }
      if (isset($vals['receiver_name'])) {
        $this->receiver_name = $vals['receiver_name'];
      }
      if (isset($vals['address'])) {
        $this->address = $vals['address'];
      }
      if (isset($vals['phone'])) {
        $this->phone = $vals['phone'];
      }
      if (isset($vals['zip'])) {
        $this->zip = $vals['zip'];
      }
      if (isset($vals['default_receiver'])) {
        $this->default_receiver = $vals['default_receiver'];
      }
    }
  }

  public function getName() {
    return 'ReceiverInfo';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->receiver_info_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->receiver_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->address);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->phone);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->zip);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->default_receiver);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ReceiverInfo');
    if ($this->receiver_info_id !== null) {
      $xfer += $output->writeFieldBegin('receiver_info_id', TType::I64, 1);
      $xfer += $output->writeI64($this->receiver_info_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->receiver_name !== null) {
      $xfer += $output->writeFieldBegin('receiver_name', TType::STRING, 2);
      $xfer += $output->writeString($this->receiver_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->address !== null) {
      $xfer += $output->writeFieldBegin('address', TType::STRING, 3);
      $xfer += $output->writeString($this->address);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->phone !== null) {
      $xfer += $output->writeFieldBegin('phone', TType::STRING, 4);
      $xfer += $output->writeString($this->phone);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->zip !== null) {
      $xfer += $output->writeFieldBegin('zip', TType::STRING, 5);
      $xfer += $output->writeString($this->zip);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->default_receiver !== null) {
      $xfer += $output->writeFieldBegin('default_receiver', TType::BOOL, 6);
      $xfer += $output->writeBool($this->default_receiver);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class QueryReceiverInfoRsp {
  static $_TSPEC;

  public $retcode = null;
  public $total = null;
  public $info_list = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'retcode',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'total',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'info_list',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\xyz\mallsvr\ReceiverInfo',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['retcode'])) {
        $this->retcode = $vals['retcode'];
      }
      if (isset($vals['total'])) {
        $this->total = $vals['total'];
      }
      if (isset($vals['info_list'])) {
        $this->info_list = $vals['info_list'];
      }
    }
  }

  public function getName() {
    return 'QueryReceiverInfoRsp';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->retcode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->total);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->info_list = array();
            $_size14 = 0;
            $_etype17 = 0;
            $xfer += $input->readListBegin($_etype17, $_size14);
            for ($_i18 = 0; $_i18 < $_size14; ++$_i18)
            {
              $elem19 = null;
              $elem19 = new \xyz\mallsvr\ReceiverInfo();
              $xfer += $elem19->read($input);
              $this->info_list []= $elem19;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('QueryReceiverInfoRsp');
    if ($this->retcode !== null) {
      $xfer += $output->writeFieldBegin('retcode', TType::I32, 1);
      $xfer += $output->writeI32($this->retcode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->total !== null) {
      $xfer += $output->writeFieldBegin('total', TType::I32, 2);
      $xfer += $output->writeI32($this->total);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->info_list !== null) {
      if (!is_array($this->info_list)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('info_list', TType::LST, 3);
      {
        $output->writeListBegin(TType::STRUCT, count($this->info_list));
        {
          foreach ($this->info_list as $iter20)
          {
            $xfer += $iter20->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetReceiverInfoReq {
  static $_TSPEC;

  public $buyer_id = null;
  public $receiver_info_id = null;
  public $default_receiver = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'buyer_id',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'receiver_info_id',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'default_receiver',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['buyer_id'])) {
        $this->buyer_id = $vals['buyer_id'];
      }
      if (isset($vals['receiver_info_id'])) {
        $this->receiver_info_id = $vals['receiver_info_id'];
      }
      if (isset($vals['default_receiver'])) {
        $this->default_receiver = $vals['default_receiver'];
      }
    }
  }

  public function getName() {
    return 'GetReceiverInfoReq';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->buyer_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->receiver_info_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->default_receiver);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetReceiverInfoReq');
    if ($this->buyer_id !== null) {
      $xfer += $output->writeFieldBegin('buyer_id', TType::I64, 1);
      $xfer += $output->writeI64($this->buyer_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->receiver_info_id !== null) {
      $xfer += $output->writeFieldBegin('receiver_info_id', TType::I64, 2);
      $xfer += $output->writeI64($this->receiver_info_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->default_receiver !== null) {
      $xfer += $output->writeFieldBegin('default_receiver', TType::I32, 3);
      $xfer += $output->writeI32($this->default_receiver);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetReceiverInfoRsp {
  static $_TSPEC;

  public $retcode = null;
  public $info = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'retcode',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'info',
          'type' => TType::STRUCT,
          'class' => '\xyz\mallsvr\ReceiverInfo',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['retcode'])) {
        $this->retcode = $vals['retcode'];
      }
      if (isset($vals['info'])) {
        $this->info = $vals['info'];
      }
    }
  }

  public function getName() {
    return 'GetReceiverInfoRsp';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->retcode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->info = new \xyz\mallsvr\ReceiverInfo();
            $xfer += $this->info->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetReceiverInfoRsp');
    if ($this->retcode !== null) {
      $xfer += $output->writeFieldBegin('retcode', TType::I32, 1);
      $xfer += $output->writeI32($this->retcode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->info !== null) {
      if (!is_object($this->info)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('info', TType::STRUCT, 3);
      $xfer += $this->info->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BatchUpdateStatusReq {
  static $_TSPEC;

  public $object_status = null;
  public $order_id_list = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'object_status',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'order_id_list',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['object_status'])) {
        $this->object_status = $vals['object_status'];
      }
      if (isset($vals['order_id_list'])) {
        $this->order_id_list = $vals['order_id_list'];
      }
    }
  }

  public function getName() {
    return 'BatchUpdateStatusReq';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->object_status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->order_id_list = array();
            $_size21 = 0;
            $_etype24 = 0;
            $xfer += $input->readListBegin($_etype24, $_size21);
            for ($_i25 = 0; $_i25 < $_size21; ++$_i25)
            {
              $elem26 = null;
              $xfer += $input->readI64($elem26);
              $this->order_id_list []= $elem26;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BatchUpdateStatusReq');
    if ($this->object_status !== null) {
      $xfer += $output->writeFieldBegin('object_status', TType::I32, 1);
      $xfer += $output->writeI32($this->object_status);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->order_id_list !== null) {
      if (!is_array($this->order_id_list)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('order_id_list', TType::LST, 2);
      {
        $output->writeListBegin(TType::I64, count($this->order_id_list));
        {
          foreach ($this->order_id_list as $iter27)
          {
            $xfer += $output->writeI64($iter27);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BatchUpdateStatusRsp {
  static $_TSPEC;

  public $retcode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'retcode',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['retcode'])) {
        $this->retcode = $vals['retcode'];
      }
    }
  }

  public function getName() {
    return 'BatchUpdateStatusRsp';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->retcode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BatchUpdateStatusRsp');
    if ($this->retcode !== null) {
      $xfer += $output->writeFieldBegin('retcode', TType::I32, 1);
      $xfer += $output->writeI32($this->retcode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ExportOrderListReq {
  static $_TSPEC;

  public $goods_spu = null;
  public $status = null;
  public $page_no = null;
  public $page_size = null;
  public $start_time = null;
  public $end_time = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'goods_spu',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'status',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'page_no',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'page_size',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'start_time',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'end_time',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['goods_spu'])) {
        $this->goods_spu = $vals['goods_spu'];
      }
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['page_no'])) {
        $this->page_no = $vals['page_no'];
      }
      if (isset($vals['page_size'])) {
        $this->page_size = $vals['page_size'];
      }
      if (isset($vals['start_time'])) {
        $this->start_time = $vals['start_time'];
      }
      if (isset($vals['end_time'])) {
        $this->end_time = $vals['end_time'];
      }
    }
  }

  public function getName() {
    return 'ExportOrderListReq';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->goods_spu);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->page_no);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->page_size);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->start_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->end_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ExportOrderListReq');
    if ($this->goods_spu !== null) {
      $xfer += $output->writeFieldBegin('goods_spu', TType::I64, 1);
      $xfer += $output->writeI64($this->goods_spu);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->status !== null) {
      $xfer += $output->writeFieldBegin('status', TType::I64, 2);
      $xfer += $output->writeI64($this->status);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->page_no !== null) {
      $xfer += $output->writeFieldBegin('page_no', TType::I32, 3);
      $xfer += $output->writeI32($this->page_no);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->page_size !== null) {
      $xfer += $output->writeFieldBegin('page_size', TType::I32, 4);
      $xfer += $output->writeI32($this->page_size);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->start_time !== null) {
      $xfer += $output->writeFieldBegin('start_time', TType::I32, 5);
      $xfer += $output->writeI32($this->start_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->end_time !== null) {
      $xfer += $output->writeFieldBegin('end_time', TType::I32, 6);
      $xfer += $output->writeI32($this->end_time);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ExportOrderListRsp {
  static $_TSPEC;

  public $retcode = null;
  public $total = null;
  public $page_no = null;
  public $export_list = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'retcode',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'total',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'page_no',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'export_list',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\xyz\mallsvr\OrderDetail',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['retcode'])) {
        $this->retcode = $vals['retcode'];
      }
      if (isset($vals['total'])) {
        $this->total = $vals['total'];
      }
      if (isset($vals['page_no'])) {
        $this->page_no = $vals['page_no'];
      }
      if (isset($vals['export_list'])) {
        $this->export_list = $vals['export_list'];
      }
    }
  }

  public function getName() {
    return 'ExportOrderListRsp';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->retcode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->total);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->page_no);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::LST) {
            $this->export_list = array();
            $_size28 = 0;
            $_etype31 = 0;
            $xfer += $input->readListBegin($_etype31, $_size28);
            for ($_i32 = 0; $_i32 < $_size28; ++$_i32)
            {
              $elem33 = null;
              $elem33 = new \xyz\mallsvr\OrderDetail();
              $xfer += $elem33->read($input);
              $this->export_list []= $elem33;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ExportOrderListRsp');
    if ($this->retcode !== null) {
      $xfer += $output->writeFieldBegin('retcode', TType::I32, 1);
      $xfer += $output->writeI32($this->retcode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->total !== null) {
      $xfer += $output->writeFieldBegin('total', TType::I32, 2);
      $xfer += $output->writeI32($this->total);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->page_no !== null) {
      $xfer += $output->writeFieldBegin('page_no', TType::I32, 3);
      $xfer += $output->writeI32($this->page_no);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->export_list !== null) {
      if (!is_array($this->export_list)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('export_list', TType::LST, 4);
      {
        $output->writeListBegin(TType::STRUCT, count($this->export_list));
        {
          foreach ($this->export_list as $iter34)
          {
            $xfer += $iter34->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AddAdvertisementReq {
  static $_TSPEC;

  public $name = null;
  public $start_time = null;
  public $end_time = null;
  public $web_url = null;
  public $web_pic = null;
  public $h5_url = null;
  public $h5_pic = null;
  public $status = null;
  public $position = null;
  public $reg = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'start_time',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'end_time',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'web_url',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'web_pic',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'h5_url',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'h5_pic',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'status',
          'type' => TType::I32,
          ),
        9 => array(
          'var' => 'position',
          'type' => TType::I32,
          ),
        10 => array(
          'var' => 'reg',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['start_time'])) {
        $this->start_time = $vals['start_time'];
      }
      if (isset($vals['end_time'])) {
        $this->end_time = $vals['end_time'];
      }
      if (isset($vals['web_url'])) {
        $this->web_url = $vals['web_url'];
      }
      if (isset($vals['web_pic'])) {
        $this->web_pic = $vals['web_pic'];
      }
      if (isset($vals['h5_url'])) {
        $this->h5_url = $vals['h5_url'];
      }
      if (isset($vals['h5_pic'])) {
        $this->h5_pic = $vals['h5_pic'];
      }
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['position'])) {
        $this->position = $vals['position'];
      }
      if (isset($vals['reg'])) {
        $this->reg = $vals['reg'];
      }
    }
  }

  public function getName() {
    return 'AddAdvertisementReq';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->start_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->end_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->web_url);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->web_pic);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->h5_url);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->h5_pic);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->position);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->reg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AddAdvertisementReq');
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 1);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->start_time !== null) {
      $xfer += $output->writeFieldBegin('start_time', TType::I64, 2);
      $xfer += $output->writeI64($this->start_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->end_time !== null) {
      $xfer += $output->writeFieldBegin('end_time', TType::I64, 3);
      $xfer += $output->writeI64($this->end_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->web_url !== null) {
      $xfer += $output->writeFieldBegin('web_url', TType::STRING, 4);
      $xfer += $output->writeString($this->web_url);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->web_pic !== null) {
      $xfer += $output->writeFieldBegin('web_pic', TType::STRING, 5);
      $xfer += $output->writeString($this->web_pic);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->h5_url !== null) {
      $xfer += $output->writeFieldBegin('h5_url', TType::STRING, 6);
      $xfer += $output->writeString($this->h5_url);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->h5_pic !== null) {
      $xfer += $output->writeFieldBegin('h5_pic', TType::STRING, 7);
      $xfer += $output->writeString($this->h5_pic);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->status !== null) {
      $xfer += $output->writeFieldBegin('status', TType::I32, 8);
      $xfer += $output->writeI32($this->status);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->position !== null) {
      $xfer += $output->writeFieldBegin('position', TType::I32, 9);
      $xfer += $output->writeI32($this->position);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->reg !== null) {
      $xfer += $output->writeFieldBegin('reg', TType::STRING, 10);
      $xfer += $output->writeString($this->reg);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AddAdvertisementRsp {
  static $_TSPEC;

  public $retcode = null;
  public $ads_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'retcode',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'ads_id',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['retcode'])) {
        $this->retcode = $vals['retcode'];
      }
      if (isset($vals['ads_id'])) {
        $this->ads_id = $vals['ads_id'];
      }
    }
  }

  public function getName() {
    return 'AddAdvertisementRsp';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->retcode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->ads_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AddAdvertisementRsp');
    if ($this->retcode !== null) {
      $xfer += $output->writeFieldBegin('retcode', TType::I32, 1);
      $xfer += $output->writeI32($this->retcode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ads_id !== null) {
      $xfer += $output->writeFieldBegin('ads_id', TType::I64, 2);
      $xfer += $output->writeI64($this->ads_id);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class UpdateAdvertisementReq {
  static $_TSPEC;

  public $ads_id = null;
  public $name = null;
  public $start_time = null;
  public $end_time = null;
  public $web_url = null;
  public $web_pic = null;
  public $h5_url = null;
  public $h5_pic = null;
  public $status = null;
  public $position = null;
  public $reg = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ads_id',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'start_time',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'end_time',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'web_url',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'web_pic',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'h5_url',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'h5_pic',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'status',
          'type' => TType::I32,
          ),
        10 => array(
          'var' => 'position',
          'type' => TType::I32,
          ),
        11 => array(
          'var' => 'reg',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ads_id'])) {
        $this->ads_id = $vals['ads_id'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['start_time'])) {
        $this->start_time = $vals['start_time'];
      }
      if (isset($vals['end_time'])) {
        $this->end_time = $vals['end_time'];
      }
      if (isset($vals['web_url'])) {
        $this->web_url = $vals['web_url'];
      }
      if (isset($vals['web_pic'])) {
        $this->web_pic = $vals['web_pic'];
      }
      if (isset($vals['h5_url'])) {
        $this->h5_url = $vals['h5_url'];
      }
      if (isset($vals['h5_pic'])) {
        $this->h5_pic = $vals['h5_pic'];
      }
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['position'])) {
        $this->position = $vals['position'];
      }
      if (isset($vals['reg'])) {
        $this->reg = $vals['reg'];
      }
    }
  }

  public function getName() {
    return 'UpdateAdvertisementReq';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->ads_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->start_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->end_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->web_url);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->web_pic);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->h5_url);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->h5_pic);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->position);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->reg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('UpdateAdvertisementReq');
    if ($this->ads_id !== null) {
      $xfer += $output->writeFieldBegin('ads_id', TType::I64, 1);
      $xfer += $output->writeI64($this->ads_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 2);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->start_time !== null) {
      $xfer += $output->writeFieldBegin('start_time', TType::I64, 3);
      $xfer += $output->writeI64($this->start_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->end_time !== null) {
      $xfer += $output->writeFieldBegin('end_time', TType::I64, 4);
      $xfer += $output->writeI64($this->end_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->web_url !== null) {
      $xfer += $output->writeFieldBegin('web_url', TType::STRING, 5);
      $xfer += $output->writeString($this->web_url);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->web_pic !== null) {
      $xfer += $output->writeFieldBegin('web_pic', TType::STRING, 6);
      $xfer += $output->writeString($this->web_pic);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->h5_url !== null) {
      $xfer += $output->writeFieldBegin('h5_url', TType::STRING, 7);
      $xfer += $output->writeString($this->h5_url);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->h5_pic !== null) {
      $xfer += $output->writeFieldBegin('h5_pic', TType::STRING, 8);
      $xfer += $output->writeString($this->h5_pic);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->status !== null) {
      $xfer += $output->writeFieldBegin('status', TType::I32, 9);
      $xfer += $output->writeI32($this->status);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->position !== null) {
      $xfer += $output->writeFieldBegin('position', TType::I32, 10);
      $xfer += $output->writeI32($this->position);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->reg !== null) {
      $xfer += $output->writeFieldBegin('reg', TType::STRING, 11);
      $xfer += $output->writeString($this->reg);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class UpdateAdvertisementRsp {
  static $_TSPEC;

  public $retcode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'retcode',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['retcode'])) {
        $this->retcode = $vals['retcode'];
      }
    }
  }

  public function getName() {
    return 'UpdateAdvertisementRsp';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->retcode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('UpdateAdvertisementRsp');
    if ($this->retcode !== null) {
      $xfer += $output->writeFieldBegin('retcode', TType::I32, 1);
      $xfer += $output->writeI32($this->retcode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class DeleteAdvertisementReq {
  static $_TSPEC;

  public $ads_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ads_id',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ads_id'])) {
        $this->ads_id = $vals['ads_id'];
      }
    }
  }

  public function getName() {
    return 'DeleteAdvertisementReq';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->ads_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('DeleteAdvertisementReq');
    if ($this->ads_id !== null) {
      $xfer += $output->writeFieldBegin('ads_id', TType::I64, 1);
      $xfer += $output->writeI64($this->ads_id);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class DeleteAdvertisementRsp {
  static $_TSPEC;

  public $retcode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'retcode',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['retcode'])) {
        $this->retcode = $vals['retcode'];
      }
    }
  }

  public function getName() {
    return 'DeleteAdvertisementRsp';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->retcode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('DeleteAdvertisementRsp');
    if ($this->retcode !== null) {
      $xfer += $output->writeFieldBegin('retcode', TType::I32, 1);
      $xfer += $output->writeI32($this->retcode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class QueryAdvertisementReq {
  static $_TSPEC;

  public $ads_ids = null;
  public $name = null;
  public $status = null;
  public $start_time = null;
  public $end_time = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ads_ids',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        2 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'status',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'start_time',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'end_time',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ads_ids'])) {
        $this->ads_ids = $vals['ads_ids'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['start_time'])) {
        $this->start_time = $vals['start_time'];
      }
      if (isset($vals['end_time'])) {
        $this->end_time = $vals['end_time'];
      }
    }
  }

  public function getName() {
    return 'QueryAdvertisementReq';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->ads_ids = array();
            $_size35 = 0;
            $_etype38 = 0;
            $xfer += $input->readListBegin($_etype38, $_size35);
            for ($_i39 = 0; $_i39 < $_size35; ++$_i39)
            {
              $elem40 = null;
              $xfer += $input->readI64($elem40);
              $this->ads_ids []= $elem40;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->start_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->end_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('QueryAdvertisementReq');
    if ($this->ads_ids !== null) {
      if (!is_array($this->ads_ids)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('ads_ids', TType::LST, 1);
      {
        $output->writeListBegin(TType::I64, count($this->ads_ids));
        {
          foreach ($this->ads_ids as $iter41)
          {
            $xfer += $output->writeI64($iter41);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 2);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->status !== null) {
      $xfer += $output->writeFieldBegin('status', TType::I64, 3);
      $xfer += $output->writeI64($this->status);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->start_time !== null) {
      $xfer += $output->writeFieldBegin('start_time', TType::I64, 4);
      $xfer += $output->writeI64($this->start_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->end_time !== null) {
      $xfer += $output->writeFieldBegin('end_time', TType::I64, 5);
      $xfer += $output->writeI64($this->end_time);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AdvertisementItem {
  static $_TSPEC;

  public $ads_id = null;
  public $name = null;
  public $start_time = null;
  public $end_time = null;
  public $web_url = null;
  public $web_pic = null;
  public $h5_url = null;
  public $h5_pic = null;
  public $status = null;
  public $position = null;
  public $reg = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ads_id',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'start_time',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'end_time',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'web_url',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'web_pic',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'h5_url',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'h5_pic',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'status',
          'type' => TType::I32,
          ),
        10 => array(
          'var' => 'position',
          'type' => TType::I32,
          ),
        11 => array(
          'var' => 'reg',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ads_id'])) {
        $this->ads_id = $vals['ads_id'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['start_time'])) {
        $this->start_time = $vals['start_time'];
      }
      if (isset($vals['end_time'])) {
        $this->end_time = $vals['end_time'];
      }
      if (isset($vals['web_url'])) {
        $this->web_url = $vals['web_url'];
      }
      if (isset($vals['web_pic'])) {
        $this->web_pic = $vals['web_pic'];
      }
      if (isset($vals['h5_url'])) {
        $this->h5_url = $vals['h5_url'];
      }
      if (isset($vals['h5_pic'])) {
        $this->h5_pic = $vals['h5_pic'];
      }
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['position'])) {
        $this->position = $vals['position'];
      }
      if (isset($vals['reg'])) {
        $this->reg = $vals['reg'];
      }
    }
  }

  public function getName() {
    return 'AdvertisementItem';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->ads_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->start_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->end_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->web_url);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->web_pic);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->h5_url);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->h5_pic);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->position);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->reg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AdvertisementItem');
    if ($this->ads_id !== null) {
      $xfer += $output->writeFieldBegin('ads_id', TType::I64, 1);
      $xfer += $output->writeI64($this->ads_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 2);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->start_time !== null) {
      $xfer += $output->writeFieldBegin('start_time', TType::I64, 3);
      $xfer += $output->writeI64($this->start_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->end_time !== null) {
      $xfer += $output->writeFieldBegin('end_time', TType::I64, 4);
      $xfer += $output->writeI64($this->end_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->web_url !== null) {
      $xfer += $output->writeFieldBegin('web_url', TType::STRING, 5);
      $xfer += $output->writeString($this->web_url);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->web_pic !== null) {
      $xfer += $output->writeFieldBegin('web_pic', TType::STRING, 6);
      $xfer += $output->writeString($this->web_pic);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->h5_url !== null) {
      $xfer += $output->writeFieldBegin('h5_url', TType::STRING, 7);
      $xfer += $output->writeString($this->h5_url);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->h5_pic !== null) {
      $xfer += $output->writeFieldBegin('h5_pic', TType::STRING, 8);
      $xfer += $output->writeString($this->h5_pic);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->status !== null) {
      $xfer += $output->writeFieldBegin('status', TType::I32, 9);
      $xfer += $output->writeI32($this->status);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->position !== null) {
      $xfer += $output->writeFieldBegin('position', TType::I32, 10);
      $xfer += $output->writeI32($this->position);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->reg !== null) {
      $xfer += $output->writeFieldBegin('reg', TType::STRING, 11);
      $xfer += $output->writeString($this->reg);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class QueryAdvertisementRsp {
  static $_TSPEC;

  public $retcode = null;
  public $ads_list = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'retcode',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'ads_list',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\xyz\mallsvr\AdvertisementItem',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['retcode'])) {
        $this->retcode = $vals['retcode'];
      }
      if (isset($vals['ads_list'])) {
        $this->ads_list = $vals['ads_list'];
      }
    }
  }

  public function getName() {
    return 'QueryAdvertisementRsp';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->retcode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->ads_list = array();
            $_size42 = 0;
            $_etype45 = 0;
            $xfer += $input->readListBegin($_etype45, $_size42);
            for ($_i46 = 0; $_i46 < $_size42; ++$_i46)
            {
              $elem47 = null;
              $elem47 = new \xyz\mallsvr\AdvertisementItem();
              $xfer += $elem47->read($input);
              $this->ads_list []= $elem47;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('QueryAdvertisementRsp');
    if ($this->retcode !== null) {
      $xfer += $output->writeFieldBegin('retcode', TType::I32, 1);
      $xfer += $output->writeI32($this->retcode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ads_list !== null) {
      if (!is_array($this->ads_list)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('ads_list', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRUCT, count($this->ads_list));
        {
          foreach ($this->ads_list as $iter48)
          {
            $xfer += $iter48->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AddAuctionReq {
  static $_TSPEC;

  public $goods_group = null;
  public $goods_spu = null;
  public $goods_applyid = null;
  public $name = null;
  public $detail = null;
  public $start_time = null;
  public $end_time = null;
  public $start_price = null;
  public $expect_price = null;
  public $add_price = null;
  public $status = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'goods_group',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'goods_spu',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'goods_applyid',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'detail',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'start_time',
          'type' => TType::I64,
          ),
        7 => array(
          'var' => 'end_time',
          'type' => TType::I64,
          ),
        8 => array(
          'var' => 'start_price',
          'type' => TType::I32,
          ),
        9 => array(
          'var' => 'expect_price',
          'type' => TType::I32,
          ),
        10 => array(
          'var' => 'add_price',
          'type' => TType::I32,
          ),
        11 => array(
          'var' => 'status',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['goods_group'])) {
        $this->goods_group = $vals['goods_group'];
      }
      if (isset($vals['goods_spu'])) {
        $this->goods_spu = $vals['goods_spu'];
      }
      if (isset($vals['goods_applyid'])) {
        $this->goods_applyid = $vals['goods_applyid'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['detail'])) {
        $this->detail = $vals['detail'];
      }
      if (isset($vals['start_time'])) {
        $this->start_time = $vals['start_time'];
      }
      if (isset($vals['end_time'])) {
        $this->end_time = $vals['end_time'];
      }
      if (isset($vals['start_price'])) {
        $this->start_price = $vals['start_price'];
      }
      if (isset($vals['expect_price'])) {
        $this->expect_price = $vals['expect_price'];
      }
      if (isset($vals['add_price'])) {
        $this->add_price = $vals['add_price'];
      }
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
    }
  }

  public function getName() {
    return 'AddAuctionReq';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->goods_group);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->goods_spu);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->goods_applyid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->detail);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->start_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->end_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->start_price);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->expect_price);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->add_price);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AddAuctionReq');
    if ($this->goods_group !== null) {
      $xfer += $output->writeFieldBegin('goods_group', TType::I32, 1);
      $xfer += $output->writeI32($this->goods_group);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->goods_spu !== null) {
      $xfer += $output->writeFieldBegin('goods_spu', TType::I64, 2);
      $xfer += $output->writeI64($this->goods_spu);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->goods_applyid !== null) {
      $xfer += $output->writeFieldBegin('goods_applyid', TType::I64, 3);
      $xfer += $output->writeI64($this->goods_applyid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 4);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->detail !== null) {
      $xfer += $output->writeFieldBegin('detail', TType::STRING, 5);
      $xfer += $output->writeString($this->detail);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->start_time !== null) {
      $xfer += $output->writeFieldBegin('start_time', TType::I64, 6);
      $xfer += $output->writeI64($this->start_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->end_time !== null) {
      $xfer += $output->writeFieldBegin('end_time', TType::I64, 7);
      $xfer += $output->writeI64($this->end_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->start_price !== null) {
      $xfer += $output->writeFieldBegin('start_price', TType::I32, 8);
      $xfer += $output->writeI32($this->start_price);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->expect_price !== null) {
      $xfer += $output->writeFieldBegin('expect_price', TType::I32, 9);
      $xfer += $output->writeI32($this->expect_price);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->add_price !== null) {
      $xfer += $output->writeFieldBegin('add_price', TType::I32, 10);
      $xfer += $output->writeI32($this->add_price);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->status !== null) {
      $xfer += $output->writeFieldBegin('status', TType::I32, 11);
      $xfer += $output->writeI32($this->status);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AddAuctionRsp {
  static $_TSPEC;

  public $retcode = null;
  public $auction_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'retcode',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'auction_id',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['retcode'])) {
        $this->retcode = $vals['retcode'];
      }
      if (isset($vals['auction_id'])) {
        $this->auction_id = $vals['auction_id'];
      }
    }
  }

  public function getName() {
    return 'AddAuctionRsp';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->retcode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->auction_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AddAuctionRsp');
    if ($this->retcode !== null) {
      $xfer += $output->writeFieldBegin('retcode', TType::I32, 1);
      $xfer += $output->writeI32($this->retcode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->auction_id !== null) {
      $xfer += $output->writeFieldBegin('auction_id', TType::I64, 2);
      $xfer += $output->writeI64($this->auction_id);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class UpdateAuctionReq {
  static $_TSPEC;

  public $auction_id = null;
  public $goods_group = null;
  public $goods_spu = null;
  public $goods_applyid = null;
  public $name = null;
  public $detail = null;
  public $start_time = null;
  public $end_time = null;
  public $start_price = null;
  public $expect_price = null;
  public $add_price = null;
  public $status = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'auction_id',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'goods_group',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'goods_spu',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'goods_applyid',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'detail',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'start_time',
          'type' => TType::I64,
          ),
        8 => array(
          'var' => 'end_time',
          'type' => TType::I64,
          ),
        9 => array(
          'var' => 'start_price',
          'type' => TType::I32,
          ),
        10 => array(
          'var' => 'expect_price',
          'type' => TType::I32,
          ),
        11 => array(
          'var' => 'add_price',
          'type' => TType::I32,
          ),
        12 => array(
          'var' => 'status',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['auction_id'])) {
        $this->auction_id = $vals['auction_id'];
      }
      if (isset($vals['goods_group'])) {
        $this->goods_group = $vals['goods_group'];
      }
      if (isset($vals['goods_spu'])) {
        $this->goods_spu = $vals['goods_spu'];
      }
      if (isset($vals['goods_applyid'])) {
        $this->goods_applyid = $vals['goods_applyid'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['detail'])) {
        $this->detail = $vals['detail'];
      }
      if (isset($vals['start_time'])) {
        $this->start_time = $vals['start_time'];
      }
      if (isset($vals['end_time'])) {
        $this->end_time = $vals['end_time'];
      }
      if (isset($vals['start_price'])) {
        $this->start_price = $vals['start_price'];
      }
      if (isset($vals['expect_price'])) {
        $this->expect_price = $vals['expect_price'];
      }
      if (isset($vals['add_price'])) {
        $this->add_price = $vals['add_price'];
      }
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
    }
  }

  public function getName() {
    return 'UpdateAuctionReq';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->auction_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->goods_group);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->goods_spu);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->goods_applyid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->detail);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->start_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->end_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->start_price);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->expect_price);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->add_price);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('UpdateAuctionReq');
    if ($this->auction_id !== null) {
      $xfer += $output->writeFieldBegin('auction_id', TType::I64, 1);
      $xfer += $output->writeI64($this->auction_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->goods_group !== null) {
      $xfer += $output->writeFieldBegin('goods_group', TType::I32, 2);
      $xfer += $output->writeI32($this->goods_group);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->goods_spu !== null) {
      $xfer += $output->writeFieldBegin('goods_spu', TType::I64, 3);
      $xfer += $output->writeI64($this->goods_spu);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->goods_applyid !== null) {
      $xfer += $output->writeFieldBegin('goods_applyid', TType::I64, 4);
      $xfer += $output->writeI64($this->goods_applyid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 5);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->detail !== null) {
      $xfer += $output->writeFieldBegin('detail', TType::STRING, 6);
      $xfer += $output->writeString($this->detail);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->start_time !== null) {
      $xfer += $output->writeFieldBegin('start_time', TType::I64, 7);
      $xfer += $output->writeI64($this->start_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->end_time !== null) {
      $xfer += $output->writeFieldBegin('end_time', TType::I64, 8);
      $xfer += $output->writeI64($this->end_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->start_price !== null) {
      $xfer += $output->writeFieldBegin('start_price', TType::I32, 9);
      $xfer += $output->writeI32($this->start_price);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->expect_price !== null) {
      $xfer += $output->writeFieldBegin('expect_price', TType::I32, 10);
      $xfer += $output->writeI32($this->expect_price);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->add_price !== null) {
      $xfer += $output->writeFieldBegin('add_price', TType::I32, 11);
      $xfer += $output->writeI32($this->add_price);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->status !== null) {
      $xfer += $output->writeFieldBegin('status', TType::I32, 12);
      $xfer += $output->writeI32($this->status);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class UpdateAuctionRsp {
  static $_TSPEC;

  public $retcode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'retcode',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['retcode'])) {
        $this->retcode = $vals['retcode'];
      }
    }
  }

  public function getName() {
    return 'UpdateAuctionRsp';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->retcode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('UpdateAuctionRsp');
    if ($this->retcode !== null) {
      $xfer += $output->writeFieldBegin('retcode', TType::I32, 1);
      $xfer += $output->writeI32($this->retcode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class DeleteAuctionReq {
  static $_TSPEC;

  public $auction_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'auction_id',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['auction_id'])) {
        $this->auction_id = $vals['auction_id'];
      }
    }
  }

  public function getName() {
    return 'DeleteAuctionReq';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->auction_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('DeleteAuctionReq');
    if ($this->auction_id !== null) {
      $xfer += $output->writeFieldBegin('auction_id', TType::I64, 1);
      $xfer += $output->writeI64($this->auction_id);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class DeleteAuctionRsp {
  static $_TSPEC;

  public $retcode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'retcode',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['retcode'])) {
        $this->retcode = $vals['retcode'];
      }
    }
  }

  public function getName() {
    return 'DeleteAuctionRsp';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->retcode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('DeleteAuctionRsp');
    if ($this->retcode !== null) {
      $xfer += $output->writeFieldBegin('retcode', TType::I32, 1);
      $xfer += $output->writeI32($this->retcode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class QueryAuctionReq {
  static $_TSPEC;

  public $auction_ids = null;
  public $name = null;
  public $status = null;
  public $start_time = null;
  public $end_time = null;
  public $need_goods = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'auction_ids',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        2 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'status',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'start_time',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'end_time',
          'type' => TType::I64,
          ),
        6 => array(
          'var' => 'need_goods',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['auction_ids'])) {
        $this->auction_ids = $vals['auction_ids'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['start_time'])) {
        $this->start_time = $vals['start_time'];
      }
      if (isset($vals['end_time'])) {
        $this->end_time = $vals['end_time'];
      }
      if (isset($vals['need_goods'])) {
        $this->need_goods = $vals['need_goods'];
      }
    }
  }

  public function getName() {
    return 'QueryAuctionReq';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->auction_ids = array();
            $_size49 = 0;
            $_etype52 = 0;
            $xfer += $input->readListBegin($_etype52, $_size49);
            for ($_i53 = 0; $_i53 < $_size49; ++$_i53)
            {
              $elem54 = null;
              $xfer += $input->readI64($elem54);
              $this->auction_ids []= $elem54;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->start_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->end_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->need_goods);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('QueryAuctionReq');
    if ($this->auction_ids !== null) {
      if (!is_array($this->auction_ids)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('auction_ids', TType::LST, 1);
      {
        $output->writeListBegin(TType::I64, count($this->auction_ids));
        {
          foreach ($this->auction_ids as $iter55)
          {
            $xfer += $output->writeI64($iter55);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 2);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->status !== null) {
      $xfer += $output->writeFieldBegin('status', TType::I64, 3);
      $xfer += $output->writeI64($this->status);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->start_time !== null) {
      $xfer += $output->writeFieldBegin('start_time', TType::I64, 4);
      $xfer += $output->writeI64($this->start_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->end_time !== null) {
      $xfer += $output->writeFieldBegin('end_time', TType::I64, 5);
      $xfer += $output->writeI64($this->end_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->need_goods !== null) {
      $xfer += $output->writeFieldBegin('need_goods', TType::I32, 6);
      $xfer += $output->writeI32($this->need_goods);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AuctionItem {
  static $_TSPEC;

  public $auction_id = null;
  public $goods_group = null;
  public $goods_spu = null;
  public $goods_applyid = null;
  public $name = null;
  public $detail = null;
  public $start_time = null;
  public $end_time = null;
  public $start_price = null;
  public $expect_price = null;
  public $add_price = null;
  public $max_price = null;
  public $status = null;
  public $goods_type = null;
  public $goods_item = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'auction_id',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'goods_group',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'goods_spu',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'goods_applyid',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'detail',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'start_time',
          'type' => TType::I64,
          ),
        8 => array(
          'var' => 'end_time',
          'type' => TType::I64,
          ),
        9 => array(
          'var' => 'start_price',
          'type' => TType::I32,
          ),
        10 => array(
          'var' => 'expect_price',
          'type' => TType::I32,
          ),
        11 => array(
          'var' => 'add_price',
          'type' => TType::I32,
          ),
        12 => array(
          'var' => 'max_price',
          'type' => TType::I32,
          ),
        13 => array(
          'var' => 'status',
          'type' => TType::I32,
          ),
        14 => array(
          'var' => 'goods_type',
          'type' => TType::I32,
          ),
        15 => array(
          'var' => 'goods_item',
          'type' => TType::STRUCT,
          'class' => '\xyz\mallsvr\GoodsItem',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['auction_id'])) {
        $this->auction_id = $vals['auction_id'];
      }
      if (isset($vals['goods_group'])) {
        $this->goods_group = $vals['goods_group'];
      }
      if (isset($vals['goods_spu'])) {
        $this->goods_spu = $vals['goods_spu'];
      }
      if (isset($vals['goods_applyid'])) {
        $this->goods_applyid = $vals['goods_applyid'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['detail'])) {
        $this->detail = $vals['detail'];
      }
      if (isset($vals['start_time'])) {
        $this->start_time = $vals['start_time'];
      }
      if (isset($vals['end_time'])) {
        $this->end_time = $vals['end_time'];
      }
      if (isset($vals['start_price'])) {
        $this->start_price = $vals['start_price'];
      }
      if (isset($vals['expect_price'])) {
        $this->expect_price = $vals['expect_price'];
      }
      if (isset($vals['add_price'])) {
        $this->add_price = $vals['add_price'];
      }
      if (isset($vals['max_price'])) {
        $this->max_price = $vals['max_price'];
      }
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['goods_type'])) {
        $this->goods_type = $vals['goods_type'];
      }
      if (isset($vals['goods_item'])) {
        $this->goods_item = $vals['goods_item'];
      }
    }
  }

  public function getName() {
    return 'AuctionItem';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->auction_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->goods_group);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->goods_spu);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->goods_applyid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->detail);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->start_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->end_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->start_price);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->expect_price);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->add_price);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->max_price);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->goods_type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::STRUCT) {
            $this->goods_item = new \xyz\mallsvr\GoodsItem();
            $xfer += $this->goods_item->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AuctionItem');
    if ($this->auction_id !== null) {
      $xfer += $output->writeFieldBegin('auction_id', TType::I64, 1);
      $xfer += $output->writeI64($this->auction_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->goods_group !== null) {
      $xfer += $output->writeFieldBegin('goods_group', TType::I32, 2);
      $xfer += $output->writeI32($this->goods_group);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->goods_spu !== null) {
      $xfer += $output->writeFieldBegin('goods_spu', TType::I64, 3);
      $xfer += $output->writeI64($this->goods_spu);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->goods_applyid !== null) {
      $xfer += $output->writeFieldBegin('goods_applyid', TType::I64, 4);
      $xfer += $output->writeI64($this->goods_applyid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 5);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->detail !== null) {
      $xfer += $output->writeFieldBegin('detail', TType::STRING, 6);
      $xfer += $output->writeString($this->detail);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->start_time !== null) {
      $xfer += $output->writeFieldBegin('start_time', TType::I64, 7);
      $xfer += $output->writeI64($this->start_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->end_time !== null) {
      $xfer += $output->writeFieldBegin('end_time', TType::I64, 8);
      $xfer += $output->writeI64($this->end_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->start_price !== null) {
      $xfer += $output->writeFieldBegin('start_price', TType::I32, 9);
      $xfer += $output->writeI32($this->start_price);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->expect_price !== null) {
      $xfer += $output->writeFieldBegin('expect_price', TType::I32, 10);
      $xfer += $output->writeI32($this->expect_price);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->add_price !== null) {
      $xfer += $output->writeFieldBegin('add_price', TType::I32, 11);
      $xfer += $output->writeI32($this->add_price);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->max_price !== null) {
      $xfer += $output->writeFieldBegin('max_price', TType::I32, 12);
      $xfer += $output->writeI32($this->max_price);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->status !== null) {
      $xfer += $output->writeFieldBegin('status', TType::I32, 13);
      $xfer += $output->writeI32($this->status);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->goods_type !== null) {
      $xfer += $output->writeFieldBegin('goods_type', TType::I32, 14);
      $xfer += $output->writeI32($this->goods_type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->goods_item !== null) {
      if (!is_object($this->goods_item)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('goods_item', TType::STRUCT, 15);
      $xfer += $this->goods_item->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class QueryAuctionRsp {
  static $_TSPEC;

  public $retcode = null;
  public $auction_list = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'retcode',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'auction_list',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\xyz\mallsvr\AuctionItem',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['retcode'])) {
        $this->retcode = $vals['retcode'];
      }
      if (isset($vals['auction_list'])) {
        $this->auction_list = $vals['auction_list'];
      }
    }
  }

  public function getName() {
    return 'QueryAuctionRsp';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->retcode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->auction_list = array();
            $_size56 = 0;
            $_etype59 = 0;
            $xfer += $input->readListBegin($_etype59, $_size56);
            for ($_i60 = 0; $_i60 < $_size56; ++$_i60)
            {
              $elem61 = null;
              $elem61 = new \xyz\mallsvr\AuctionItem();
              $xfer += $elem61->read($input);
              $this->auction_list []= $elem61;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('QueryAuctionRsp');
    if ($this->retcode !== null) {
      $xfer += $output->writeFieldBegin('retcode', TType::I32, 1);
      $xfer += $output->writeI32($this->retcode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->auction_list !== null) {
      if (!is_array($this->auction_list)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('auction_list', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRUCT, count($this->auction_list));
        {
          foreach ($this->auction_list as $iter62)
          {
            $xfer += $iter62->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class UserAuctionReq {
  static $_TSPEC;

  public $auction_id = null;
  public $payer_id = null;
  public $price = null;
  public $auction_time = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'auction_id',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'payer_id',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'price',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'auction_time',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['auction_id'])) {
        $this->auction_id = $vals['auction_id'];
      }
      if (isset($vals['payer_id'])) {
        $this->payer_id = $vals['payer_id'];
      }
      if (isset($vals['price'])) {
        $this->price = $vals['price'];
      }
      if (isset($vals['auction_time'])) {
        $this->auction_time = $vals['auction_time'];
      }
    }
  }

  public function getName() {
    return 'UserAuctionReq';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->auction_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->payer_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->price);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->auction_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('UserAuctionReq');
    if ($this->auction_id !== null) {
      $xfer += $output->writeFieldBegin('auction_id', TType::I64, 1);
      $xfer += $output->writeI64($this->auction_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->payer_id !== null) {
      $xfer += $output->writeFieldBegin('payer_id', TType::I64, 2);
      $xfer += $output->writeI64($this->payer_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->price !== null) {
      $xfer += $output->writeFieldBegin('price', TType::I64, 3);
      $xfer += $output->writeI64($this->price);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->auction_time !== null) {
      $xfer += $output->writeFieldBegin('auction_time', TType::I64, 4);
      $xfer += $output->writeI64($this->auction_time);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class UserAuctionRsp {
  static $_TSPEC;

  public $retcode = null;
  public $payer_id = null;
  public $price = null;
  public $auction_time = null;
  public $need_tip = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'retcode',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'payer_id',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'price',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'auction_time',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'need_tip',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['retcode'])) {
        $this->retcode = $vals['retcode'];
      }
      if (isset($vals['payer_id'])) {
        $this->payer_id = $vals['payer_id'];
      }
      if (isset($vals['price'])) {
        $this->price = $vals['price'];
      }
      if (isset($vals['auction_time'])) {
        $this->auction_time = $vals['auction_time'];
      }
      if (isset($vals['need_tip'])) {
        $this->need_tip = $vals['need_tip'];
      }
    }
  }

  public function getName() {
    return 'UserAuctionRsp';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->retcode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->payer_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->price);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->auction_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->need_tip);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('UserAuctionRsp');
    if ($this->retcode !== null) {
      $xfer += $output->writeFieldBegin('retcode', TType::I32, 1);
      $xfer += $output->writeI32($this->retcode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->payer_id !== null) {
      $xfer += $output->writeFieldBegin('payer_id', TType::I64, 2);
      $xfer += $output->writeI64($this->payer_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->price !== null) {
      $xfer += $output->writeFieldBegin('price', TType::I64, 3);
      $xfer += $output->writeI64($this->price);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->auction_time !== null) {
      $xfer += $output->writeFieldBegin('auction_time', TType::I64, 4);
      $xfer += $output->writeI64($this->auction_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->need_tip !== null) {
      $xfer += $output->writeFieldBegin('need_tip', TType::I32, 5);
      $xfer += $output->writeI32($this->need_tip);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class QueryUserAuctionReq {
  static $_TSPEC;

  public $auction_ids = null;
  public $payer_id = null;
  public $need_top_record = null;
  public $page_no = null;
  public $page_size = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'auction_ids',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        2 => array(
          'var' => 'payer_id',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'need_top_record',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'page_no',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'page_size',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['auction_ids'])) {
        $this->auction_ids = $vals['auction_ids'];
      }
      if (isset($vals['payer_id'])) {
        $this->payer_id = $vals['payer_id'];
      }
      if (isset($vals['need_top_record'])) {
        $this->need_top_record = $vals['need_top_record'];
      }
      if (isset($vals['page_no'])) {
        $this->page_no = $vals['page_no'];
      }
      if (isset($vals['page_size'])) {
        $this->page_size = $vals['page_size'];
      }
    }
  }

  public function getName() {
    return 'QueryUserAuctionReq';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->auction_ids = array();
            $_size63 = 0;
            $_etype66 = 0;
            $xfer += $input->readListBegin($_etype66, $_size63);
            for ($_i67 = 0; $_i67 < $_size63; ++$_i67)
            {
              $elem68 = null;
              $xfer += $input->readI64($elem68);
              $this->auction_ids []= $elem68;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->payer_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->need_top_record);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->page_no);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->page_size);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('QueryUserAuctionReq');
    if ($this->auction_ids !== null) {
      if (!is_array($this->auction_ids)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('auction_ids', TType::LST, 1);
      {
        $output->writeListBegin(TType::I64, count($this->auction_ids));
        {
          foreach ($this->auction_ids as $iter69)
          {
            $xfer += $output->writeI64($iter69);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->payer_id !== null) {
      $xfer += $output->writeFieldBegin('payer_id', TType::I64, 2);
      $xfer += $output->writeI64($this->payer_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->need_top_record !== null) {
      $xfer += $output->writeFieldBegin('need_top_record', TType::I32, 3);
      $xfer += $output->writeI32($this->need_top_record);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->page_no !== null) {
      $xfer += $output->writeFieldBegin('page_no', TType::I32, 4);
      $xfer += $output->writeI32($this->page_no);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->page_size !== null) {
      $xfer += $output->writeFieldBegin('page_size', TType::I32, 5);
      $xfer += $output->writeI32($this->page_size);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AuctionRecordItem {
  static $_TSPEC;

  public $payer_id = null;
  public $auction_time = null;
  public $price = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'payer_id',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'auction_time',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'price',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['payer_id'])) {
        $this->payer_id = $vals['payer_id'];
      }
      if (isset($vals['auction_time'])) {
        $this->auction_time = $vals['auction_time'];
      }
      if (isset($vals['price'])) {
        $this->price = $vals['price'];
      }
    }
  }

  public function getName() {
    return 'AuctionRecordItem';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->payer_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->auction_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->price);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AuctionRecordItem');
    if ($this->payer_id !== null) {
      $xfer += $output->writeFieldBegin('payer_id', TType::I64, 1);
      $xfer += $output->writeI64($this->payer_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->auction_time !== null) {
      $xfer += $output->writeFieldBegin('auction_time', TType::I64, 2);
      $xfer += $output->writeI64($this->auction_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->price !== null) {
      $xfer += $output->writeFieldBegin('price', TType::I32, 3);
      $xfer += $output->writeI32($this->price);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class QueryUserAuctionRsp {
  static $_TSPEC;

  public $retcode = null;
  public $record_num_list = null;
  public $top_record_list = null;
  public $user_record_list = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'retcode',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'record_num_list',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::I32,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::I32,
            ),
          ),
        3 => array(
          'var' => 'top_record_list',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::LST,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
              'type' => TType::STRUCT,
              'class' => '\xyz\mallsvr\AuctionRecordItem',
              ),
            ),
          ),
        4 => array(
          'var' => 'user_record_list',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::LST,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
              'type' => TType::STRUCT,
              'class' => '\xyz\mallsvr\AuctionRecordItem',
              ),
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['retcode'])) {
        $this->retcode = $vals['retcode'];
      }
      if (isset($vals['record_num_list'])) {
        $this->record_num_list = $vals['record_num_list'];
      }
      if (isset($vals['top_record_list'])) {
        $this->top_record_list = $vals['top_record_list'];
      }
      if (isset($vals['user_record_list'])) {
        $this->user_record_list = $vals['user_record_list'];
      }
    }
  }

  public function getName() {
    return 'QueryUserAuctionRsp';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->retcode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::MAP) {
            $this->record_num_list = array();
            $_size70 = 0;
            $_ktype71 = 0;
            $_vtype72 = 0;
            $xfer += $input->readMapBegin($_ktype71, $_vtype72, $_size70);
            for ($_i74 = 0; $_i74 < $_size70; ++$_i74)
            {
              $key75 = 0;
              $val76 = 0;
              $xfer += $input->readI64($key75);
              $xfer += $input->readI32($val76);
              $this->record_num_list[$key75] = $val76;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::MAP) {
            $this->top_record_list = array();
            $_size77 = 0;
            $_ktype78 = 0;
            $_vtype79 = 0;
            $xfer += $input->readMapBegin($_ktype78, $_vtype79, $_size77);
            for ($_i81 = 0; $_i81 < $_size77; ++$_i81)
            {
              $key82 = 0;
              $val83 = array();
              $xfer += $input->readI64($key82);
              $val83 = array();
              $_size84 = 0;
              $_etype87 = 0;
              $xfer += $input->readListBegin($_etype87, $_size84);
              for ($_i88 = 0; $_i88 < $_size84; ++$_i88)
              {
                $elem89 = null;
                $elem89 = new \xyz\mallsvr\AuctionRecordItem();
                $xfer += $elem89->read($input);
                $val83 []= $elem89;
              }
              $xfer += $input->readListEnd();
              $this->top_record_list[$key82] = $val83;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::MAP) {
            $this->user_record_list = array();
            $_size90 = 0;
            $_ktype91 = 0;
            $_vtype92 = 0;
            $xfer += $input->readMapBegin($_ktype91, $_vtype92, $_size90);
            for ($_i94 = 0; $_i94 < $_size90; ++$_i94)
            {
              $key95 = 0;
              $val96 = array();
              $xfer += $input->readI64($key95);
              $val96 = array();
              $_size97 = 0;
              $_etype100 = 0;
              $xfer += $input->readListBegin($_etype100, $_size97);
              for ($_i101 = 0; $_i101 < $_size97; ++$_i101)
              {
                $elem102 = null;
                $elem102 = new \xyz\mallsvr\AuctionRecordItem();
                $xfer += $elem102->read($input);
                $val96 []= $elem102;
              }
              $xfer += $input->readListEnd();
              $this->user_record_list[$key95] = $val96;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('QueryUserAuctionRsp');
    if ($this->retcode !== null) {
      $xfer += $output->writeFieldBegin('retcode', TType::I32, 1);
      $xfer += $output->writeI32($this->retcode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->record_num_list !== null) {
      if (!is_array($this->record_num_list)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('record_num_list', TType::MAP, 2);
      {
        $output->writeMapBegin(TType::I64, TType::I32, count($this->record_num_list));
        {
          foreach ($this->record_num_list as $kiter103 => $viter104)
          {
            $xfer += $output->writeI64($kiter103);
            $xfer += $output->writeI32($viter104);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->top_record_list !== null) {
      if (!is_array($this->top_record_list)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('top_record_list', TType::MAP, 3);
      {
        $output->writeMapBegin(TType::I64, TType::LST, count($this->top_record_list));
        {
          foreach ($this->top_record_list as $kiter105 => $viter106)
          {
            $xfer += $output->writeI64($kiter105);
            {
              $output->writeListBegin(TType::STRUCT, count($viter106));
              {
                foreach ($viter106 as $iter107)
                {
                  $xfer += $iter107->write($output);
                }
              }
              $output->writeListEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->user_record_list !== null) {
      if (!is_array($this->user_record_list)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('user_record_list', TType::MAP, 4);
      {
        $output->writeMapBegin(TType::I64, TType::LST, count($this->user_record_list));
        {
          foreach ($this->user_record_list as $kiter108 => $viter109)
          {
            $xfer += $output->writeI64($kiter108);
            {
              $output->writeListBegin(TType::STRUCT, count($viter109));
              {
                foreach ($viter109 as $iter110)
                {
                  $xfer += $iter110->write($output);
                }
              }
              $output->writeListEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AddGuessReq {
  static $_TSPEC;

  public $goods_group = null;
  public $goods_applyid = null;
  public $name = null;
  public $type = null;
  public $tip = null;
  public $start_time = null;
  public $end_time = null;
  public $question = null;
  public $answer = null;
  public $web_pic = null;
  public $h5_pic = null;
  public $price = null;
  public $status = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'goods_group',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'goods_applyid',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'type',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'tip',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'start_time',
          'type' => TType::I64,
          ),
        7 => array(
          'var' => 'end_time',
          'type' => TType::I64,
          ),
        8 => array(
          'var' => 'question',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'answer',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'web_pic',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'h5_pic',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'price',
          'type' => TType::I32,
          ),
        13 => array(
          'var' => 'status',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['goods_group'])) {
        $this->goods_group = $vals['goods_group'];
      }
      if (isset($vals['goods_applyid'])) {
        $this->goods_applyid = $vals['goods_applyid'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['tip'])) {
        $this->tip = $vals['tip'];
      }
      if (isset($vals['start_time'])) {
        $this->start_time = $vals['start_time'];
      }
      if (isset($vals['end_time'])) {
        $this->end_time = $vals['end_time'];
      }
      if (isset($vals['question'])) {
        $this->question = $vals['question'];
      }
      if (isset($vals['answer'])) {
        $this->answer = $vals['answer'];
      }
      if (isset($vals['web_pic'])) {
        $this->web_pic = $vals['web_pic'];
      }
      if (isset($vals['h5_pic'])) {
        $this->h5_pic = $vals['h5_pic'];
      }
      if (isset($vals['price'])) {
        $this->price = $vals['price'];
      }
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
    }
  }

  public function getName() {
    return 'AddGuessReq';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->goods_group);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->goods_applyid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tip);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->start_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->end_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->question);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->answer);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->web_pic);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->h5_pic);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->price);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AddGuessReq');
    if ($this->goods_group !== null) {
      $xfer += $output->writeFieldBegin('goods_group', TType::I32, 1);
      $xfer += $output->writeI32($this->goods_group);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->goods_applyid !== null) {
      $xfer += $output->writeFieldBegin('goods_applyid', TType::I64, 2);
      $xfer += $output->writeI64($this->goods_applyid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 3);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::I32, 4);
      $xfer += $output->writeI32($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tip !== null) {
      $xfer += $output->writeFieldBegin('tip', TType::STRING, 5);
      $xfer += $output->writeString($this->tip);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->start_time !== null) {
      $xfer += $output->writeFieldBegin('start_time', TType::I64, 6);
      $xfer += $output->writeI64($this->start_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->end_time !== null) {
      $xfer += $output->writeFieldBegin('end_time', TType::I64, 7);
      $xfer += $output->writeI64($this->end_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->question !== null) {
      $xfer += $output->writeFieldBegin('question', TType::STRING, 8);
      $xfer += $output->writeString($this->question);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->answer !== null) {
      $xfer += $output->writeFieldBegin('answer', TType::STRING, 9);
      $xfer += $output->writeString($this->answer);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->web_pic !== null) {
      $xfer += $output->writeFieldBegin('web_pic', TType::STRING, 10);
      $xfer += $output->writeString($this->web_pic);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->h5_pic !== null) {
      $xfer += $output->writeFieldBegin('h5_pic', TType::STRING, 11);
      $xfer += $output->writeString($this->h5_pic);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->price !== null) {
      $xfer += $output->writeFieldBegin('price', TType::I32, 12);
      $xfer += $output->writeI32($this->price);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->status !== null) {
      $xfer += $output->writeFieldBegin('status', TType::I32, 13);
      $xfer += $output->writeI32($this->status);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AddGuessRsp {
  static $_TSPEC;

  public $retcode = null;
  public $guess_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'retcode',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'guess_id',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['retcode'])) {
        $this->retcode = $vals['retcode'];
      }
      if (isset($vals['guess_id'])) {
        $this->guess_id = $vals['guess_id'];
      }
    }
  }

  public function getName() {
    return 'AddGuessRsp';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->retcode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->guess_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AddGuessRsp');
    if ($this->retcode !== null) {
      $xfer += $output->writeFieldBegin('retcode', TType::I32, 1);
      $xfer += $output->writeI32($this->retcode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->guess_id !== null) {
      $xfer += $output->writeFieldBegin('guess_id', TType::I64, 2);
      $xfer += $output->writeI64($this->guess_id);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class UpdateGuessReq {
  static $_TSPEC;

  public $guess_id = null;
  public $goods_group = null;
  public $goods_applyid = null;
  public $name = null;
  public $type = null;
  public $tip = null;
  public $start_time = null;
  public $end_time = null;
  public $question = null;
  public $answer = null;
  public $web_pic = null;
  public $h5_pic = null;
  public $price = null;
  public $status = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'guess_id',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'goods_group',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'goods_applyid',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'type',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'tip',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'start_time',
          'type' => TType::I64,
          ),
        8 => array(
          'var' => 'end_time',
          'type' => TType::I64,
          ),
        9 => array(
          'var' => 'question',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'answer',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'web_pic',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'h5_pic',
          'type' => TType::STRING,
          ),
        13 => array(
          'var' => 'price',
          'type' => TType::I32,
          ),
        14 => array(
          'var' => 'status',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['guess_id'])) {
        $this->guess_id = $vals['guess_id'];
      }
      if (isset($vals['goods_group'])) {
        $this->goods_group = $vals['goods_group'];
      }
      if (isset($vals['goods_applyid'])) {
        $this->goods_applyid = $vals['goods_applyid'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['tip'])) {
        $this->tip = $vals['tip'];
      }
      if (isset($vals['start_time'])) {
        $this->start_time = $vals['start_time'];
      }
      if (isset($vals['end_time'])) {
        $this->end_time = $vals['end_time'];
      }
      if (isset($vals['question'])) {
        $this->question = $vals['question'];
      }
      if (isset($vals['answer'])) {
        $this->answer = $vals['answer'];
      }
      if (isset($vals['web_pic'])) {
        $this->web_pic = $vals['web_pic'];
      }
      if (isset($vals['h5_pic'])) {
        $this->h5_pic = $vals['h5_pic'];
      }
      if (isset($vals['price'])) {
        $this->price = $vals['price'];
      }
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
    }
  }

  public function getName() {
    return 'UpdateGuessReq';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->guess_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->goods_group);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->goods_applyid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tip);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->start_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->end_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->question);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->answer);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->web_pic);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->h5_pic);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->price);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('UpdateGuessReq');
    if ($this->guess_id !== null) {
      $xfer += $output->writeFieldBegin('guess_id', TType::I64, 1);
      $xfer += $output->writeI64($this->guess_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->goods_group !== null) {
      $xfer += $output->writeFieldBegin('goods_group', TType::I32, 2);
      $xfer += $output->writeI32($this->goods_group);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->goods_applyid !== null) {
      $xfer += $output->writeFieldBegin('goods_applyid', TType::I64, 3);
      $xfer += $output->writeI64($this->goods_applyid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 4);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::I32, 5);
      $xfer += $output->writeI32($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tip !== null) {
      $xfer += $output->writeFieldBegin('tip', TType::STRING, 6);
      $xfer += $output->writeString($this->tip);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->start_time !== null) {
      $xfer += $output->writeFieldBegin('start_time', TType::I64, 7);
      $xfer += $output->writeI64($this->start_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->end_time !== null) {
      $xfer += $output->writeFieldBegin('end_time', TType::I64, 8);
      $xfer += $output->writeI64($this->end_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->question !== null) {
      $xfer += $output->writeFieldBegin('question', TType::STRING, 9);
      $xfer += $output->writeString($this->question);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->answer !== null) {
      $xfer += $output->writeFieldBegin('answer', TType::STRING, 10);
      $xfer += $output->writeString($this->answer);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->web_pic !== null) {
      $xfer += $output->writeFieldBegin('web_pic', TType::STRING, 11);
      $xfer += $output->writeString($this->web_pic);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->h5_pic !== null) {
      $xfer += $output->writeFieldBegin('h5_pic', TType::STRING, 12);
      $xfer += $output->writeString($this->h5_pic);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->price !== null) {
      $xfer += $output->writeFieldBegin('price', TType::I32, 13);
      $xfer += $output->writeI32($this->price);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->status !== null) {
      $xfer += $output->writeFieldBegin('status', TType::I32, 14);
      $xfer += $output->writeI32($this->status);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class UpdateGuessRsp {
  static $_TSPEC;

  public $retcode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'retcode',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['retcode'])) {
        $this->retcode = $vals['retcode'];
      }
    }
  }

  public function getName() {
    return 'UpdateGuessRsp';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->retcode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('UpdateGuessRsp');
    if ($this->retcode !== null) {
      $xfer += $output->writeFieldBegin('retcode', TType::I32, 1);
      $xfer += $output->writeI32($this->retcode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class DeleteGuessReq {
  static $_TSPEC;

  public $guess_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'guess_id',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['guess_id'])) {
        $this->guess_id = $vals['guess_id'];
      }
    }
  }

  public function getName() {
    return 'DeleteGuessReq';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->guess_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('DeleteGuessReq');
    if ($this->guess_id !== null) {
      $xfer += $output->writeFieldBegin('guess_id', TType::I64, 1);
      $xfer += $output->writeI64($this->guess_id);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class DeleteGuessRsp {
  static $_TSPEC;

  public $retcode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'retcode',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['retcode'])) {
        $this->retcode = $vals['retcode'];
      }
    }
  }

  public function getName() {
    return 'DeleteGuessRsp';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->retcode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('DeleteGuessRsp');
    if ($this->retcode !== null) {
      $xfer += $output->writeFieldBegin('retcode', TType::I32, 1);
      $xfer += $output->writeI32($this->retcode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class QueryGuessReq {
  static $_TSPEC;

  public $guess_ids = null;
  public $name = null;
  public $status = null;
  public $type = null;
  public $start_time = null;
  public $end_time = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'guess_ids',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        2 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'status',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'type',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'start_time',
          'type' => TType::I64,
          ),
        6 => array(
          'var' => 'end_time',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['guess_ids'])) {
        $this->guess_ids = $vals['guess_ids'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['start_time'])) {
        $this->start_time = $vals['start_time'];
      }
      if (isset($vals['end_time'])) {
        $this->end_time = $vals['end_time'];
      }
    }
  }

  public function getName() {
    return 'QueryGuessReq';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->guess_ids = array();
            $_size111 = 0;
            $_etype114 = 0;
            $xfer += $input->readListBegin($_etype114, $_size111);
            for ($_i115 = 0; $_i115 < $_size111; ++$_i115)
            {
              $elem116 = null;
              $xfer += $input->readI64($elem116);
              $this->guess_ids []= $elem116;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->start_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->end_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('QueryGuessReq');
    if ($this->guess_ids !== null) {
      if (!is_array($this->guess_ids)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('guess_ids', TType::LST, 1);
      {
        $output->writeListBegin(TType::I64, count($this->guess_ids));
        {
          foreach ($this->guess_ids as $iter117)
          {
            $xfer += $output->writeI64($iter117);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 2);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->status !== null) {
      $xfer += $output->writeFieldBegin('status', TType::I32, 3);
      $xfer += $output->writeI32($this->status);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::I32, 4);
      $xfer += $output->writeI32($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->start_time !== null) {
      $xfer += $output->writeFieldBegin('start_time', TType::I64, 5);
      $xfer += $output->writeI64($this->start_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->end_time !== null) {
      $xfer += $output->writeFieldBegin('end_time', TType::I64, 6);
      $xfer += $output->writeI64($this->end_time);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GuessItem {
  static $_TSPEC;

  public $guess_id = null;
  public $goods_group = null;
  public $goods_applyid = null;
  public $name = null;
  public $type = null;
  public $tip = null;
  public $start_time = null;
  public $end_time = null;
  public $question = null;
  public $answer = null;
  public $web_pic = null;
  public $h5_pic = null;
  public $price = null;
  public $status = null;
  public $goods_item = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'guess_id',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'goods_group',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'goods_applyid',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'type',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'tip',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'start_time',
          'type' => TType::I64,
          ),
        8 => array(
          'var' => 'end_time',
          'type' => TType::I64,
          ),
        9 => array(
          'var' => 'question',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'answer',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'web_pic',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'h5_pic',
          'type' => TType::STRING,
          ),
        13 => array(
          'var' => 'price',
          'type' => TType::I32,
          ),
        14 => array(
          'var' => 'status',
          'type' => TType::I32,
          ),
        15 => array(
          'var' => 'goods_item',
          'type' => TType::STRUCT,
          'class' => '\xyz\mallsvr\GoodsItem',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['guess_id'])) {
        $this->guess_id = $vals['guess_id'];
      }
      if (isset($vals['goods_group'])) {
        $this->goods_group = $vals['goods_group'];
      }
      if (isset($vals['goods_applyid'])) {
        $this->goods_applyid = $vals['goods_applyid'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['tip'])) {
        $this->tip = $vals['tip'];
      }
      if (isset($vals['start_time'])) {
        $this->start_time = $vals['start_time'];
      }
      if (isset($vals['end_time'])) {
        $this->end_time = $vals['end_time'];
      }
      if (isset($vals['question'])) {
        $this->question = $vals['question'];
      }
      if (isset($vals['answer'])) {
        $this->answer = $vals['answer'];
      }
      if (isset($vals['web_pic'])) {
        $this->web_pic = $vals['web_pic'];
      }
      if (isset($vals['h5_pic'])) {
        $this->h5_pic = $vals['h5_pic'];
      }
      if (isset($vals['price'])) {
        $this->price = $vals['price'];
      }
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['goods_item'])) {
        $this->goods_item = $vals['goods_item'];
      }
    }
  }

  public function getName() {
    return 'GuessItem';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->guess_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->goods_group);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->goods_applyid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tip);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->start_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->end_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->question);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->answer);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->web_pic);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->h5_pic);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->price);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::STRUCT) {
            $this->goods_item = new \xyz\mallsvr\GoodsItem();
            $xfer += $this->goods_item->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GuessItem');
    if ($this->guess_id !== null) {
      $xfer += $output->writeFieldBegin('guess_id', TType::I64, 1);
      $xfer += $output->writeI64($this->guess_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->goods_group !== null) {
      $xfer += $output->writeFieldBegin('goods_group', TType::I32, 2);
      $xfer += $output->writeI32($this->goods_group);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->goods_applyid !== null) {
      $xfer += $output->writeFieldBegin('goods_applyid', TType::I64, 3);
      $xfer += $output->writeI64($this->goods_applyid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 4);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::I32, 5);
      $xfer += $output->writeI32($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tip !== null) {
      $xfer += $output->writeFieldBegin('tip', TType::STRING, 6);
      $xfer += $output->writeString($this->tip);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->start_time !== null) {
      $xfer += $output->writeFieldBegin('start_time', TType::I64, 7);
      $xfer += $output->writeI64($this->start_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->end_time !== null) {
      $xfer += $output->writeFieldBegin('end_time', TType::I64, 8);
      $xfer += $output->writeI64($this->end_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->question !== null) {
      $xfer += $output->writeFieldBegin('question', TType::STRING, 9);
      $xfer += $output->writeString($this->question);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->answer !== null) {
      $xfer += $output->writeFieldBegin('answer', TType::STRING, 10);
      $xfer += $output->writeString($this->answer);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->web_pic !== null) {
      $xfer += $output->writeFieldBegin('web_pic', TType::STRING, 11);
      $xfer += $output->writeString($this->web_pic);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->h5_pic !== null) {
      $xfer += $output->writeFieldBegin('h5_pic', TType::STRING, 12);
      $xfer += $output->writeString($this->h5_pic);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->price !== null) {
      $xfer += $output->writeFieldBegin('price', TType::I32, 13);
      $xfer += $output->writeI32($this->price);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->status !== null) {
      $xfer += $output->writeFieldBegin('status', TType::I32, 14);
      $xfer += $output->writeI32($this->status);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->goods_item !== null) {
      if (!is_object($this->goods_item)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('goods_item', TType::STRUCT, 15);
      $xfer += $this->goods_item->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class QueryGuessRsp {
  static $_TSPEC;

  public $retcode = null;
  public $guess_list = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'retcode',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'guess_list',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\xyz\mallsvr\GuessItem',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['retcode'])) {
        $this->retcode = $vals['retcode'];
      }
      if (isset($vals['guess_list'])) {
        $this->guess_list = $vals['guess_list'];
      }
    }
  }

  public function getName() {
    return 'QueryGuessRsp';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->retcode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->guess_list = array();
            $_size118 = 0;
            $_etype121 = 0;
            $xfer += $input->readListBegin($_etype121, $_size118);
            for ($_i122 = 0; $_i122 < $_size118; ++$_i122)
            {
              $elem123 = null;
              $elem123 = new \xyz\mallsvr\GuessItem();
              $xfer += $elem123->read($input);
              $this->guess_list []= $elem123;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('QueryGuessRsp');
    if ($this->retcode !== null) {
      $xfer += $output->writeFieldBegin('retcode', TType::I32, 1);
      $xfer += $output->writeI32($this->retcode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->guess_list !== null) {
      if (!is_array($this->guess_list)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('guess_list', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRUCT, count($this->guess_list));
        {
          foreach ($this->guess_list as $iter124)
          {
            $xfer += $iter124->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class UserGuessReq {
  static $_TSPEC;

  public $guess_id = null;
  public $payer_id = null;
  public $answer = null;
  public $clientip = null;
  public $platform = null;
  public $desc = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'guess_id',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'payer_id',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'answer',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'clientip',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'platform',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'desc',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['guess_id'])) {
        $this->guess_id = $vals['guess_id'];
      }
      if (isset($vals['payer_id'])) {
        $this->payer_id = $vals['payer_id'];
      }
      if (isset($vals['answer'])) {
        $this->answer = $vals['answer'];
      }
      if (isset($vals['clientip'])) {
        $this->clientip = $vals['clientip'];
      }
      if (isset($vals['platform'])) {
        $this->platform = $vals['platform'];
      }
      if (isset($vals['desc'])) {
        $this->desc = $vals['desc'];
      }
    }
  }

  public function getName() {
    return 'UserGuessReq';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->guess_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->payer_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->answer);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientip);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->platform);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->desc);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('UserGuessReq');
    if ($this->guess_id !== null) {
      $xfer += $output->writeFieldBegin('guess_id', TType::I64, 1);
      $xfer += $output->writeI64($this->guess_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->payer_id !== null) {
      $xfer += $output->writeFieldBegin('payer_id', TType::I64, 2);
      $xfer += $output->writeI64($this->payer_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->answer !== null) {
      $xfer += $output->writeFieldBegin('answer', TType::STRING, 3);
      $xfer += $output->writeString($this->answer);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientip !== null) {
      $xfer += $output->writeFieldBegin('clientip', TType::STRING, 4);
      $xfer += $output->writeString($this->clientip);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->platform !== null) {
      $xfer += $output->writeFieldBegin('platform', TType::STRING, 5);
      $xfer += $output->writeString($this->platform);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->desc !== null) {
      $xfer += $output->writeFieldBegin('desc', TType::STRING, 6);
      $xfer += $output->writeString($this->desc);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class UserGuessRsp {
  static $_TSPEC;

  public $retcode = null;
  public $amount = null;
  public $balance = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'retcode',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'amount',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'balance',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['retcode'])) {
        $this->retcode = $vals['retcode'];
      }
      if (isset($vals['amount'])) {
        $this->amount = $vals['amount'];
      }
      if (isset($vals['balance'])) {
        $this->balance = $vals['balance'];
      }
    }
  }

  public function getName() {
    return 'UserGuessRsp';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->retcode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->amount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->balance);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('UserGuessRsp');
    if ($this->retcode !== null) {
      $xfer += $output->writeFieldBegin('retcode', TType::I32, 1);
      $xfer += $output->writeI32($this->retcode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->amount !== null) {
      $xfer += $output->writeFieldBegin('amount', TType::I32, 2);
      $xfer += $output->writeI32($this->amount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->balance !== null) {
      $xfer += $output->writeFieldBegin('balance', TType::I32, 3);
      $xfer += $output->writeI32($this->balance);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


