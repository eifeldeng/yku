<?php
namespace xyz\gradesvr;

/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


final class GradeErroCode {
  const ERR_SVR_GRADE_REDIS_GET = -400003002;
  const ERR_SVR_GRADE_NOMATCH = -400003003;
  const ERR_SVR_GRADE_ACTIONINFO = -400003004;
  const ERR_SVR_GRADE_HANDENCODE = -400003005;
  const ERR_SVR_GRADE_HANDINPUT = -400003006;
  const ERR_SVR_GRADE_DECODETHRIFT = -400003007;
  const ERR_SVR_GRADE_REDIS_RETURN = -400003008;
  const ERR_SVR_GRADE_IDMAP = -400003009;
  static public $__names = array(
    -400003002 => 'ERR_SVR_GRADE_REDIS_GET',
    -400003003 => 'ERR_SVR_GRADE_NOMATCH',
    -400003004 => 'ERR_SVR_GRADE_ACTIONINFO',
    -400003005 => 'ERR_SVR_GRADE_HANDENCODE',
    -400003006 => 'ERR_SVR_GRADE_HANDINPUT',
    -400003007 => 'ERR_SVR_GRADE_DECODETHRIFT',
    -400003008 => 'ERR_SVR_GRADE_REDIS_RETURN',
    -400003009 => 'ERR_SVR_GRADE_IDMAP',
  );
}

final class MqType {
  const ENUM_MQ_TYPE_REDIS = 1;
  const ENUM_MQ_TYPE_MYSQL = 2;
  static public $__names = array(
    1 => 'ENUM_MQ_TYPE_REDIS',
    2 => 'ENUM_MQ_TYPE_MYSQL',
  );
}

class GradeOperation {
  static $_TSPEC;

  public $type = null;
  public $minutes = null;
  public $maxtimes = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'type',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'minutes',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'maxtimes',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['minutes'])) {
        $this->minutes = $vals['minutes'];
      }
      if (isset($vals['maxtimes'])) {
        $this->maxtimes = $vals['maxtimes'];
      }
    }
  }

  public function getName() {
    return 'GradeOperation';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->minutes);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->maxtimes);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GradeOperation');
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::I32, 1);
      $xfer += $output->writeI32($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->minutes !== null) {
      $xfer += $output->writeFieldBegin('minutes', TType::I32, 2);
      $xfer += $output->writeI32($this->minutes);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->maxtimes !== null) {
      $xfer += $output->writeFieldBegin('maxtimes', TType::I32, 3);
      $xfer += $output->writeI32($this->maxtimes);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GradeMqUserScoreRedis {
  static $_TSPEC;

  public $index = null;
  public $keys = null;
  public $inc_values = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'index',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'keys',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        3 => array(
          'var' => 'inc_values',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['index'])) {
        $this->index = $vals['index'];
      }
      if (isset($vals['keys'])) {
        $this->keys = $vals['keys'];
      }
      if (isset($vals['inc_values'])) {
        $this->inc_values = $vals['inc_values'];
      }
    }
  }

  public function getName() {
    return 'GradeMqUserScoreRedis';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->index);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->keys = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readListBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $xfer += $input->readString($elem5);
              $this->keys []= $elem5;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->inc_values = array();
            $_size6 = 0;
            $_etype9 = 0;
            $xfer += $input->readListBegin($_etype9, $_size6);
            for ($_i10 = 0; $_i10 < $_size6; ++$_i10)
            {
              $elem11 = null;
              $xfer += $input->readI64($elem11);
              $this->inc_values []= $elem11;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GradeMqUserScoreRedis');
    if ($this->index !== null) {
      $xfer += $output->writeFieldBegin('index', TType::I32, 1);
      $xfer += $output->writeI32($this->index);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->keys !== null) {
      if (!is_array($this->keys)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('keys', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRING, count($this->keys));
        {
          foreach ($this->keys as $iter12)
          {
            $xfer += $output->writeString($iter12);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->inc_values !== null) {
      if (!is_array($this->inc_values)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('inc_values', TType::LST, 3);
      {
        $output->writeListBegin(TType::I64, count($this->inc_values));
        {
          foreach ($this->inc_values as $iter13)
          {
            $xfer += $output->writeI64($iter13);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GradeMqUserScoreMysql {
  static $_TSPEC;

  public $mysql = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'mysql',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['mysql'])) {
        $this->mysql = $vals['mysql'];
      }
    }
  }

  public function getName() {
    return 'GradeMqUserScoreMysql';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->mysql = array();
            $_size14 = 0;
            $_etype17 = 0;
            $xfer += $input->readListBegin($_etype17, $_size14);
            for ($_i18 = 0; $_i18 < $_size14; ++$_i18)
            {
              $elem19 = null;
              $xfer += $input->readString($elem19);
              $this->mysql []= $elem19;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GradeMqUserScoreMysql');
    if ($this->mysql !== null) {
      if (!is_array($this->mysql)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('mysql', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->mysql));
        {
          foreach ($this->mysql as $iter20)
          {
            $xfer += $output->writeString($iter20);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GradeMq {
  static $_TSPEC;

  public $type = null;
  public $data = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'type',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'data',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['data'])) {
        $this->data = $vals['data'];
      }
    }
  }

  public function getName() {
    return 'GradeMq';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->data);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GradeMq');
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::I32, 1);
      $xfer += $output->writeI32($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->data !== null) {
      $xfer += $output->writeFieldBegin('data', TType::STRING, 2);
      $xfer += $output->writeString($this->data);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GradeInfo {
  static $_TSPEC;

  public $uid = null;
  public $grade = null;
  public $score = null;
  public $upgrade_score = null;
  public $today_score = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'uid',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'grade',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'score',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'upgrade_score',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'today_score',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['uid'])) {
        $this->uid = $vals['uid'];
      }
      if (isset($vals['grade'])) {
        $this->grade = $vals['grade'];
      }
      if (isset($vals['score'])) {
        $this->score = $vals['score'];
      }
      if (isset($vals['upgrade_score'])) {
        $this->upgrade_score = $vals['upgrade_score'];
      }
      if (isset($vals['today_score'])) {
        $this->today_score = $vals['today_score'];
      }
    }
  }

  public function getName() {
    return 'GradeInfo';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->grade);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->score);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->upgrade_score);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->today_score);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GradeInfo');
    if ($this->uid !== null) {
      $xfer += $output->writeFieldBegin('uid', TType::I64, 1);
      $xfer += $output->writeI64($this->uid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->grade !== null) {
      $xfer += $output->writeFieldBegin('grade', TType::I32, 2);
      $xfer += $output->writeI32($this->grade);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->score !== null) {
      $xfer += $output->writeFieldBegin('score', TType::I32, 3);
      $xfer += $output->writeI32($this->score);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->upgrade_score !== null) {
      $xfer += $output->writeFieldBegin('upgrade_score', TType::I32, 4);
      $xfer += $output->writeI32($this->upgrade_score);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->today_score !== null) {
      $xfer += $output->writeFieldBegin('today_score', TType::I32, 5);
      $xfer += $output->writeI32($this->today_score);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetGradeRsp {
  static $_TSPEC;

  public $retcode = null;
  public $gradeinfo = null;
  public $today_max_score = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'retcode',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'gradeinfo',
          'type' => TType::STRUCT,
          'class' => '\xyz\gradesvr\GradeInfo',
          ),
        3 => array(
          'var' => 'today_max_score',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['retcode'])) {
        $this->retcode = $vals['retcode'];
      }
      if (isset($vals['gradeinfo'])) {
        $this->gradeinfo = $vals['gradeinfo'];
      }
      if (isset($vals['today_max_score'])) {
        $this->today_max_score = $vals['today_max_score'];
      }
    }
  }

  public function getName() {
    return 'GetGradeRsp';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->retcode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->gradeinfo = new \xyz\gradesvr\GradeInfo();
            $xfer += $this->gradeinfo->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->today_max_score);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetGradeRsp');
    if ($this->retcode !== null) {
      $xfer += $output->writeFieldBegin('retcode', TType::I32, 1);
      $xfer += $output->writeI32($this->retcode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->gradeinfo !== null) {
      if (!is_object($this->gradeinfo)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('gradeinfo', TType::STRUCT, 2);
      $xfer += $this->gradeinfo->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->today_max_score !== null) {
      $xfer += $output->writeFieldBegin('today_max_score', TType::I32, 3);
      $xfer += $output->writeI32($this->today_max_score);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BatchGetGradeRsp {
  static $_TSPEC;

  public $retcode = null;
  public $gradeinfo_list = null;
  public $today_max_score = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'retcode',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'gradeinfo_list',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\xyz\gradesvr\GradeInfo',
            ),
          ),
        3 => array(
          'var' => 'today_max_score',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['retcode'])) {
        $this->retcode = $vals['retcode'];
      }
      if (isset($vals['gradeinfo_list'])) {
        $this->gradeinfo_list = $vals['gradeinfo_list'];
      }
      if (isset($vals['today_max_score'])) {
        $this->today_max_score = $vals['today_max_score'];
      }
    }
  }

  public function getName() {
    return 'BatchGetGradeRsp';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->retcode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->gradeinfo_list = array();
            $_size21 = 0;
            $_etype24 = 0;
            $xfer += $input->readListBegin($_etype24, $_size21);
            for ($_i25 = 0; $_i25 < $_size21; ++$_i25)
            {
              $elem26 = null;
              $elem26 = new \xyz\gradesvr\GradeInfo();
              $xfer += $elem26->read($input);
              $this->gradeinfo_list []= $elem26;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->today_max_score);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BatchGetGradeRsp');
    if ($this->retcode !== null) {
      $xfer += $output->writeFieldBegin('retcode', TType::I32, 1);
      $xfer += $output->writeI32($this->retcode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->gradeinfo_list !== null) {
      if (!is_array($this->gradeinfo_list)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('gradeinfo_list', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRUCT, count($this->gradeinfo_list));
        {
          foreach ($this->gradeinfo_list as $iter27)
          {
            $xfer += $iter27->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->today_max_score !== null) {
      $xfer += $output->writeFieldBegin('today_max_score', TType::I32, 3);
      $xfer += $output->writeI32($this->today_max_score);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class VipGradeInfo {
  static $_TSPEC;

  public $ytid = null;
  public $vip_grade = null;
  public $vip_score = null;
  public $vip_upgrade_score = null;
  public $vip_today_speed = null;
  public $vip_type = null;
  public $vip_year = null;
  public $vip_mon = null;
  public $vip_expire = null;
  public $vip_year_expire = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ytid',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'vip_grade',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'vip_score',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'vip_upgrade_score',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'vip_today_speed',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'vip_type',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'vip_year',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'vip_mon',
          'type' => TType::I32,
          ),
        9 => array(
          'var' => 'vip_expire',
          'type' => TType::I32,
          ),
        10 => array(
          'var' => 'vip_year_expire',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ytid'])) {
        $this->ytid = $vals['ytid'];
      }
      if (isset($vals['vip_grade'])) {
        $this->vip_grade = $vals['vip_grade'];
      }
      if (isset($vals['vip_score'])) {
        $this->vip_score = $vals['vip_score'];
      }
      if (isset($vals['vip_upgrade_score'])) {
        $this->vip_upgrade_score = $vals['vip_upgrade_score'];
      }
      if (isset($vals['vip_today_speed'])) {
        $this->vip_today_speed = $vals['vip_today_speed'];
      }
      if (isset($vals['vip_type'])) {
        $this->vip_type = $vals['vip_type'];
      }
      if (isset($vals['vip_year'])) {
        $this->vip_year = $vals['vip_year'];
      }
      if (isset($vals['vip_mon'])) {
        $this->vip_mon = $vals['vip_mon'];
      }
      if (isset($vals['vip_expire'])) {
        $this->vip_expire = $vals['vip_expire'];
      }
      if (isset($vals['vip_year_expire'])) {
        $this->vip_year_expire = $vals['vip_year_expire'];
      }
    }
  }

  public function getName() {
    return 'VipGradeInfo';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->ytid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->vip_grade);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->vip_score);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->vip_upgrade_score);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->vip_today_speed);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->vip_type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->vip_year);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->vip_mon);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->vip_expire);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->vip_year_expire);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('VipGradeInfo');
    if ($this->ytid !== null) {
      $xfer += $output->writeFieldBegin('ytid', TType::I64, 1);
      $xfer += $output->writeI64($this->ytid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->vip_grade !== null) {
      $xfer += $output->writeFieldBegin('vip_grade', TType::I32, 2);
      $xfer += $output->writeI32($this->vip_grade);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->vip_score !== null) {
      $xfer += $output->writeFieldBegin('vip_score', TType::I32, 3);
      $xfer += $output->writeI32($this->vip_score);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->vip_upgrade_score !== null) {
      $xfer += $output->writeFieldBegin('vip_upgrade_score', TType::I32, 4);
      $xfer += $output->writeI32($this->vip_upgrade_score);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->vip_today_speed !== null) {
      $xfer += $output->writeFieldBegin('vip_today_speed', TType::I32, 5);
      $xfer += $output->writeI32($this->vip_today_speed);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->vip_type !== null) {
      $xfer += $output->writeFieldBegin('vip_type', TType::I32, 6);
      $xfer += $output->writeI32($this->vip_type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->vip_year !== null) {
      $xfer += $output->writeFieldBegin('vip_year', TType::I32, 7);
      $xfer += $output->writeI32($this->vip_year);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->vip_mon !== null) {
      $xfer += $output->writeFieldBegin('vip_mon', TType::I32, 8);
      $xfer += $output->writeI32($this->vip_mon);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->vip_expire !== null) {
      $xfer += $output->writeFieldBegin('vip_expire', TType::I32, 9);
      $xfer += $output->writeI32($this->vip_expire);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->vip_year_expire !== null) {
      $xfer += $output->writeFieldBegin('vip_year_expire', TType::I32, 10);
      $xfer += $output->writeI32($this->vip_year_expire);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetVipGradeRsp {
  static $_TSPEC;

  public $retcode = null;
  public $vip_gradeinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'retcode',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'vip_gradeinfo',
          'type' => TType::STRUCT,
          'class' => '\xyz\gradesvr\VipGradeInfo',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['retcode'])) {
        $this->retcode = $vals['retcode'];
      }
      if (isset($vals['vip_gradeinfo'])) {
        $this->vip_gradeinfo = $vals['vip_gradeinfo'];
      }
    }
  }

  public function getName() {
    return 'GetVipGradeRsp';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->retcode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->vip_gradeinfo = new \xyz\gradesvr\VipGradeInfo();
            $xfer += $this->vip_gradeinfo->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetVipGradeRsp');
    if ($this->retcode !== null) {
      $xfer += $output->writeFieldBegin('retcode', TType::I32, 1);
      $xfer += $output->writeI32($this->retcode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->vip_gradeinfo !== null) {
      if (!is_object($this->vip_gradeinfo)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('vip_gradeinfo', TType::STRUCT, 2);
      $xfer += $this->vip_gradeinfo->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BatchGetVipGradeRsp {
  static $_TSPEC;

  public $retcode = null;
  public $vip_gradeinfo_list = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'retcode',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'vip_gradeinfo_list',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\xyz\gradesvr\VipGradeInfo',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['retcode'])) {
        $this->retcode = $vals['retcode'];
      }
      if (isset($vals['vip_gradeinfo_list'])) {
        $this->vip_gradeinfo_list = $vals['vip_gradeinfo_list'];
      }
    }
  }

  public function getName() {
    return 'BatchGetVipGradeRsp';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->retcode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->vip_gradeinfo_list = array();
            $_size28 = 0;
            $_etype31 = 0;
            $xfer += $input->readListBegin($_etype31, $_size28);
            for ($_i32 = 0; $_i32 < $_size28; ++$_i32)
            {
              $elem33 = null;
              $elem33 = new \xyz\gradesvr\VipGradeInfo();
              $xfer += $elem33->read($input);
              $this->vip_gradeinfo_list []= $elem33;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BatchGetVipGradeRsp');
    if ($this->retcode !== null) {
      $xfer += $output->writeFieldBegin('retcode', TType::I32, 1);
      $xfer += $output->writeI32($this->retcode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->vip_gradeinfo_list !== null) {
      if (!is_array($this->vip_gradeinfo_list)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('vip_gradeinfo_list', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRUCT, count($this->vip_gradeinfo_list));
        {
          foreach ($this->vip_gradeinfo_list as $iter34)
          {
            $xfer += $iter34->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetAllGradeRsp {
  static $_TSPEC;

  public $retcode = null;
  public $gradeinfo = null;
  public $today_max_score = null;
  public $vip_gradeinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'retcode',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'gradeinfo',
          'type' => TType::STRUCT,
          'class' => '\xyz\gradesvr\GradeInfo',
          ),
        3 => array(
          'var' => 'today_max_score',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'vip_gradeinfo',
          'type' => TType::STRUCT,
          'class' => '\xyz\gradesvr\VipGradeInfo',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['retcode'])) {
        $this->retcode = $vals['retcode'];
      }
      if (isset($vals['gradeinfo'])) {
        $this->gradeinfo = $vals['gradeinfo'];
      }
      if (isset($vals['today_max_score'])) {
        $this->today_max_score = $vals['today_max_score'];
      }
      if (isset($vals['vip_gradeinfo'])) {
        $this->vip_gradeinfo = $vals['vip_gradeinfo'];
      }
    }
  }

  public function getName() {
    return 'GetAllGradeRsp';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->retcode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->gradeinfo = new \xyz\gradesvr\GradeInfo();
            $xfer += $this->gradeinfo->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->today_max_score);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->vip_gradeinfo = new \xyz\gradesvr\VipGradeInfo();
            $xfer += $this->vip_gradeinfo->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetAllGradeRsp');
    if ($this->retcode !== null) {
      $xfer += $output->writeFieldBegin('retcode', TType::I32, 1);
      $xfer += $output->writeI32($this->retcode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->gradeinfo !== null) {
      if (!is_object($this->gradeinfo)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('gradeinfo', TType::STRUCT, 2);
      $xfer += $this->gradeinfo->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->today_max_score !== null) {
      $xfer += $output->writeFieldBegin('today_max_score', TType::I32, 3);
      $xfer += $output->writeI32($this->today_max_score);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->vip_gradeinfo !== null) {
      if (!is_object($this->vip_gradeinfo)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('vip_gradeinfo', TType::STRUCT, 4);
      $xfer += $this->vip_gradeinfo->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AllGradeInfo {
  static $_TSPEC;

  public $gradeinfo = null;
  public $vip_gradeinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'gradeinfo',
          'type' => TType::STRUCT,
          'class' => '\xyz\gradesvr\GradeInfo',
          ),
        2 => array(
          'var' => 'vip_gradeinfo',
          'type' => TType::STRUCT,
          'class' => '\xyz\gradesvr\VipGradeInfo',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['gradeinfo'])) {
        $this->gradeinfo = $vals['gradeinfo'];
      }
      if (isset($vals['vip_gradeinfo'])) {
        $this->vip_gradeinfo = $vals['vip_gradeinfo'];
      }
    }
  }

  public function getName() {
    return 'AllGradeInfo';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->gradeinfo = new \xyz\gradesvr\GradeInfo();
            $xfer += $this->gradeinfo->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->vip_gradeinfo = new \xyz\gradesvr\VipGradeInfo();
            $xfer += $this->vip_gradeinfo->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AllGradeInfo');
    if ($this->gradeinfo !== null) {
      if (!is_object($this->gradeinfo)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('gradeinfo', TType::STRUCT, 1);
      $xfer += $this->gradeinfo->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->vip_gradeinfo !== null) {
      if (!is_object($this->vip_gradeinfo)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('vip_gradeinfo', TType::STRUCT, 2);
      $xfer += $this->vip_gradeinfo->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BatchGetAllGradeRsp {
  static $_TSPEC;

  public $retcode = null;
  public $all_gradeinfo_list = null;
  public $today_max_score = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'retcode',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'all_gradeinfo_list',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\xyz\gradesvr\AllGradeInfo',
            ),
          ),
        3 => array(
          'var' => 'today_max_score',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['retcode'])) {
        $this->retcode = $vals['retcode'];
      }
      if (isset($vals['all_gradeinfo_list'])) {
        $this->all_gradeinfo_list = $vals['all_gradeinfo_list'];
      }
      if (isset($vals['today_max_score'])) {
        $this->today_max_score = $vals['today_max_score'];
      }
    }
  }

  public function getName() {
    return 'BatchGetAllGradeRsp';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->retcode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->all_gradeinfo_list = array();
            $_size35 = 0;
            $_etype38 = 0;
            $xfer += $input->readListBegin($_etype38, $_size35);
            for ($_i39 = 0; $_i39 < $_size35; ++$_i39)
            {
              $elem40 = null;
              $elem40 = new \xyz\gradesvr\AllGradeInfo();
              $xfer += $elem40->read($input);
              $this->all_gradeinfo_list []= $elem40;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->today_max_score);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BatchGetAllGradeRsp');
    if ($this->retcode !== null) {
      $xfer += $output->writeFieldBegin('retcode', TType::I32, 1);
      $xfer += $output->writeI32($this->retcode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->all_gradeinfo_list !== null) {
      if (!is_array($this->all_gradeinfo_list)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('all_gradeinfo_list', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRUCT, count($this->all_gradeinfo_list));
        {
          foreach ($this->all_gradeinfo_list as $iter41)
          {
            $xfer += $iter41->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->today_max_score !== null) {
      $xfer += $output->writeFieldBegin('today_max_score', TType::I32, 3);
      $xfer += $output->writeI32($this->today_max_score);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


