<?php
namespace xyz\idmapsvr;

/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


final class IdMapErroCode {
  const ERR_SVR_IDMAP_BEGIN = -400005001;
  const ERR_SVR_IDMAP_REDIS_GET = -400005002;
  const ERR_SVR_IDMAP_NOMATCH = -400005003;
  const ERR_SVR_IDMAP_NOTFOUND = -400005004;
  const ERR_SVR_IDMAP_ACTIONINFO = -400005005;
  const ERR_SVR_IDMAP_REDIS_RETURN = -400005006;
  const ERR_SVR_IDMAP_END = -400006000;
  static public $__names = array(
    -400005001 => 'ERR_SVR_IDMAP_BEGIN',
    -400005002 => 'ERR_SVR_IDMAP_REDIS_GET',
    -400005003 => 'ERR_SVR_IDMAP_NOMATCH',
    -400005004 => 'ERR_SVR_IDMAP_NOTFOUND',
    -400005005 => 'ERR_SVR_IDMAP_ACTIONINFO',
    -400005006 => 'ERR_SVR_IDMAP_REDIS_RETURN',
    -400006000 => 'ERR_SVR_IDMAP_END',
  );
}

class QMsg {
  static $_TSPEC;

  public $type = null;
  public $vID = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'type',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'vID',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['vID'])) {
        $this->vID = $vals['vID'];
      }
    }
  }

  public function getName() {
    return 'QMsg';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->vID = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readListBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $xfer += $input->readI64($elem5);
              $this->vID []= $elem5;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('QMsg');
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::STRING, 1);
      $xfer += $output->writeString($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->vID !== null) {
      if (!is_array($this->vID)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('vID', TType::LST, 2);
      {
        $output->writeListBegin(TType::I64, count($this->vID));
        {
          foreach ($this->vID as $iter6)
          {
            $xfer += $output->writeI64($iter6);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetIdReq {
  static $_TSPEC;

  public $vID = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'vID',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['vID'])) {
        $this->vID = $vals['vID'];
      }
    }
  }

  public function getName() {
    return 'GetIdReq';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->vID = array();
            $_size7 = 0;
            $_etype10 = 0;
            $xfer += $input->readListBegin($_etype10, $_size7);
            for ($_i11 = 0; $_i11 < $_size7; ++$_i11)
            {
              $elem12 = null;
              $xfer += $input->readI64($elem12);
              $this->vID []= $elem12;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetIdReq');
    if ($this->vID !== null) {
      if (!is_array($this->vID)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('vID', TType::LST, 1);
      {
        $output->writeListBegin(TType::I64, count($this->vID));
        {
          foreach ($this->vID as $iter13)
          {
            $xfer += $output->writeI64($iter13);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class IdItem {
  static $_TSPEC;

  public $ytid = null;
  public $yid = null;
  public $tid = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ytid',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'yid',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'tid',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ytid'])) {
        $this->ytid = $vals['ytid'];
      }
      if (isset($vals['yid'])) {
        $this->yid = $vals['yid'];
      }
      if (isset($vals['tid'])) {
        $this->tid = $vals['tid'];
      }
    }
  }

  public function getName() {
    return 'IdItem';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->ytid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->yid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->tid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('IdItem');
    if ($this->ytid !== null) {
      $xfer += $output->writeFieldBegin('ytid', TType::I64, 1);
      $xfer += $output->writeI64($this->ytid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->yid !== null) {
      $xfer += $output->writeFieldBegin('yid', TType::I64, 2);
      $xfer += $output->writeI64($this->yid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tid !== null) {
      $xfer += $output->writeFieldBegin('tid', TType::I64, 3);
      $xfer += $output->writeI64($this->tid);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetIdRsp {
  static $_TSPEC;

  public $retcode = null;
  public $vIDs = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'retcode',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'vIDs',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\xyz\idmapsvr\IdItem',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['retcode'])) {
        $this->retcode = $vals['retcode'];
      }
      if (isset($vals['vIDs'])) {
        $this->vIDs = $vals['vIDs'];
      }
    }
  }

  public function getName() {
    return 'GetIdRsp';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->retcode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->vIDs = array();
            $_size14 = 0;
            $_etype17 = 0;
            $xfer += $input->readListBegin($_etype17, $_size14);
            for ($_i18 = 0; $_i18 < $_size14; ++$_i18)
            {
              $elem19 = null;
              $elem19 = new \xyz\idmapsvr\IdItem();
              $xfer += $elem19->read($input);
              $this->vIDs []= $elem19;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetIdRsp');
    if ($this->retcode !== null) {
      $xfer += $output->writeFieldBegin('retcode', TType::I32, 1);
      $xfer += $output->writeI32($this->retcode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->vIDs !== null) {
      if (!is_array($this->vIDs)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('vIDs', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRUCT, count($this->vIDs));
        {
          foreach ($this->vIDs as $iter20)
          {
            $xfer += $iter20->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


