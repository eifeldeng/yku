<?php
namespace xyz\grdprisvr;

/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


final class GrdBnftErroCode {
  const ERR_SVR_GRADE_PRI_REDIS_GET = -400006002;
  const ERR_SVR_GRADE_PRI_NO_LEFT = -400006004;
  const ERR_SVR_GRADE_PRI_REPEAT = -400006005;
  const ERR_SVR_GRADE_PRI_MEM = -400006006;
  const ERR_SVR_GRADE_PRI_GETGRD = -400006007;
  const ERR_SVR_GRADE_PRI_CONFIG = -400006008;
  const ERR_SVR_GRADE_PRI_NOPRII = -400006009;
  const ERR_SVR_GRADE_PRI_MYSQL_GET = -400006010;
  const ERR_SVR_GRADE_PRI_REDIS_SET = -400006011;
  const ERR_SVR_GRADE_PRI_LIMITED_IP_FRQ = -400006012;
  const ERR_SVR_GRADE_PRI_NOTFOUND_GIFTID = -400006013;
  const ERR_SVR_GRADE_PRI_NOTFOUND_CARDTYPE = -400006014;
  const ERR_SVR_GRADE_PRI_CURL_BUY = -400006015;
  const ERR_SVR_GRADE_PRI_VIPSVR = -400006016;
  const ERR_SVR_GRADE_PRI_MYSQL_INSERT = -400006017;
  static public $__names = array(
    -400006002 => 'ERR_SVR_GRADE_PRI_REDIS_GET',
    -400006004 => 'ERR_SVR_GRADE_PRI_NO_LEFT',
    -400006005 => 'ERR_SVR_GRADE_PRI_REPEAT',
    -400006006 => 'ERR_SVR_GRADE_PRI_MEM',
    -400006007 => 'ERR_SVR_GRADE_PRI_GETGRD',
    -400006008 => 'ERR_SVR_GRADE_PRI_CONFIG',
    -400006009 => 'ERR_SVR_GRADE_PRI_NOPRII',
    -400006010 => 'ERR_SVR_GRADE_PRI_MYSQL_GET',
    -400006011 => 'ERR_SVR_GRADE_PRI_REDIS_SET',
    -400006012 => 'ERR_SVR_GRADE_PRI_LIMITED_IP_FRQ',
    -400006013 => 'ERR_SVR_GRADE_PRI_NOTFOUND_GIFTID',
    -400006014 => 'ERR_SVR_GRADE_PRI_NOTFOUND_CARDTYPE',
    -400006015 => 'ERR_SVR_GRADE_PRI_CURL_BUY',
    -400006016 => 'ERR_SVR_GRADE_PRI_VIPSVR',
    -400006017 => 'ERR_SVR_GRADE_PRI_MYSQL_INSERT',
  );
}

class GetCardStatusRsp {
  static $_TSPEC;

  public $retcode = null;
  public $yid = null;
  public $card_type = null;
  public $recv_time = null;
  public $desc = null;
  public $title = null;
  public $img_url = null;
  public $click_url = null;
  public $is_receive = null;
  public $himg_big_url = null;
  public $get_num = null;
  public $price = null;
  public $gift_content = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'retcode',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'yid',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'card_type',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'recv_time',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'desc',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'title',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'img_url',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'click_url',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'is_receive',
          'type' => TType::I32,
          ),
        10 => array(
          'var' => 'himg_big_url',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'get_num',
          'type' => TType::I64,
          ),
        12 => array(
          'var' => 'price',
          'type' => TType::I32,
          ),
        13 => array(
          'var' => 'gift_content',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['retcode'])) {
        $this->retcode = $vals['retcode'];
      }
      if (isset($vals['yid'])) {
        $this->yid = $vals['yid'];
      }
      if (isset($vals['card_type'])) {
        $this->card_type = $vals['card_type'];
      }
      if (isset($vals['recv_time'])) {
        $this->recv_time = $vals['recv_time'];
      }
      if (isset($vals['desc'])) {
        $this->desc = $vals['desc'];
      }
      if (isset($vals['title'])) {
        $this->title = $vals['title'];
      }
      if (isset($vals['img_url'])) {
        $this->img_url = $vals['img_url'];
      }
      if (isset($vals['click_url'])) {
        $this->click_url = $vals['click_url'];
      }
      if (isset($vals['is_receive'])) {
        $this->is_receive = $vals['is_receive'];
      }
      if (isset($vals['himg_big_url'])) {
        $this->himg_big_url = $vals['himg_big_url'];
      }
      if (isset($vals['get_num'])) {
        $this->get_num = $vals['get_num'];
      }
      if (isset($vals['price'])) {
        $this->price = $vals['price'];
      }
      if (isset($vals['gift_content'])) {
        $this->gift_content = $vals['gift_content'];
      }
    }
  }

  public function getName() {
    return 'GetCardStatusRsp';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->retcode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->yid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->card_type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->recv_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->desc);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->title);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->img_url);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->click_url);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->is_receive);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->himg_big_url);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->get_num);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->price);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->gift_content);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetCardStatusRsp');
    if ($this->retcode !== null) {
      $xfer += $output->writeFieldBegin('retcode', TType::I32, 1);
      $xfer += $output->writeI32($this->retcode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->yid !== null) {
      $xfer += $output->writeFieldBegin('yid', TType::I64, 2);
      $xfer += $output->writeI64($this->yid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->card_type !== null) {
      $xfer += $output->writeFieldBegin('card_type', TType::I32, 3);
      $xfer += $output->writeI32($this->card_type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->recv_time !== null) {
      $xfer += $output->writeFieldBegin('recv_time', TType::I64, 4);
      $xfer += $output->writeI64($this->recv_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->desc !== null) {
      $xfer += $output->writeFieldBegin('desc', TType::STRING, 5);
      $xfer += $output->writeString($this->desc);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->title !== null) {
      $xfer += $output->writeFieldBegin('title', TType::STRING, 6);
      $xfer += $output->writeString($this->title);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->img_url !== null) {
      $xfer += $output->writeFieldBegin('img_url', TType::STRING, 7);
      $xfer += $output->writeString($this->img_url);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->click_url !== null) {
      $xfer += $output->writeFieldBegin('click_url', TType::STRING, 8);
      $xfer += $output->writeString($this->click_url);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->is_receive !== null) {
      $xfer += $output->writeFieldBegin('is_receive', TType::I32, 9);
      $xfer += $output->writeI32($this->is_receive);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->himg_big_url !== null) {
      $xfer += $output->writeFieldBegin('himg_big_url', TType::STRING, 10);
      $xfer += $output->writeString($this->himg_big_url);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->get_num !== null) {
      $xfer += $output->writeFieldBegin('get_num', TType::I64, 11);
      $xfer += $output->writeI64($this->get_num);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->price !== null) {
      $xfer += $output->writeFieldBegin('price', TType::I32, 12);
      $xfer += $output->writeI32($this->price);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->gift_content !== null) {
      $xfer += $output->writeFieldBegin('gift_content', TType::STRING, 13);
      $xfer += $output->writeString($this->gift_content);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GiftItem {
  static $_TSPEC;

  public $gift_id = null;
  public $gift_desc = null;
  public $gift_title = null;
  public $gift_img_url = null;
  public $click_url = null;
  public $gift_start_time = null;
  public $gift_end_time = null;
  public $recv_time = null;
  public $cdkey_starttime = null;
  public $cdkey_endtime = null;
  public $is_receive = null;
  public $himg_big_url = null;
  public $get_num = null;
  public $platform = null;
  public $price = null;
  public $gift_content = null;
  public $cdkey = null;
  public $and_url = null;
  public $ios_url = null;
  public $h5_click_url = null;
  public $gift_class = null;
  public $gift_recv_period = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'gift_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'gift_desc',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'gift_title',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'gift_img_url',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'click_url',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'gift_start_time',
          'type' => TType::I64,
          ),
        7 => array(
          'var' => 'gift_end_time',
          'type' => TType::I64,
          ),
        8 => array(
          'var' => 'recv_time',
          'type' => TType::I64,
          ),
        9 => array(
          'var' => 'cdkey_starttime',
          'type' => TType::I64,
          ),
        10 => array(
          'var' => 'cdkey_endtime',
          'type' => TType::I64,
          ),
        11 => array(
          'var' => 'is_receive',
          'type' => TType::I32,
          ),
        12 => array(
          'var' => 'himg_big_url',
          'type' => TType::STRING,
          ),
        13 => array(
          'var' => 'get_num',
          'type' => TType::I64,
          ),
        14 => array(
          'var' => 'platform',
          'type' => TType::I32,
          ),
        15 => array(
          'var' => 'price',
          'type' => TType::I32,
          ),
        16 => array(
          'var' => 'gift_content',
          'type' => TType::STRING,
          ),
        17 => array(
          'var' => 'cdkey',
          'type' => TType::STRING,
          ),
        18 => array(
          'var' => 'and_url',
          'type' => TType::STRING,
          ),
        19 => array(
          'var' => 'ios_url',
          'type' => TType::STRING,
          ),
        20 => array(
          'var' => 'h5_click_url',
          'type' => TType::STRING,
          ),
        21 => array(
          'var' => 'gift_class',
          'type' => TType::I32,
          ),
        22 => array(
          'var' => 'gift_recv_period',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['gift_id'])) {
        $this->gift_id = $vals['gift_id'];
      }
      if (isset($vals['gift_desc'])) {
        $this->gift_desc = $vals['gift_desc'];
      }
      if (isset($vals['gift_title'])) {
        $this->gift_title = $vals['gift_title'];
      }
      if (isset($vals['gift_img_url'])) {
        $this->gift_img_url = $vals['gift_img_url'];
      }
      if (isset($vals['click_url'])) {
        $this->click_url = $vals['click_url'];
      }
      if (isset($vals['gift_start_time'])) {
        $this->gift_start_time = $vals['gift_start_time'];
      }
      if (isset($vals['gift_end_time'])) {
        $this->gift_end_time = $vals['gift_end_time'];
      }
      if (isset($vals['recv_time'])) {
        $this->recv_time = $vals['recv_time'];
      }
      if (isset($vals['cdkey_starttime'])) {
        $this->cdkey_starttime = $vals['cdkey_starttime'];
      }
      if (isset($vals['cdkey_endtime'])) {
        $this->cdkey_endtime = $vals['cdkey_endtime'];
      }
      if (isset($vals['is_receive'])) {
        $this->is_receive = $vals['is_receive'];
      }
      if (isset($vals['himg_big_url'])) {
        $this->himg_big_url = $vals['himg_big_url'];
      }
      if (isset($vals['get_num'])) {
        $this->get_num = $vals['get_num'];
      }
      if (isset($vals['platform'])) {
        $this->platform = $vals['platform'];
      }
      if (isset($vals['price'])) {
        $this->price = $vals['price'];
      }
      if (isset($vals['gift_content'])) {
        $this->gift_content = $vals['gift_content'];
      }
      if (isset($vals['cdkey'])) {
        $this->cdkey = $vals['cdkey'];
      }
      if (isset($vals['and_url'])) {
        $this->and_url = $vals['and_url'];
      }
      if (isset($vals['ios_url'])) {
        $this->ios_url = $vals['ios_url'];
      }
      if (isset($vals['h5_click_url'])) {
        $this->h5_click_url = $vals['h5_click_url'];
      }
      if (isset($vals['gift_class'])) {
        $this->gift_class = $vals['gift_class'];
      }
      if (isset($vals['gift_recv_period'])) {
        $this->gift_recv_period = $vals['gift_recv_period'];
      }
    }
  }

  public function getName() {
    return 'GiftItem';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->gift_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->gift_desc);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->gift_title);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->gift_img_url);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->click_url);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->gift_start_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->gift_end_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->recv_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->cdkey_starttime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->cdkey_endtime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->is_receive);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->himg_big_url);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->get_num);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->platform);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->price);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->gift_content);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->cdkey);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 18:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->and_url);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 19:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ios_url);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 20:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->h5_click_url);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 21:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->gift_class);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 22:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->gift_recv_period);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GiftItem');
    if ($this->gift_id !== null) {
      $xfer += $output->writeFieldBegin('gift_id', TType::I32, 1);
      $xfer += $output->writeI32($this->gift_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->gift_desc !== null) {
      $xfer += $output->writeFieldBegin('gift_desc', TType::STRING, 2);
      $xfer += $output->writeString($this->gift_desc);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->gift_title !== null) {
      $xfer += $output->writeFieldBegin('gift_title', TType::STRING, 3);
      $xfer += $output->writeString($this->gift_title);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->gift_img_url !== null) {
      $xfer += $output->writeFieldBegin('gift_img_url', TType::STRING, 4);
      $xfer += $output->writeString($this->gift_img_url);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->click_url !== null) {
      $xfer += $output->writeFieldBegin('click_url', TType::STRING, 5);
      $xfer += $output->writeString($this->click_url);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->gift_start_time !== null) {
      $xfer += $output->writeFieldBegin('gift_start_time', TType::I64, 6);
      $xfer += $output->writeI64($this->gift_start_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->gift_end_time !== null) {
      $xfer += $output->writeFieldBegin('gift_end_time', TType::I64, 7);
      $xfer += $output->writeI64($this->gift_end_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->recv_time !== null) {
      $xfer += $output->writeFieldBegin('recv_time', TType::I64, 8);
      $xfer += $output->writeI64($this->recv_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cdkey_starttime !== null) {
      $xfer += $output->writeFieldBegin('cdkey_starttime', TType::I64, 9);
      $xfer += $output->writeI64($this->cdkey_starttime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cdkey_endtime !== null) {
      $xfer += $output->writeFieldBegin('cdkey_endtime', TType::I64, 10);
      $xfer += $output->writeI64($this->cdkey_endtime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->is_receive !== null) {
      $xfer += $output->writeFieldBegin('is_receive', TType::I32, 11);
      $xfer += $output->writeI32($this->is_receive);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->himg_big_url !== null) {
      $xfer += $output->writeFieldBegin('himg_big_url', TType::STRING, 12);
      $xfer += $output->writeString($this->himg_big_url);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->get_num !== null) {
      $xfer += $output->writeFieldBegin('get_num', TType::I64, 13);
      $xfer += $output->writeI64($this->get_num);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->platform !== null) {
      $xfer += $output->writeFieldBegin('platform', TType::I32, 14);
      $xfer += $output->writeI32($this->platform);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->price !== null) {
      $xfer += $output->writeFieldBegin('price', TType::I32, 15);
      $xfer += $output->writeI32($this->price);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->gift_content !== null) {
      $xfer += $output->writeFieldBegin('gift_content', TType::STRING, 16);
      $xfer += $output->writeString($this->gift_content);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cdkey !== null) {
      $xfer += $output->writeFieldBegin('cdkey', TType::STRING, 17);
      $xfer += $output->writeString($this->cdkey);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->and_url !== null) {
      $xfer += $output->writeFieldBegin('and_url', TType::STRING, 18);
      $xfer += $output->writeString($this->and_url);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ios_url !== null) {
      $xfer += $output->writeFieldBegin('ios_url', TType::STRING, 19);
      $xfer += $output->writeString($this->ios_url);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->h5_click_url !== null) {
      $xfer += $output->writeFieldBegin('h5_click_url', TType::STRING, 20);
      $xfer += $output->writeString($this->h5_click_url);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->gift_class !== null) {
      $xfer += $output->writeFieldBegin('gift_class', TType::I32, 21);
      $xfer += $output->writeI32($this->gift_class);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->gift_recv_period !== null) {
      $xfer += $output->writeFieldBegin('gift_recv_period', TType::I32, 22);
      $xfer += $output->writeI32($this->gift_recv_period);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetSingleGifStatusReq {
  static $_TSPEC;

  public $yid = null;
  public $gift_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'yid',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'gift_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['yid'])) {
        $this->yid = $vals['yid'];
      }
      if (isset($vals['gift_id'])) {
        $this->gift_id = $vals['gift_id'];
      }
    }
  }

  public function getName() {
    return 'GetSingleGifStatusReq';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->yid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->gift_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetSingleGifStatusReq');
    if ($this->yid !== null) {
      $xfer += $output->writeFieldBegin('yid', TType::I64, 1);
      $xfer += $output->writeI64($this->yid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->gift_id !== null) {
      $xfer += $output->writeFieldBegin('gift_id', TType::I32, 2);
      $xfer += $output->writeI32($this->gift_id);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetSingleGifStatusRsp {
  static $_TSPEC;

  public $retcode = null;
  public $yid = null;
  public $gift_id = null;
  public $gift = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'retcode',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'yid',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'gift_id',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'gift',
          'type' => TType::STRUCT,
          'class' => '\xyz\grdprisvr\GiftItem',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['retcode'])) {
        $this->retcode = $vals['retcode'];
      }
      if (isset($vals['yid'])) {
        $this->yid = $vals['yid'];
      }
      if (isset($vals['gift_id'])) {
        $this->gift_id = $vals['gift_id'];
      }
      if (isset($vals['gift'])) {
        $this->gift = $vals['gift'];
      }
    }
  }

  public function getName() {
    return 'GetSingleGifStatusRsp';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->retcode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->yid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->gift_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->gift = new \xyz\grdprisvr\GiftItem();
            $xfer += $this->gift->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetSingleGifStatusRsp');
    if ($this->retcode !== null) {
      $xfer += $output->writeFieldBegin('retcode', TType::I32, 1);
      $xfer += $output->writeI32($this->retcode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->yid !== null) {
      $xfer += $output->writeFieldBegin('yid', TType::I64, 2);
      $xfer += $output->writeI64($this->yid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->gift_id !== null) {
      $xfer += $output->writeFieldBegin('gift_id', TType::I32, 3);
      $xfer += $output->writeI32($this->gift_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->gift !== null) {
      if (!is_object($this->gift)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('gift', TType::STRUCT, 4);
      $xfer += $this->gift->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetSingleCardStatusReq {
  static $_TSPEC;

  public $yid = null;
  public $cardtype = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'yid',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'cardtype',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['yid'])) {
        $this->yid = $vals['yid'];
      }
      if (isset($vals['cardtype'])) {
        $this->cardtype = $vals['cardtype'];
      }
    }
  }

  public function getName() {
    return 'GetSingleCardStatusReq';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->yid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->cardtype);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetSingleCardStatusReq');
    if ($this->yid !== null) {
      $xfer += $output->writeFieldBegin('yid', TType::I64, 1);
      $xfer += $output->writeI64($this->yid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cardtype !== null) {
      $xfer += $output->writeFieldBegin('cardtype', TType::I32, 2);
      $xfer += $output->writeI32($this->cardtype);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetSingleCardStatusRsp {
  static $_TSPEC;

  public $retcode = null;
  public $yid = null;
  public $cardtype = null;
  public $card = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'retcode',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'yid',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'cardtype',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'card',
          'type' => TType::STRUCT,
          'class' => '\xyz\grdprisvr\GetCardStatusRsp',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['retcode'])) {
        $this->retcode = $vals['retcode'];
      }
      if (isset($vals['yid'])) {
        $this->yid = $vals['yid'];
      }
      if (isset($vals['cardtype'])) {
        $this->cardtype = $vals['cardtype'];
      }
      if (isset($vals['card'])) {
        $this->card = $vals['card'];
      }
    }
  }

  public function getName() {
    return 'GetSingleCardStatusRsp';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->retcode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->yid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->cardtype);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->card = new \xyz\grdprisvr\GetCardStatusRsp();
            $xfer += $this->card->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetSingleCardStatusRsp');
    if ($this->retcode !== null) {
      $xfer += $output->writeFieldBegin('retcode', TType::I32, 1);
      $xfer += $output->writeI32($this->retcode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->yid !== null) {
      $xfer += $output->writeFieldBegin('yid', TType::I64, 2);
      $xfer += $output->writeI64($this->yid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cardtype !== null) {
      $xfer += $output->writeFieldBegin('cardtype', TType::I32, 3);
      $xfer += $output->writeI32($this->cardtype);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->card !== null) {
      if (!is_object($this->card)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('card', TType::STRUCT, 4);
      $xfer += $this->card->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetGifStatusReq {
  static $_TSPEC;

  public $yid = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'yid',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['yid'])) {
        $this->yid = $vals['yid'];
      }
    }
  }

  public function getName() {
    return 'GetGifStatusReq';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->yid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetGifStatusReq');
    if ($this->yid !== null) {
      $xfer += $output->writeFieldBegin('yid', TType::I64, 1);
      $xfer += $output->writeI64($this->yid);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetGifStatusRsp {
  static $_TSPEC;

  public $retcode = null;
  public $yid = null;
  public $gift_list = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'retcode',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'yid',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'gift_list',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\xyz\grdprisvr\GiftItem',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['retcode'])) {
        $this->retcode = $vals['retcode'];
      }
      if (isset($vals['yid'])) {
        $this->yid = $vals['yid'];
      }
      if (isset($vals['gift_list'])) {
        $this->gift_list = $vals['gift_list'];
      }
    }
  }

  public function getName() {
    return 'GetGifStatusRsp';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->retcode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->yid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->gift_list = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readListBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $elem5 = new \xyz\grdprisvr\GiftItem();
              $xfer += $elem5->read($input);
              $this->gift_list []= $elem5;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetGifStatusRsp');
    if ($this->retcode !== null) {
      $xfer += $output->writeFieldBegin('retcode', TType::I32, 1);
      $xfer += $output->writeI32($this->retcode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->yid !== null) {
      $xfer += $output->writeFieldBegin('yid', TType::I64, 2);
      $xfer += $output->writeI64($this->yid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->gift_list !== null) {
      if (!is_array($this->gift_list)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('gift_list', TType::LST, 3);
      {
        $output->writeListBegin(TType::STRUCT, count($this->gift_list));
        {
          foreach ($this->gift_list as $iter6)
          {
            $xfer += $iter6->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class RecordItem {
  static $_TSPEC;

  public $recv_time = null;
  public $type = null;
  public $content = null;
  public $click_url = null;
  public $gift_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'recv_time',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'type',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'content',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'click_url',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'gift_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['recv_time'])) {
        $this->recv_time = $vals['recv_time'];
      }
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['content'])) {
        $this->content = $vals['content'];
      }
      if (isset($vals['click_url'])) {
        $this->click_url = $vals['click_url'];
      }
      if (isset($vals['gift_id'])) {
        $this->gift_id = $vals['gift_id'];
      }
    }
  }

  public function getName() {
    return 'RecordItem';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->recv_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->content);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->click_url);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->gift_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('RecordItem');
    if ($this->recv_time !== null) {
      $xfer += $output->writeFieldBegin('recv_time', TType::I64, 1);
      $xfer += $output->writeI64($this->recv_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::I32, 2);
      $xfer += $output->writeI32($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->content !== null) {
      $xfer += $output->writeFieldBegin('content', TType::STRING, 3);
      $xfer += $output->writeString($this->content);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->click_url !== null) {
      $xfer += $output->writeFieldBegin('click_url', TType::STRING, 4);
      $xfer += $output->writeString($this->click_url);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->gift_id !== null) {
      $xfer += $output->writeFieldBegin('gift_id', TType::I32, 5);
      $xfer += $output->writeI32($this->gift_id);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetRecListReq {
  static $_TSPEC;

  public $yid = null;
  public $pageno = null;
  public $pagesize = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'yid',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'pageno',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'pagesize',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['yid'])) {
        $this->yid = $vals['yid'];
      }
      if (isset($vals['pageno'])) {
        $this->pageno = $vals['pageno'];
      }
      if (isset($vals['pagesize'])) {
        $this->pagesize = $vals['pagesize'];
      }
    }
  }

  public function getName() {
    return 'GetRecListReq';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->yid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->pageno);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->pagesize);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetRecListReq');
    if ($this->yid !== null) {
      $xfer += $output->writeFieldBegin('yid', TType::I64, 1);
      $xfer += $output->writeI64($this->yid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pageno !== null) {
      $xfer += $output->writeFieldBegin('pageno', TType::I64, 2);
      $xfer += $output->writeI64($this->pageno);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pagesize !== null) {
      $xfer += $output->writeFieldBegin('pagesize', TType::I64, 3);
      $xfer += $output->writeI64($this->pagesize);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetRecListRsp {
  static $_TSPEC;

  public $retcode = null;
  public $yid = null;
  public $record_list = null;
  public $total_count = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'retcode',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'yid',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'record_list',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\xyz\grdprisvr\RecordItem',
            ),
          ),
        4 => array(
          'var' => 'total_count',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['retcode'])) {
        $this->retcode = $vals['retcode'];
      }
      if (isset($vals['yid'])) {
        $this->yid = $vals['yid'];
      }
      if (isset($vals['record_list'])) {
        $this->record_list = $vals['record_list'];
      }
      if (isset($vals['total_count'])) {
        $this->total_count = $vals['total_count'];
      }
    }
  }

  public function getName() {
    return 'GetRecListRsp';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->retcode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->yid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->record_list = array();
            $_size7 = 0;
            $_etype10 = 0;
            $xfer += $input->readListBegin($_etype10, $_size7);
            for ($_i11 = 0; $_i11 < $_size7; ++$_i11)
            {
              $elem12 = null;
              $elem12 = new \xyz\grdprisvr\RecordItem();
              $xfer += $elem12->read($input);
              $this->record_list []= $elem12;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->total_count);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetRecListRsp');
    if ($this->retcode !== null) {
      $xfer += $output->writeFieldBegin('retcode', TType::I32, 1);
      $xfer += $output->writeI32($this->retcode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->yid !== null) {
      $xfer += $output->writeFieldBegin('yid', TType::I64, 2);
      $xfer += $output->writeI64($this->yid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->record_list !== null) {
      if (!is_array($this->record_list)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('record_list', TType::LST, 3);
      {
        $output->writeListBegin(TType::STRUCT, count($this->record_list));
        {
          foreach ($this->record_list as $iter13)
          {
            $xfer += $iter13->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->total_count !== null) {
      $xfer += $output->writeFieldBegin('total_count', TType::I32, 4);
      $xfer += $output->writeI32($this->total_count);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ApplyCardRsp {
  static $_TSPEC;

  public $retcode = null;
  public $yid = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'retcode',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'yid',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['retcode'])) {
        $this->retcode = $vals['retcode'];
      }
      if (isset($vals['yid'])) {
        $this->yid = $vals['yid'];
      }
    }
  }

  public function getName() {
    return 'ApplyCardRsp';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->retcode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->yid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ApplyCardRsp');
    if ($this->retcode !== null) {
      $xfer += $output->writeFieldBegin('retcode', TType::I32, 1);
      $xfer += $output->writeI32($this->retcode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->yid !== null) {
      $xfer += $output->writeFieldBegin('yid', TType::I64, 2);
      $xfer += $output->writeI64($this->yid);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ApplyGiftRsp {
  static $_TSPEC;

  public $retcode = null;
  public $yid = null;
  public $gift_cdkey = null;
  public $cdkey_starttime = null;
  public $cdkey_endtime = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'retcode',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'yid',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'gift_cdkey',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'cdkey_starttime',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'cdkey_endtime',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['retcode'])) {
        $this->retcode = $vals['retcode'];
      }
      if (isset($vals['yid'])) {
        $this->yid = $vals['yid'];
      }
      if (isset($vals['gift_cdkey'])) {
        $this->gift_cdkey = $vals['gift_cdkey'];
      }
      if (isset($vals['cdkey_starttime'])) {
        $this->cdkey_starttime = $vals['cdkey_starttime'];
      }
      if (isset($vals['cdkey_endtime'])) {
        $this->cdkey_endtime = $vals['cdkey_endtime'];
      }
    }
  }

  public function getName() {
    return 'ApplyGiftRsp';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->retcode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->yid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->gift_cdkey);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->cdkey_starttime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->cdkey_endtime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ApplyGiftRsp');
    if ($this->retcode !== null) {
      $xfer += $output->writeFieldBegin('retcode', TType::I32, 1);
      $xfer += $output->writeI32($this->retcode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->yid !== null) {
      $xfer += $output->writeFieldBegin('yid', TType::I64, 2);
      $xfer += $output->writeI64($this->yid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->gift_cdkey !== null) {
      $xfer += $output->writeFieldBegin('gift_cdkey', TType::STRING, 3);
      $xfer += $output->writeString($this->gift_cdkey);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cdkey_starttime !== null) {
      $xfer += $output->writeFieldBegin('cdkey_starttime', TType::I64, 4);
      $xfer += $output->writeI64($this->cdkey_starttime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cdkey_endtime !== null) {
      $xfer += $output->writeFieldBegin('cdkey_endtime', TType::I64, 5);
      $xfer += $output->writeI64($this->cdkey_endtime);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AddGiftReq {
  static $_TSPEC;

  public $gift_id = null;
  public $gift_name = null;
  public $gift_title = null;
  public $gift_desc = null;
  public $img_url = null;
  public $click_url = null;
  public $up_shelf_time = null;
  public $down_shelf_time = null;
  public $cdkey_start_time = null;
  public $cdkey_end_time = null;
  public $lv_begin = null;
  public $lv_end = null;
  public $updatetime = null;
  public $version = null;
  public $category = null;
  public $platform = null;
  public $himg_big_url = null;
  public $get_num = null;
  public $price = null;
  public $gift_content = null;
  public $and_url = null;
  public $ios_url = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'gift_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'gift_name',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'gift_title',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'gift_desc',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'img_url',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'click_url',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'up_shelf_time',
          'type' => TType::I64,
          ),
        8 => array(
          'var' => 'down_shelf_time',
          'type' => TType::I64,
          ),
        9 => array(
          'var' => 'cdkey_start_time',
          'type' => TType::I64,
          ),
        10 => array(
          'var' => 'cdkey_end_time',
          'type' => TType::I64,
          ),
        11 => array(
          'var' => 'lv_begin',
          'type' => TType::I32,
          ),
        12 => array(
          'var' => 'lv_end',
          'type' => TType::I32,
          ),
        13 => array(
          'var' => 'updatetime',
          'type' => TType::I64,
          ),
        14 => array(
          'var' => 'version',
          'type' => TType::I32,
          ),
        15 => array(
          'var' => 'category',
          'type' => TType::I32,
          ),
        16 => array(
          'var' => 'platform',
          'type' => TType::I32,
          ),
        17 => array(
          'var' => 'himg_big_url',
          'type' => TType::STRING,
          ),
        18 => array(
          'var' => 'get_num',
          'type' => TType::I64,
          ),
        19 => array(
          'var' => 'price',
          'type' => TType::I32,
          ),
        20 => array(
          'var' => 'gift_content',
          'type' => TType::STRING,
          ),
        21 => array(
          'var' => 'and_url',
          'type' => TType::STRING,
          ),
        22 => array(
          'var' => 'ios_url',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['gift_id'])) {
        $this->gift_id = $vals['gift_id'];
      }
      if (isset($vals['gift_name'])) {
        $this->gift_name = $vals['gift_name'];
      }
      if (isset($vals['gift_title'])) {
        $this->gift_title = $vals['gift_title'];
      }
      if (isset($vals['gift_desc'])) {
        $this->gift_desc = $vals['gift_desc'];
      }
      if (isset($vals['img_url'])) {
        $this->img_url = $vals['img_url'];
      }
      if (isset($vals['click_url'])) {
        $this->click_url = $vals['click_url'];
      }
      if (isset($vals['up_shelf_time'])) {
        $this->up_shelf_time = $vals['up_shelf_time'];
      }
      if (isset($vals['down_shelf_time'])) {
        $this->down_shelf_time = $vals['down_shelf_time'];
      }
      if (isset($vals['cdkey_start_time'])) {
        $this->cdkey_start_time = $vals['cdkey_start_time'];
      }
      if (isset($vals['cdkey_end_time'])) {
        $this->cdkey_end_time = $vals['cdkey_end_time'];
      }
      if (isset($vals['lv_begin'])) {
        $this->lv_begin = $vals['lv_begin'];
      }
      if (isset($vals['lv_end'])) {
        $this->lv_end = $vals['lv_end'];
      }
      if (isset($vals['updatetime'])) {
        $this->updatetime = $vals['updatetime'];
      }
      if (isset($vals['version'])) {
        $this->version = $vals['version'];
      }
      if (isset($vals['category'])) {
        $this->category = $vals['category'];
      }
      if (isset($vals['platform'])) {
        $this->platform = $vals['platform'];
      }
      if (isset($vals['himg_big_url'])) {
        $this->himg_big_url = $vals['himg_big_url'];
      }
      if (isset($vals['get_num'])) {
        $this->get_num = $vals['get_num'];
      }
      if (isset($vals['price'])) {
        $this->price = $vals['price'];
      }
      if (isset($vals['gift_content'])) {
        $this->gift_content = $vals['gift_content'];
      }
      if (isset($vals['and_url'])) {
        $this->and_url = $vals['and_url'];
      }
      if (isset($vals['ios_url'])) {
        $this->ios_url = $vals['ios_url'];
      }
    }
  }

  public function getName() {
    return 'AddGiftReq';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->gift_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->gift_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->gift_title);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->gift_desc);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->img_url);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->click_url);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->up_shelf_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->down_shelf_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->cdkey_start_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->cdkey_end_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->lv_begin);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->lv_end);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->updatetime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->version);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->category);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->platform);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->himg_big_url);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 18:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->get_num);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 19:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->price);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 20:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->gift_content);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 21:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->and_url);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 22:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ios_url);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AddGiftReq');
    if ($this->gift_id !== null) {
      $xfer += $output->writeFieldBegin('gift_id', TType::I32, 1);
      $xfer += $output->writeI32($this->gift_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->gift_name !== null) {
      $xfer += $output->writeFieldBegin('gift_name', TType::STRING, 2);
      $xfer += $output->writeString($this->gift_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->gift_title !== null) {
      $xfer += $output->writeFieldBegin('gift_title', TType::STRING, 3);
      $xfer += $output->writeString($this->gift_title);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->gift_desc !== null) {
      $xfer += $output->writeFieldBegin('gift_desc', TType::STRING, 4);
      $xfer += $output->writeString($this->gift_desc);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->img_url !== null) {
      $xfer += $output->writeFieldBegin('img_url', TType::STRING, 5);
      $xfer += $output->writeString($this->img_url);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->click_url !== null) {
      $xfer += $output->writeFieldBegin('click_url', TType::STRING, 6);
      $xfer += $output->writeString($this->click_url);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->up_shelf_time !== null) {
      $xfer += $output->writeFieldBegin('up_shelf_time', TType::I64, 7);
      $xfer += $output->writeI64($this->up_shelf_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->down_shelf_time !== null) {
      $xfer += $output->writeFieldBegin('down_shelf_time', TType::I64, 8);
      $xfer += $output->writeI64($this->down_shelf_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cdkey_start_time !== null) {
      $xfer += $output->writeFieldBegin('cdkey_start_time', TType::I64, 9);
      $xfer += $output->writeI64($this->cdkey_start_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cdkey_end_time !== null) {
      $xfer += $output->writeFieldBegin('cdkey_end_time', TType::I64, 10);
      $xfer += $output->writeI64($this->cdkey_end_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lv_begin !== null) {
      $xfer += $output->writeFieldBegin('lv_begin', TType::I32, 11);
      $xfer += $output->writeI32($this->lv_begin);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lv_end !== null) {
      $xfer += $output->writeFieldBegin('lv_end', TType::I32, 12);
      $xfer += $output->writeI32($this->lv_end);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->updatetime !== null) {
      $xfer += $output->writeFieldBegin('updatetime', TType::I64, 13);
      $xfer += $output->writeI64($this->updatetime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->version !== null) {
      $xfer += $output->writeFieldBegin('version', TType::I32, 14);
      $xfer += $output->writeI32($this->version);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->category !== null) {
      $xfer += $output->writeFieldBegin('category', TType::I32, 15);
      $xfer += $output->writeI32($this->category);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->platform !== null) {
      $xfer += $output->writeFieldBegin('platform', TType::I32, 16);
      $xfer += $output->writeI32($this->platform);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->himg_big_url !== null) {
      $xfer += $output->writeFieldBegin('himg_big_url', TType::STRING, 17);
      $xfer += $output->writeString($this->himg_big_url);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->get_num !== null) {
      $xfer += $output->writeFieldBegin('get_num', TType::I64, 18);
      $xfer += $output->writeI64($this->get_num);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->price !== null) {
      $xfer += $output->writeFieldBegin('price', TType::I32, 19);
      $xfer += $output->writeI32($this->price);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->gift_content !== null) {
      $xfer += $output->writeFieldBegin('gift_content', TType::STRING, 20);
      $xfer += $output->writeString($this->gift_content);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->and_url !== null) {
      $xfer += $output->writeFieldBegin('and_url', TType::STRING, 21);
      $xfer += $output->writeString($this->and_url);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ios_url !== null) {
      $xfer += $output->writeFieldBegin('ios_url', TType::STRING, 22);
      $xfer += $output->writeString($this->ios_url);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AddGiftRsp {
  static $_TSPEC;

  public $retcode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'retcode',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['retcode'])) {
        $this->retcode = $vals['retcode'];
      }
    }
  }

  public function getName() {
    return 'AddGiftRsp';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->retcode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AddGiftRsp');
    if ($this->retcode !== null) {
      $xfer += $output->writeFieldBegin('retcode', TType::I32, 1);
      $xfer += $output->writeI32($this->retcode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetNextGiftIdRsp {
  static $_TSPEC;

  public $retcode = null;
  public $gift_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'retcode',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'gift_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['retcode'])) {
        $this->retcode = $vals['retcode'];
      }
      if (isset($vals['gift_id'])) {
        $this->gift_id = $vals['gift_id'];
      }
    }
  }

  public function getName() {
    return 'GetNextGiftIdRsp';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->retcode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->gift_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetNextGiftIdRsp');
    if ($this->retcode !== null) {
      $xfer += $output->writeFieldBegin('retcode', TType::I32, 1);
      $xfer += $output->writeI32($this->retcode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->gift_id !== null) {
      $xfer += $output->writeFieldBegin('gift_id', TType::I32, 2);
      $xfer += $output->writeI32($this->gift_id);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetRelatedCategoryRsp {
  static $_TSPEC;

  public $retcode = null;
  public $cur_category = null;
  public $cur_gift_name = null;
  public $next_category = null;
  public $next_gift_name = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'retcode',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'cur_category',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'cur_gift_name',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'next_category',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'next_gift_name',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['retcode'])) {
        $this->retcode = $vals['retcode'];
      }
      if (isset($vals['cur_category'])) {
        $this->cur_category = $vals['cur_category'];
      }
      if (isset($vals['cur_gift_name'])) {
        $this->cur_gift_name = $vals['cur_gift_name'];
      }
      if (isset($vals['next_category'])) {
        $this->next_category = $vals['next_category'];
      }
      if (isset($vals['next_gift_name'])) {
        $this->next_gift_name = $vals['next_gift_name'];
      }
    }
  }

  public function getName() {
    return 'GetRelatedCategoryRsp';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->retcode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->cur_category);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->cur_gift_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->next_category);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->next_gift_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetRelatedCategoryRsp');
    if ($this->retcode !== null) {
      $xfer += $output->writeFieldBegin('retcode', TType::I32, 1);
      $xfer += $output->writeI32($this->retcode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cur_category !== null) {
      $xfer += $output->writeFieldBegin('cur_category', TType::I32, 2);
      $xfer += $output->writeI32($this->cur_category);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cur_gift_name !== null) {
      $xfer += $output->writeFieldBegin('cur_gift_name', TType::STRING, 3);
      $xfer += $output->writeString($this->cur_gift_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->next_category !== null) {
      $xfer += $output->writeFieldBegin('next_category', TType::I32, 4);
      $xfer += $output->writeI32($this->next_category);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->next_gift_name !== null) {
      $xfer += $output->writeFieldBegin('next_gift_name', TType::STRING, 5);
      $xfer += $output->writeString($this->next_gift_name);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TempGiftItem {
  static $_TSPEC;

  public $gift_id = null;
  public $gift_name = null;
  public $gift_desc = null;
  public $gift_title = null;
  public $img_url = null;
  public $click_url = null;
  public $up_shelf_time = null;
  public $down_shelf_time = null;
  public $recv_time = null;
  public $cdkey_start_time = null;
  public $cdkey_end_time = null;
  public $is_receive = null;
  public $himg_big_url = null;
  public $get_num = null;
  public $platform = null;
  public $price = null;
  public $gift_content = null;
  public $cdkey = null;
  public $and_url = null;
  public $ios_url = null;
  public $h5_click_url = null;
  public $gift_class = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'gift_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'gift_name',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'gift_desc',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'gift_title',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'img_url',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'click_url',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'up_shelf_time',
          'type' => TType::I64,
          ),
        8 => array(
          'var' => 'down_shelf_time',
          'type' => TType::I64,
          ),
        9 => array(
          'var' => 'recv_time',
          'type' => TType::I64,
          ),
        10 => array(
          'var' => 'cdkey_start_time',
          'type' => TType::I64,
          ),
        11 => array(
          'var' => 'cdkey_end_time',
          'type' => TType::I64,
          ),
        12 => array(
          'var' => 'is_receive',
          'type' => TType::I32,
          ),
        13 => array(
          'var' => 'himg_big_url',
          'type' => TType::STRING,
          ),
        14 => array(
          'var' => 'get_num',
          'type' => TType::I64,
          ),
        15 => array(
          'var' => 'platform',
          'type' => TType::I32,
          ),
        16 => array(
          'var' => 'price',
          'type' => TType::I32,
          ),
        17 => array(
          'var' => 'gift_content',
          'type' => TType::STRING,
          ),
        18 => array(
          'var' => 'cdkey',
          'type' => TType::STRING,
          ),
        19 => array(
          'var' => 'and_url',
          'type' => TType::STRING,
          ),
        20 => array(
          'var' => 'ios_url',
          'type' => TType::STRING,
          ),
        21 => array(
          'var' => 'h5_click_url',
          'type' => TType::STRING,
          ),
        22 => array(
          'var' => 'gift_class',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['gift_id'])) {
        $this->gift_id = $vals['gift_id'];
      }
      if (isset($vals['gift_name'])) {
        $this->gift_name = $vals['gift_name'];
      }
      if (isset($vals['gift_desc'])) {
        $this->gift_desc = $vals['gift_desc'];
      }
      if (isset($vals['gift_title'])) {
        $this->gift_title = $vals['gift_title'];
      }
      if (isset($vals['img_url'])) {
        $this->img_url = $vals['img_url'];
      }
      if (isset($vals['click_url'])) {
        $this->click_url = $vals['click_url'];
      }
      if (isset($vals['up_shelf_time'])) {
        $this->up_shelf_time = $vals['up_shelf_time'];
      }
      if (isset($vals['down_shelf_time'])) {
        $this->down_shelf_time = $vals['down_shelf_time'];
      }
      if (isset($vals['recv_time'])) {
        $this->recv_time = $vals['recv_time'];
      }
      if (isset($vals['cdkey_start_time'])) {
        $this->cdkey_start_time = $vals['cdkey_start_time'];
      }
      if (isset($vals['cdkey_end_time'])) {
        $this->cdkey_end_time = $vals['cdkey_end_time'];
      }
      if (isset($vals['is_receive'])) {
        $this->is_receive = $vals['is_receive'];
      }
      if (isset($vals['himg_big_url'])) {
        $this->himg_big_url = $vals['himg_big_url'];
      }
      if (isset($vals['get_num'])) {
        $this->get_num = $vals['get_num'];
      }
      if (isset($vals['platform'])) {
        $this->platform = $vals['platform'];
      }
      if (isset($vals['price'])) {
        $this->price = $vals['price'];
      }
      if (isset($vals['gift_content'])) {
        $this->gift_content = $vals['gift_content'];
      }
      if (isset($vals['cdkey'])) {
        $this->cdkey = $vals['cdkey'];
      }
      if (isset($vals['and_url'])) {
        $this->and_url = $vals['and_url'];
      }
      if (isset($vals['ios_url'])) {
        $this->ios_url = $vals['ios_url'];
      }
      if (isset($vals['h5_click_url'])) {
        $this->h5_click_url = $vals['h5_click_url'];
      }
      if (isset($vals['gift_class'])) {
        $this->gift_class = $vals['gift_class'];
      }
    }
  }

  public function getName() {
    return 'TempGiftItem';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->gift_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->gift_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->gift_desc);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->gift_title);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->img_url);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->click_url);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->up_shelf_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->down_shelf_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->recv_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->cdkey_start_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->cdkey_end_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->is_receive);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->himg_big_url);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->get_num);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->platform);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->price);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->gift_content);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 18:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->cdkey);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 19:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->and_url);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 20:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ios_url);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 21:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->h5_click_url);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 22:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->gift_class);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TempGiftItem');
    if ($this->gift_id !== null) {
      $xfer += $output->writeFieldBegin('gift_id', TType::I32, 1);
      $xfer += $output->writeI32($this->gift_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->gift_name !== null) {
      $xfer += $output->writeFieldBegin('gift_name', TType::STRING, 2);
      $xfer += $output->writeString($this->gift_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->gift_desc !== null) {
      $xfer += $output->writeFieldBegin('gift_desc', TType::STRING, 3);
      $xfer += $output->writeString($this->gift_desc);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->gift_title !== null) {
      $xfer += $output->writeFieldBegin('gift_title', TType::STRING, 4);
      $xfer += $output->writeString($this->gift_title);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->img_url !== null) {
      $xfer += $output->writeFieldBegin('img_url', TType::STRING, 5);
      $xfer += $output->writeString($this->img_url);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->click_url !== null) {
      $xfer += $output->writeFieldBegin('click_url', TType::STRING, 6);
      $xfer += $output->writeString($this->click_url);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->up_shelf_time !== null) {
      $xfer += $output->writeFieldBegin('up_shelf_time', TType::I64, 7);
      $xfer += $output->writeI64($this->up_shelf_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->down_shelf_time !== null) {
      $xfer += $output->writeFieldBegin('down_shelf_time', TType::I64, 8);
      $xfer += $output->writeI64($this->down_shelf_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->recv_time !== null) {
      $xfer += $output->writeFieldBegin('recv_time', TType::I64, 9);
      $xfer += $output->writeI64($this->recv_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cdkey_start_time !== null) {
      $xfer += $output->writeFieldBegin('cdkey_start_time', TType::I64, 10);
      $xfer += $output->writeI64($this->cdkey_start_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cdkey_end_time !== null) {
      $xfer += $output->writeFieldBegin('cdkey_end_time', TType::I64, 11);
      $xfer += $output->writeI64($this->cdkey_end_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->is_receive !== null) {
      $xfer += $output->writeFieldBegin('is_receive', TType::I32, 12);
      $xfer += $output->writeI32($this->is_receive);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->himg_big_url !== null) {
      $xfer += $output->writeFieldBegin('himg_big_url', TType::STRING, 13);
      $xfer += $output->writeString($this->himg_big_url);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->get_num !== null) {
      $xfer += $output->writeFieldBegin('get_num', TType::I64, 14);
      $xfer += $output->writeI64($this->get_num);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->platform !== null) {
      $xfer += $output->writeFieldBegin('platform', TType::I32, 15);
      $xfer += $output->writeI32($this->platform);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->price !== null) {
      $xfer += $output->writeFieldBegin('price', TType::I32, 16);
      $xfer += $output->writeI32($this->price);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->gift_content !== null) {
      $xfer += $output->writeFieldBegin('gift_content', TType::STRING, 17);
      $xfer += $output->writeString($this->gift_content);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cdkey !== null) {
      $xfer += $output->writeFieldBegin('cdkey', TType::STRING, 18);
      $xfer += $output->writeString($this->cdkey);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->and_url !== null) {
      $xfer += $output->writeFieldBegin('and_url', TType::STRING, 19);
      $xfer += $output->writeString($this->and_url);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ios_url !== null) {
      $xfer += $output->writeFieldBegin('ios_url', TType::STRING, 20);
      $xfer += $output->writeString($this->ios_url);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->h5_click_url !== null) {
      $xfer += $output->writeFieldBegin('h5_click_url', TType::STRING, 21);
      $xfer += $output->writeString($this->h5_click_url);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->gift_class !== null) {
      $xfer += $output->writeFieldBegin('gift_class', TType::I32, 22);
      $xfer += $output->writeI32($this->gift_class);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetTempGiftStatusReq {
  static $_TSPEC;

  public $yid = null;
  public $gift_class = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'yid',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'gift_class',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['yid'])) {
        $this->yid = $vals['yid'];
      }
      if (isset($vals['gift_class'])) {
        $this->gift_class = $vals['gift_class'];
      }
    }
  }

  public function getName() {
    return 'GetTempGiftStatusReq';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->yid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->gift_class);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetTempGiftStatusReq');
    if ($this->yid !== null) {
      $xfer += $output->writeFieldBegin('yid', TType::I64, 1);
      $xfer += $output->writeI64($this->yid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->gift_class !== null) {
      $xfer += $output->writeFieldBegin('gift_class', TType::I32, 2);
      $xfer += $output->writeI32($this->gift_class);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetTempGiftStatusRsp {
  static $_TSPEC;

  public $retcode = null;
  public $yid = null;
  public $gift_list = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'retcode',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'yid',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'gift_list',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\xyz\grdprisvr\TempGiftItem',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['retcode'])) {
        $this->retcode = $vals['retcode'];
      }
      if (isset($vals['yid'])) {
        $this->yid = $vals['yid'];
      }
      if (isset($vals['gift_list'])) {
        $this->gift_list = $vals['gift_list'];
      }
    }
  }

  public function getName() {
    return 'GetTempGiftStatusRsp';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->retcode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->yid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->gift_list = array();
            $_size14 = 0;
            $_etype17 = 0;
            $xfer += $input->readListBegin($_etype17, $_size14);
            for ($_i18 = 0; $_i18 < $_size14; ++$_i18)
            {
              $elem19 = null;
              $elem19 = new \xyz\grdprisvr\TempGiftItem();
              $xfer += $elem19->read($input);
              $this->gift_list []= $elem19;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetTempGiftStatusRsp');
    if ($this->retcode !== null) {
      $xfer += $output->writeFieldBegin('retcode', TType::I32, 1);
      $xfer += $output->writeI32($this->retcode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->yid !== null) {
      $xfer += $output->writeFieldBegin('yid', TType::I64, 2);
      $xfer += $output->writeI64($this->yid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->gift_list !== null) {
      if (!is_array($this->gift_list)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('gift_list', TType::LST, 3);
      {
        $output->writeListBegin(TType::STRUCT, count($this->gift_list));
        {
          foreach ($this->gift_list as $iter20)
          {
            $xfer += $iter20->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ApplyTempGiftRsp {
  static $_TSPEC;

  public $retcode = null;
  public $yid = null;
  public $gift_cdkey = null;
  public $cdkey_starttime = null;
  public $cdkey_endtime = null;
  public $apply_rule = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'retcode',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'yid',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'gift_cdkey',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'cdkey_starttime',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'cdkey_endtime',
          'type' => TType::I64,
          ),
        6 => array(
          'var' => 'apply_rule',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['retcode'])) {
        $this->retcode = $vals['retcode'];
      }
      if (isset($vals['yid'])) {
        $this->yid = $vals['yid'];
      }
      if (isset($vals['gift_cdkey'])) {
        $this->gift_cdkey = $vals['gift_cdkey'];
      }
      if (isset($vals['cdkey_starttime'])) {
        $this->cdkey_starttime = $vals['cdkey_starttime'];
      }
      if (isset($vals['cdkey_endtime'])) {
        $this->cdkey_endtime = $vals['cdkey_endtime'];
      }
      if (isset($vals['apply_rule'])) {
        $this->apply_rule = $vals['apply_rule'];
      }
    }
  }

  public function getName() {
    return 'ApplyTempGiftRsp';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->retcode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->yid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->gift_cdkey);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->cdkey_starttime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->cdkey_endtime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->apply_rule);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ApplyTempGiftRsp');
    if ($this->retcode !== null) {
      $xfer += $output->writeFieldBegin('retcode', TType::I32, 1);
      $xfer += $output->writeI32($this->retcode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->yid !== null) {
      $xfer += $output->writeFieldBegin('yid', TType::I64, 2);
      $xfer += $output->writeI64($this->yid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->gift_cdkey !== null) {
      $xfer += $output->writeFieldBegin('gift_cdkey', TType::STRING, 3);
      $xfer += $output->writeString($this->gift_cdkey);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cdkey_starttime !== null) {
      $xfer += $output->writeFieldBegin('cdkey_starttime', TType::I64, 4);
      $xfer += $output->writeI64($this->cdkey_starttime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cdkey_endtime !== null) {
      $xfer += $output->writeFieldBegin('cdkey_endtime', TType::I64, 5);
      $xfer += $output->writeI64($this->cdkey_endtime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->apply_rule !== null) {
      $xfer += $output->writeFieldBegin('apply_rule', TType::STRING, 6);
      $xfer += $output->writeString($this->apply_rule);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


