<?php
namespace xyz\idmgrsvr;

/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


final class IdErroCode {
  const ERR_SVR_IDMGR_DB_CONNECT = -400002002;
  const ERR_SVR_IDMGR_DB_QUERY = -400002003;
  const ERR_SVR_IDMGR_NO_INIT_PARAM = -400002004;
  const ERR_SVR_IDMGR_NO_RECORD = -400002005;
  const ERR_SVR_IDMGR_DB_UPDATE = -400002006;
  const ERR_SVR_IDMGR_DB_INSERT = -400002007;
  const ERR_SVR_IDMGR_DB_CAS = -400002008;
  const ERR_SVR_IDMGR_NO_IDNAME = -400002009;
  const ERR_SVR_IDMGR_NO_ENOUGH = -400002010;
  const ERR_SVR_IDMGR_UNKNOWN = -400002011;
  static public $__names = array(
    -400002002 => 'ERR_SVR_IDMGR_DB_CONNECT',
    -400002003 => 'ERR_SVR_IDMGR_DB_QUERY',
    -400002004 => 'ERR_SVR_IDMGR_NO_INIT_PARAM',
    -400002005 => 'ERR_SVR_IDMGR_NO_RECORD',
    -400002006 => 'ERR_SVR_IDMGR_DB_UPDATE',
    -400002007 => 'ERR_SVR_IDMGR_DB_INSERT',
    -400002008 => 'ERR_SVR_IDMGR_DB_CAS',
    -400002009 => 'ERR_SVR_IDMGR_NO_IDNAME',
    -400002010 => 'ERR_SVR_IDMGR_NO_ENOUGH',
    -400002011 => 'ERR_SVR_IDMGR_UNKNOWN',
  );
}

class IdMsgReq {
  static $_TSPEC;

  public $idname = null;
  public $initval = null;
  public $initstep = null;
  public $batchs = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'idname',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'initval',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'initstep',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'batchs',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['idname'])) {
        $this->idname = $vals['idname'];
      }
      if (isset($vals['initval'])) {
        $this->initval = $vals['initval'];
      }
      if (isset($vals['initstep'])) {
        $this->initstep = $vals['initstep'];
      }
      if (isset($vals['batchs'])) {
        $this->batchs = $vals['batchs'];
      }
    }
  }

  public function getName() {
    return 'IdMsgReq';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idname);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->initval);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->initstep);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->batchs);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('IdMsgReq');
    if ($this->idname !== null) {
      $xfer += $output->writeFieldBegin('idname', TType::STRING, 1);
      $xfer += $output->writeString($this->idname);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->initval !== null) {
      $xfer += $output->writeFieldBegin('initval', TType::I64, 2);
      $xfer += $output->writeI64($this->initval);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->initstep !== null) {
      $xfer += $output->writeFieldBegin('initstep', TType::I32, 3);
      $xfer += $output->writeI32($this->initstep);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->batchs !== null) {
      $xfer += $output->writeFieldBegin('batchs', TType::I32, 4);
      $xfer += $output->writeI32($this->batchs);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class IdMsgRsp {
  static $_TSPEC;

  public $retcode = null;
  public $idname = null;
  public $idval = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'retcode',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'idname',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'idval',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['retcode'])) {
        $this->retcode = $vals['retcode'];
      }
      if (isset($vals['idname'])) {
        $this->idname = $vals['idname'];
      }
      if (isset($vals['idval'])) {
        $this->idval = $vals['idval'];
      }
    }
  }

  public function getName() {
    return 'IdMsgRsp';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->retcode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->idname);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->idval = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readListBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $xfer += $input->readI64($elem5);
              $this->idval []= $elem5;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('IdMsgRsp');
    if ($this->retcode !== null) {
      $xfer += $output->writeFieldBegin('retcode', TType::I32, 1);
      $xfer += $output->writeI32($this->retcode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->idname !== null) {
      $xfer += $output->writeFieldBegin('idname', TType::STRING, 2);
      $xfer += $output->writeString($this->idname);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->idval !== null) {
      if (!is_array($this->idval)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('idval', TType::LST, 3);
      {
        $output->writeListBegin(TType::I64, count($this->idval));
        {
          foreach ($this->idval as $iter6)
          {
            $xfer += $output->writeI64($iter6);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


