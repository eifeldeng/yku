<?php
namespace xyz\tasksvr;

/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


final class TaskSvrErrorCode {
  const ERR_SVR_TASK_BEGIN = -400008001;
  const ERR_SVR_TASK_MYSQL_GET = -400008002;
  const ERR_SVR_TASK_REDIS_GET = -400008003;
  const ERR_SVR_TASK_MYSQL_SET = -400008004;
  const ERR_SVR_TASK_REDIS_SET = -400008005;
  const ERR_SVR_TASK_ACT_CREATE_CONFLICT = -400008006;
  const ERR_SVR_TASK_ACT_CREATE = -400008007;
  const ERR_SVR_TASK_SIGN_CHECK = -400008008;
  const ERR_SVR_TASK_AWARD_CREATE_CONFLICT = -400008009;
  const ERR_SVR_TASK_AWARD_CREATE = -400008010;
  const ERR_SVR_TASK_TASK_CREATE_CONFLICT = -400008011;
  const ERR_SVR_TASK_TASK_CREATE = -400008012;
  const ERR_SVR_TASK_ACTION_ID_NOTEXIST = -400008013;
  const ERR_SVR_TASK_AWARD_GID_NOTEXIST = -400008014;
  const ERR_SVR_TASK_MSGCODE_SEND = -400008015;
  const ERR_SVR_TASK_APPIDDUPLICATE = -400008016;
  const ERR_SVR_TASK_NOMATCH_FIELD = -400008017;
  const ERR_SVR_TASK_NOMATCH_TABLE = -400008018;
  const ERR_SVR_TASK_NOMATCH_OPID = -400008019;
  const ERR_SVR_TASK_NOMATCH_APPID = -400008020;
  const ERR_SVR_TASK_COMBINATION_PARAMS = -400008021;
  const ERR_SVR_TASK_COMBINATION_ALREADY_EXISTS = -400008022;
  const ERR_SVR_TASK_COMBINATION_NOT_EXISTS = -400008023;
  const ERR_SVR_TASK_COMBINATION_CATEGORY_NOT_EXISTS = -400008024;
  const ERR_SVR_TASK_END = -400009000;
  static public $__names = array(
    -400008001 => 'ERR_SVR_TASK_BEGIN',
    -400008002 => 'ERR_SVR_TASK_MYSQL_GET',
    -400008003 => 'ERR_SVR_TASK_REDIS_GET',
    -400008004 => 'ERR_SVR_TASK_MYSQL_SET',
    -400008005 => 'ERR_SVR_TASK_REDIS_SET',
    -400008006 => 'ERR_SVR_TASK_ACT_CREATE_CONFLICT',
    -400008007 => 'ERR_SVR_TASK_ACT_CREATE',
    -400008008 => 'ERR_SVR_TASK_SIGN_CHECK',
    -400008009 => 'ERR_SVR_TASK_AWARD_CREATE_CONFLICT',
    -400008010 => 'ERR_SVR_TASK_AWARD_CREATE',
    -400008011 => 'ERR_SVR_TASK_TASK_CREATE_CONFLICT',
    -400008012 => 'ERR_SVR_TASK_TASK_CREATE',
    -400008013 => 'ERR_SVR_TASK_ACTION_ID_NOTEXIST',
    -400008014 => 'ERR_SVR_TASK_AWARD_GID_NOTEXIST',
    -400008015 => 'ERR_SVR_TASK_MSGCODE_SEND',
    -400008016 => 'ERR_SVR_TASK_APPIDDUPLICATE',
    -400008017 => 'ERR_SVR_TASK_NOMATCH_FIELD',
    -400008018 => 'ERR_SVR_TASK_NOMATCH_TABLE',
    -400008019 => 'ERR_SVR_TASK_NOMATCH_OPID',
    -400008020 => 'ERR_SVR_TASK_NOMATCH_APPID',
    -400008021 => 'ERR_SVR_TASK_COMBINATION_PARAMS',
    -400008022 => 'ERR_SVR_TASK_COMBINATION_ALREADY_EXISTS',
    -400008023 => 'ERR_SVR_TASK_COMBINATION_NOT_EXISTS',
    -400008024 => 'ERR_SVR_TASK_COMBINATION_CATEGORY_NOT_EXISTS',
    -400009000 => 'ERR_SVR_TASK_END',
  );
}

class PlayTableTaskItem {
  static $_TSPEC;

  public $name = null;
  public $vid = null;
  public $show_id = null;
  public $action_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'vid',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'show_id',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'action_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['vid'])) {
        $this->vid = $vals['vid'];
      }
      if (isset($vals['show_id'])) {
        $this->show_id = $vals['show_id'];
      }
      if (isset($vals['action_id'])) {
        $this->action_id = $vals['action_id'];
      }
    }
  }

  public function getName() {
    return 'PlayTableTaskItem';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->vid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->show_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->action_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PlayTableTaskItem');
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 1);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->vid !== null) {
      $xfer += $output->writeFieldBegin('vid', TType::STRING, 2);
      $xfer += $output->writeString($this->vid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->show_id !== null) {
      $xfer += $output->writeFieldBegin('show_id', TType::STRING, 3);
      $xfer += $output->writeString($this->show_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->action_id !== null) {
      $xfer += $output->writeFieldBegin('action_id', TType::I32, 4);
      $xfer += $output->writeI32($this->action_id);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class PlayTableTaskList {
  static $_TSPEC;

  public $list_item = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'list_item',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\xyz\tasksvr\PlayTableTaskItem',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['list_item'])) {
        $this->list_item = $vals['list_item'];
      }
    }
  }

  public function getName() {
    return 'PlayTableTaskList';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->list_item = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readListBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $elem5 = new \xyz\tasksvr\PlayTableTaskItem();
              $xfer += $elem5->read($input);
              $this->list_item []= $elem5;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PlayTableTaskList');
    if ($this->list_item !== null) {
      if (!is_array($this->list_item)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('list_item', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->list_item));
        {
          foreach ($this->list_item as $iter6)
          {
            $xfer += $iter6->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class RegPlayTableTaskRsp {
  static $_TSPEC;

  public $retcode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'retcode',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['retcode'])) {
        $this->retcode = $vals['retcode'];
      }
    }
  }

  public function getName() {
    return 'RegPlayTableTaskRsp';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->retcode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('RegPlayTableTaskRsp');
    if ($this->retcode !== null) {
      $xfer += $output->writeFieldBegin('retcode', TType::I32, 1);
      $xfer += $output->writeI32($this->retcode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ActionInfo {
  static $_TSPEC;

  public $id = null;
  public $name = null;
  public $desc = null;
  public $time = null;
  public $link = null;
  public $link_h5 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'desc',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'time',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'link',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'link_h5',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['desc'])) {
        $this->desc = $vals['desc'];
      }
      if (isset($vals['time'])) {
        $this->time = $vals['time'];
      }
      if (isset($vals['link'])) {
        $this->link = $vals['link'];
      }
      if (isset($vals['link_h5'])) {
        $this->link_h5 = $vals['link_h5'];
      }
    }
  }

  public function getName() {
    return 'ActionInfo';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->desc);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->link);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->link_h5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ActionInfo');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I32, 1);
      $xfer += $output->writeI32($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 2);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->desc !== null) {
      $xfer += $output->writeFieldBegin('desc', TType::STRING, 3);
      $xfer += $output->writeString($this->desc);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->time !== null) {
      $xfer += $output->writeFieldBegin('time', TType::I64, 4);
      $xfer += $output->writeI64($this->time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->link !== null) {
      $xfer += $output->writeFieldBegin('link', TType::STRING, 5);
      $xfer += $output->writeString($this->link);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->link_h5 !== null) {
      $xfer += $output->writeFieldBegin('link_h5', TType::STRING, 6);
      $xfer += $output->writeString($this->link_h5);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AwardInfo {
  static $_TSPEC;

  public $type = null;
  public $group_id = null;
  public $id = null;
  public $name = null;
  public $desc = null;
  public $time = null;
  public $link = null;
  public $link_h5 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'type',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'group_id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'id',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'desc',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'time',
          'type' => TType::I64,
          ),
        7 => array(
          'var' => 'link',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'link_h5',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['group_id'])) {
        $this->group_id = $vals['group_id'];
      }
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['desc'])) {
        $this->desc = $vals['desc'];
      }
      if (isset($vals['time'])) {
        $this->time = $vals['time'];
      }
      if (isset($vals['link'])) {
        $this->link = $vals['link'];
      }
      if (isset($vals['link_h5'])) {
        $this->link_h5 = $vals['link_h5'];
      }
    }
  }

  public function getName() {
    return 'AwardInfo';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->group_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->desc);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->link);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->link_h5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AwardInfo');
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::I32, 1);
      $xfer += $output->writeI32($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->group_id !== null) {
      $xfer += $output->writeFieldBegin('group_id', TType::I32, 2);
      $xfer += $output->writeI32($this->group_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::STRING, 3);
      $xfer += $output->writeString($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 4);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->desc !== null) {
      $xfer += $output->writeFieldBegin('desc', TType::STRING, 5);
      $xfer += $output->writeString($this->desc);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->time !== null) {
      $xfer += $output->writeFieldBegin('time', TType::I64, 6);
      $xfer += $output->writeI64($this->time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->link !== null) {
      $xfer += $output->writeFieldBegin('link', TType::STRING, 7);
      $xfer += $output->writeString($this->link);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->link_h5 !== null) {
      $xfer += $output->writeFieldBegin('link_h5', TType::STRING, 8);
      $xfer += $output->writeString($this->link_h5);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TaskInfo {
  static $_TSPEC;

  public $id = null;
  public $name = null;
  public $task_category = null;
  public $large_logo_url = null;
  public $middle_logo_url = null;
  public $small_logo_url = null;
  public $desc = null;
  public $cur_progress_num = null;
  public $all_progress_num = null;
  public $state = null;
  public $action_info = null;
  public $award_info = null;
  public $award_num = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'task_category',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'large_logo_url',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'middle_logo_url',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'small_logo_url',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'desc',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'cur_progress_num',
          'type' => TType::I32,
          ),
        9 => array(
          'var' => 'all_progress_num',
          'type' => TType::I32,
          ),
        10 => array(
          'var' => 'state',
          'type' => TType::I32,
          ),
        11 => array(
          'var' => 'action_info',
          'type' => TType::STRUCT,
          'class' => '\xyz\tasksvr\ActionInfo',
          ),
        12 => array(
          'var' => 'award_info',
          'type' => TType::STRUCT,
          'class' => '\xyz\tasksvr\AwardInfo',
          ),
        13 => array(
          'var' => 'award_num',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['task_category'])) {
        $this->task_category = $vals['task_category'];
      }
      if (isset($vals['large_logo_url'])) {
        $this->large_logo_url = $vals['large_logo_url'];
      }
      if (isset($vals['middle_logo_url'])) {
        $this->middle_logo_url = $vals['middle_logo_url'];
      }
      if (isset($vals['small_logo_url'])) {
        $this->small_logo_url = $vals['small_logo_url'];
      }
      if (isset($vals['desc'])) {
        $this->desc = $vals['desc'];
      }
      if (isset($vals['cur_progress_num'])) {
        $this->cur_progress_num = $vals['cur_progress_num'];
      }
      if (isset($vals['all_progress_num'])) {
        $this->all_progress_num = $vals['all_progress_num'];
      }
      if (isset($vals['state'])) {
        $this->state = $vals['state'];
      }
      if (isset($vals['action_info'])) {
        $this->action_info = $vals['action_info'];
      }
      if (isset($vals['award_info'])) {
        $this->award_info = $vals['award_info'];
      }
      if (isset($vals['award_num'])) {
        $this->award_num = $vals['award_num'];
      }
    }
  }

  public function getName() {
    return 'TaskInfo';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->task_category);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->large_logo_url);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->middle_logo_url);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->small_logo_url);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->desc);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->cur_progress_num);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->all_progress_num);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->state);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRUCT) {
            $this->action_info = new \xyz\tasksvr\ActionInfo();
            $xfer += $this->action_info->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRUCT) {
            $this->award_info = new \xyz\tasksvr\AwardInfo();
            $xfer += $this->award_info->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->award_num);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TaskInfo');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I32, 1);
      $xfer += $output->writeI32($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 2);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->task_category !== null) {
      $xfer += $output->writeFieldBegin('task_category', TType::I32, 3);
      $xfer += $output->writeI32($this->task_category);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->large_logo_url !== null) {
      $xfer += $output->writeFieldBegin('large_logo_url', TType::STRING, 4);
      $xfer += $output->writeString($this->large_logo_url);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->middle_logo_url !== null) {
      $xfer += $output->writeFieldBegin('middle_logo_url', TType::STRING, 5);
      $xfer += $output->writeString($this->middle_logo_url);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->small_logo_url !== null) {
      $xfer += $output->writeFieldBegin('small_logo_url', TType::STRING, 6);
      $xfer += $output->writeString($this->small_logo_url);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->desc !== null) {
      $xfer += $output->writeFieldBegin('desc', TType::STRING, 7);
      $xfer += $output->writeString($this->desc);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cur_progress_num !== null) {
      $xfer += $output->writeFieldBegin('cur_progress_num', TType::I32, 8);
      $xfer += $output->writeI32($this->cur_progress_num);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->all_progress_num !== null) {
      $xfer += $output->writeFieldBegin('all_progress_num', TType::I32, 9);
      $xfer += $output->writeI32($this->all_progress_num);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->state !== null) {
      $xfer += $output->writeFieldBegin('state', TType::I32, 10);
      $xfer += $output->writeI32($this->state);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->action_info !== null) {
      if (!is_object($this->action_info)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('action_info', TType::STRUCT, 11);
      $xfer += $this->action_info->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->award_info !== null) {
      if (!is_object($this->award_info)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('award_info', TType::STRUCT, 12);
      $xfer += $this->award_info->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->award_num !== null) {
      $xfer += $output->writeFieldBegin('award_num', TType::I32, 13);
      $xfer += $output->writeI32($this->award_num);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TaskDetail {
  static $_TSPEC;

  public $task_id = null;
  public $task_name = null;
  public $task_desc = null;
  public $large_logo_url = null;
  public $middle_logo_url = null;
  public $small_logo_url = null;
  public $award_groupid = null;
  public $award_type = null;
  public $award_name = null;
  public $award_desc = null;
  public $award_url = null;
  public $award_url_h5 = null;
  public $award_num = null;
  public $action_id = null;
  public $action_name = null;
  public $action_desc = null;
  public $action_url = null;
  public $action_url_h5 = null;
  public $priod = null;
  public $iscontinue = null;
  public $isrepeat = null;
  public $aim_num = null;
  public $user_type = null;
  public $grade_low = null;
  public $grade_up = null;
  public $vip_grade_low = null;
  public $vip_grade_up = null;
  public $jifen_low = null;
  public $jifen_up = null;
  public $plat = null;
  public $ext_condition = null;
  public $create_user = null;
  public $create_time = null;
  public $start_time = null;
  public $stop_time = null;
  public $forbidden = null;
  public $category = null;
  public $appid = null;
  public $version = null;
  public $com_tasks = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'task_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'task_name',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'task_desc',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'large_logo_url',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'middle_logo_url',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'small_logo_url',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'award_groupid',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'award_type',
          'type' => TType::I32,
          ),
        9 => array(
          'var' => 'award_name',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'award_desc',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'award_url',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'award_url_h5',
          'type' => TType::STRING,
          ),
        13 => array(
          'var' => 'award_num',
          'type' => TType::I32,
          ),
        14 => array(
          'var' => 'action_id',
          'type' => TType::I32,
          ),
        15 => array(
          'var' => 'action_name',
          'type' => TType::STRING,
          ),
        16 => array(
          'var' => 'action_desc',
          'type' => TType::STRING,
          ),
        17 => array(
          'var' => 'action_url',
          'type' => TType::STRING,
          ),
        18 => array(
          'var' => 'action_url_h5',
          'type' => TType::STRING,
          ),
        19 => array(
          'var' => 'priod',
          'type' => TType::I32,
          ),
        20 => array(
          'var' => 'iscontinue',
          'type' => TType::I32,
          ),
        21 => array(
          'var' => 'isrepeat',
          'type' => TType::I32,
          ),
        22 => array(
          'var' => 'aim_num',
          'type' => TType::I32,
          ),
        23 => array(
          'var' => 'user_type',
          'type' => TType::I32,
          ),
        24 => array(
          'var' => 'grade_low',
          'type' => TType::I32,
          ),
        25 => array(
          'var' => 'grade_up',
          'type' => TType::I32,
          ),
        26 => array(
          'var' => 'vip_grade_low',
          'type' => TType::I32,
          ),
        27 => array(
          'var' => 'vip_grade_up',
          'type' => TType::I32,
          ),
        28 => array(
          'var' => 'jifen_low',
          'type' => TType::I32,
          ),
        29 => array(
          'var' => 'jifen_up',
          'type' => TType::I32,
          ),
        30 => array(
          'var' => 'plat',
          'type' => TType::I32,
          ),
        31 => array(
          'var' => 'ext_condition',
          'type' => TType::I32,
          ),
        32 => array(
          'var' => 'create_user',
          'type' => TType::STRING,
          ),
        33 => array(
          'var' => 'create_time',
          'type' => TType::I32,
          ),
        34 => array(
          'var' => 'start_time',
          'type' => TType::I32,
          ),
        35 => array(
          'var' => 'stop_time',
          'type' => TType::I32,
          ),
        36 => array(
          'var' => 'forbidden',
          'type' => TType::I32,
          ),
        37 => array(
          'var' => 'category',
          'type' => TType::I32,
          ),
        38 => array(
          'var' => 'appid',
          'type' => TType::I32,
          ),
        39 => array(
          'var' => 'version',
          'type' => TType::I32,
          ),
        40 => array(
          'var' => 'com_tasks',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['task_id'])) {
        $this->task_id = $vals['task_id'];
      }
      if (isset($vals['task_name'])) {
        $this->task_name = $vals['task_name'];
      }
      if (isset($vals['task_desc'])) {
        $this->task_desc = $vals['task_desc'];
      }
      if (isset($vals['large_logo_url'])) {
        $this->large_logo_url = $vals['large_logo_url'];
      }
      if (isset($vals['middle_logo_url'])) {
        $this->middle_logo_url = $vals['middle_logo_url'];
      }
      if (isset($vals['small_logo_url'])) {
        $this->small_logo_url = $vals['small_logo_url'];
      }
      if (isset($vals['award_groupid'])) {
        $this->award_groupid = $vals['award_groupid'];
      }
      if (isset($vals['award_type'])) {
        $this->award_type = $vals['award_type'];
      }
      if (isset($vals['award_name'])) {
        $this->award_name = $vals['award_name'];
      }
      if (isset($vals['award_desc'])) {
        $this->award_desc = $vals['award_desc'];
      }
      if (isset($vals['award_url'])) {
        $this->award_url = $vals['award_url'];
      }
      if (isset($vals['award_url_h5'])) {
        $this->award_url_h5 = $vals['award_url_h5'];
      }
      if (isset($vals['award_num'])) {
        $this->award_num = $vals['award_num'];
      }
      if (isset($vals['action_id'])) {
        $this->action_id = $vals['action_id'];
      }
      if (isset($vals['action_name'])) {
        $this->action_name = $vals['action_name'];
      }
      if (isset($vals['action_desc'])) {
        $this->action_desc = $vals['action_desc'];
      }
      if (isset($vals['action_url'])) {
        $this->action_url = $vals['action_url'];
      }
      if (isset($vals['action_url_h5'])) {
        $this->action_url_h5 = $vals['action_url_h5'];
      }
      if (isset($vals['priod'])) {
        $this->priod = $vals['priod'];
      }
      if (isset($vals['iscontinue'])) {
        $this->iscontinue = $vals['iscontinue'];
      }
      if (isset($vals['isrepeat'])) {
        $this->isrepeat = $vals['isrepeat'];
      }
      if (isset($vals['aim_num'])) {
        $this->aim_num = $vals['aim_num'];
      }
      if (isset($vals['user_type'])) {
        $this->user_type = $vals['user_type'];
      }
      if (isset($vals['grade_low'])) {
        $this->grade_low = $vals['grade_low'];
      }
      if (isset($vals['grade_up'])) {
        $this->grade_up = $vals['grade_up'];
      }
      if (isset($vals['vip_grade_low'])) {
        $this->vip_grade_low = $vals['vip_grade_low'];
      }
      if (isset($vals['vip_grade_up'])) {
        $this->vip_grade_up = $vals['vip_grade_up'];
      }
      if (isset($vals['jifen_low'])) {
        $this->jifen_low = $vals['jifen_low'];
      }
      if (isset($vals['jifen_up'])) {
        $this->jifen_up = $vals['jifen_up'];
      }
      if (isset($vals['plat'])) {
        $this->plat = $vals['plat'];
      }
      if (isset($vals['ext_condition'])) {
        $this->ext_condition = $vals['ext_condition'];
      }
      if (isset($vals['create_user'])) {
        $this->create_user = $vals['create_user'];
      }
      if (isset($vals['create_time'])) {
        $this->create_time = $vals['create_time'];
      }
      if (isset($vals['start_time'])) {
        $this->start_time = $vals['start_time'];
      }
      if (isset($vals['stop_time'])) {
        $this->stop_time = $vals['stop_time'];
      }
      if (isset($vals['forbidden'])) {
        $this->forbidden = $vals['forbidden'];
      }
      if (isset($vals['category'])) {
        $this->category = $vals['category'];
      }
      if (isset($vals['appid'])) {
        $this->appid = $vals['appid'];
      }
      if (isset($vals['version'])) {
        $this->version = $vals['version'];
      }
      if (isset($vals['com_tasks'])) {
        $this->com_tasks = $vals['com_tasks'];
      }
    }
  }

  public function getName() {
    return 'TaskDetail';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->task_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->task_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->task_desc);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->large_logo_url);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->middle_logo_url);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->small_logo_url);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->award_groupid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->award_type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->award_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->award_desc);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->award_url);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->award_url_h5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->award_num);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->action_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->action_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->action_desc);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->action_url);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 18:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->action_url_h5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 19:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->priod);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 20:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->iscontinue);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 21:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->isrepeat);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 22:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->aim_num);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 23:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->user_type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 24:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->grade_low);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 25:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->grade_up);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 26:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->vip_grade_low);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 27:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->vip_grade_up);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 28:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->jifen_low);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 29:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->jifen_up);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 30:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->plat);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 31:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ext_condition);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 32:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->create_user);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 33:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->create_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 34:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->start_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 35:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->stop_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 36:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->forbidden);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 37:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->category);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 38:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->appid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 39:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->version);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 40:
          if ($ftype == TType::LST) {
            $this->com_tasks = array();
            $_size7 = 0;
            $_etype10 = 0;
            $xfer += $input->readListBegin($_etype10, $_size7);
            for ($_i11 = 0; $_i11 < $_size7; ++$_i11)
            {
              $elem12 = null;
              $xfer += $input->readI32($elem12);
              $this->com_tasks []= $elem12;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TaskDetail');
    if ($this->task_id !== null) {
      $xfer += $output->writeFieldBegin('task_id', TType::I32, 1);
      $xfer += $output->writeI32($this->task_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->task_name !== null) {
      $xfer += $output->writeFieldBegin('task_name', TType::STRING, 2);
      $xfer += $output->writeString($this->task_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->task_desc !== null) {
      $xfer += $output->writeFieldBegin('task_desc', TType::STRING, 3);
      $xfer += $output->writeString($this->task_desc);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->large_logo_url !== null) {
      $xfer += $output->writeFieldBegin('large_logo_url', TType::STRING, 4);
      $xfer += $output->writeString($this->large_logo_url);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->middle_logo_url !== null) {
      $xfer += $output->writeFieldBegin('middle_logo_url', TType::STRING, 5);
      $xfer += $output->writeString($this->middle_logo_url);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->small_logo_url !== null) {
      $xfer += $output->writeFieldBegin('small_logo_url', TType::STRING, 6);
      $xfer += $output->writeString($this->small_logo_url);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->award_groupid !== null) {
      $xfer += $output->writeFieldBegin('award_groupid', TType::I32, 7);
      $xfer += $output->writeI32($this->award_groupid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->award_type !== null) {
      $xfer += $output->writeFieldBegin('award_type', TType::I32, 8);
      $xfer += $output->writeI32($this->award_type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->award_name !== null) {
      $xfer += $output->writeFieldBegin('award_name', TType::STRING, 9);
      $xfer += $output->writeString($this->award_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->award_desc !== null) {
      $xfer += $output->writeFieldBegin('award_desc', TType::STRING, 10);
      $xfer += $output->writeString($this->award_desc);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->award_url !== null) {
      $xfer += $output->writeFieldBegin('award_url', TType::STRING, 11);
      $xfer += $output->writeString($this->award_url);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->award_url_h5 !== null) {
      $xfer += $output->writeFieldBegin('award_url_h5', TType::STRING, 12);
      $xfer += $output->writeString($this->award_url_h5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->award_num !== null) {
      $xfer += $output->writeFieldBegin('award_num', TType::I32, 13);
      $xfer += $output->writeI32($this->award_num);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->action_id !== null) {
      $xfer += $output->writeFieldBegin('action_id', TType::I32, 14);
      $xfer += $output->writeI32($this->action_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->action_name !== null) {
      $xfer += $output->writeFieldBegin('action_name', TType::STRING, 15);
      $xfer += $output->writeString($this->action_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->action_desc !== null) {
      $xfer += $output->writeFieldBegin('action_desc', TType::STRING, 16);
      $xfer += $output->writeString($this->action_desc);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->action_url !== null) {
      $xfer += $output->writeFieldBegin('action_url', TType::STRING, 17);
      $xfer += $output->writeString($this->action_url);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->action_url_h5 !== null) {
      $xfer += $output->writeFieldBegin('action_url_h5', TType::STRING, 18);
      $xfer += $output->writeString($this->action_url_h5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->priod !== null) {
      $xfer += $output->writeFieldBegin('priod', TType::I32, 19);
      $xfer += $output->writeI32($this->priod);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->iscontinue !== null) {
      $xfer += $output->writeFieldBegin('iscontinue', TType::I32, 20);
      $xfer += $output->writeI32($this->iscontinue);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->isrepeat !== null) {
      $xfer += $output->writeFieldBegin('isrepeat', TType::I32, 21);
      $xfer += $output->writeI32($this->isrepeat);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->aim_num !== null) {
      $xfer += $output->writeFieldBegin('aim_num', TType::I32, 22);
      $xfer += $output->writeI32($this->aim_num);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->user_type !== null) {
      $xfer += $output->writeFieldBegin('user_type', TType::I32, 23);
      $xfer += $output->writeI32($this->user_type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->grade_low !== null) {
      $xfer += $output->writeFieldBegin('grade_low', TType::I32, 24);
      $xfer += $output->writeI32($this->grade_low);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->grade_up !== null) {
      $xfer += $output->writeFieldBegin('grade_up', TType::I32, 25);
      $xfer += $output->writeI32($this->grade_up);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->vip_grade_low !== null) {
      $xfer += $output->writeFieldBegin('vip_grade_low', TType::I32, 26);
      $xfer += $output->writeI32($this->vip_grade_low);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->vip_grade_up !== null) {
      $xfer += $output->writeFieldBegin('vip_grade_up', TType::I32, 27);
      $xfer += $output->writeI32($this->vip_grade_up);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->jifen_low !== null) {
      $xfer += $output->writeFieldBegin('jifen_low', TType::I32, 28);
      $xfer += $output->writeI32($this->jifen_low);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->jifen_up !== null) {
      $xfer += $output->writeFieldBegin('jifen_up', TType::I32, 29);
      $xfer += $output->writeI32($this->jifen_up);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->plat !== null) {
      $xfer += $output->writeFieldBegin('plat', TType::I32, 30);
      $xfer += $output->writeI32($this->plat);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ext_condition !== null) {
      $xfer += $output->writeFieldBegin('ext_condition', TType::I32, 31);
      $xfer += $output->writeI32($this->ext_condition);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->create_user !== null) {
      $xfer += $output->writeFieldBegin('create_user', TType::STRING, 32);
      $xfer += $output->writeString($this->create_user);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->create_time !== null) {
      $xfer += $output->writeFieldBegin('create_time', TType::I32, 33);
      $xfer += $output->writeI32($this->create_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->start_time !== null) {
      $xfer += $output->writeFieldBegin('start_time', TType::I32, 34);
      $xfer += $output->writeI32($this->start_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->stop_time !== null) {
      $xfer += $output->writeFieldBegin('stop_time', TType::I32, 35);
      $xfer += $output->writeI32($this->stop_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->forbidden !== null) {
      $xfer += $output->writeFieldBegin('forbidden', TType::I32, 36);
      $xfer += $output->writeI32($this->forbidden);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->category !== null) {
      $xfer += $output->writeFieldBegin('category', TType::I32, 37);
      $xfer += $output->writeI32($this->category);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->appid !== null) {
      $xfer += $output->writeFieldBegin('appid', TType::I32, 38);
      $xfer += $output->writeI32($this->appid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->version !== null) {
      $xfer += $output->writeFieldBegin('version', TType::I32, 39);
      $xfer += $output->writeI32($this->version);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->com_tasks !== null) {
      if (!is_array($this->com_tasks)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('com_tasks', TType::LST, 40);
      {
        $output->writeListBegin(TType::I32, count($this->com_tasks));
        {
          foreach ($this->com_tasks as $iter13)
          {
            $xfer += $output->writeI32($iter13);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetUserTaskStatusReq {
  static $_TSPEC;

  public $uid = null;
  public $plat = 1;
  public $category = 0;
  public $task_id_list = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'uid',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'plat',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'category',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'task_id_list',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['uid'])) {
        $this->uid = $vals['uid'];
      }
      if (isset($vals['plat'])) {
        $this->plat = $vals['plat'];
      }
      if (isset($vals['category'])) {
        $this->category = $vals['category'];
      }
      if (isset($vals['task_id_list'])) {
        $this->task_id_list = $vals['task_id_list'];
      }
    }
  }

  public function getName() {
    return 'GetUserTaskStatusReq';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->plat);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->category);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::LST) {
            $this->task_id_list = array();
            $_size14 = 0;
            $_etype17 = 0;
            $xfer += $input->readListBegin($_etype17, $_size14);
            for ($_i18 = 0; $_i18 < $_size14; ++$_i18)
            {
              $elem19 = null;
              $xfer += $input->readI32($elem19);
              $this->task_id_list []= $elem19;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetUserTaskStatusReq');
    if ($this->uid !== null) {
      $xfer += $output->writeFieldBegin('uid', TType::I64, 1);
      $xfer += $output->writeI64($this->uid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->plat !== null) {
      $xfer += $output->writeFieldBegin('plat', TType::I32, 2);
      $xfer += $output->writeI32($this->plat);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->category !== null) {
      $xfer += $output->writeFieldBegin('category', TType::I32, 3);
      $xfer += $output->writeI32($this->category);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->task_id_list !== null) {
      if (!is_array($this->task_id_list)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('task_id_list', TType::LST, 4);
      {
        $output->writeListBegin(TType::I32, count($this->task_id_list));
        {
          foreach ($this->task_id_list as $iter20)
          {
            $xfer += $output->writeI32($iter20);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetUserTaskStatusRsp {
  static $_TSPEC;

  public $retcode = null;
  public $task_list = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'retcode',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'task_list',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\xyz\tasksvr\TaskInfo',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['retcode'])) {
        $this->retcode = $vals['retcode'];
      }
      if (isset($vals['task_list'])) {
        $this->task_list = $vals['task_list'];
      }
    }
  }

  public function getName() {
    return 'GetUserTaskStatusRsp';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->retcode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->task_list = array();
            $_size21 = 0;
            $_etype24 = 0;
            $xfer += $input->readListBegin($_etype24, $_size21);
            for ($_i25 = 0; $_i25 < $_size21; ++$_i25)
            {
              $elem26 = null;
              $elem26 = new \xyz\tasksvr\TaskInfo();
              $xfer += $elem26->read($input);
              $this->task_list []= $elem26;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetUserTaskStatusRsp');
    if ($this->retcode !== null) {
      $xfer += $output->writeFieldBegin('retcode', TType::I32, 1);
      $xfer += $output->writeI32($this->retcode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->task_list !== null) {
      if (!is_array($this->task_list)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('task_list', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRUCT, count($this->task_list));
        {
          foreach ($this->task_list as $iter27)
          {
            $xfer += $iter27->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CreateActionReq {
  static $_TSPEC;

  public $action_name = null;
  public $action_desc = null;
  public $action_url = null;
  public $action_url_h5 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'action_name',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'action_desc',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'action_url',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'action_url_h5',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['action_name'])) {
        $this->action_name = $vals['action_name'];
      }
      if (isset($vals['action_desc'])) {
        $this->action_desc = $vals['action_desc'];
      }
      if (isset($vals['action_url'])) {
        $this->action_url = $vals['action_url'];
      }
      if (isset($vals['action_url_h5'])) {
        $this->action_url_h5 = $vals['action_url_h5'];
      }
    }
  }

  public function getName() {
    return 'CreateActionReq';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->action_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->action_desc);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->action_url);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->action_url_h5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CreateActionReq');
    if ($this->action_name !== null) {
      $xfer += $output->writeFieldBegin('action_name', TType::STRING, 1);
      $xfer += $output->writeString($this->action_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->action_desc !== null) {
      $xfer += $output->writeFieldBegin('action_desc', TType::STRING, 2);
      $xfer += $output->writeString($this->action_desc);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->action_url !== null) {
      $xfer += $output->writeFieldBegin('action_url', TType::STRING, 3);
      $xfer += $output->writeString($this->action_url);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->action_url_h5 !== null) {
      $xfer += $output->writeFieldBegin('action_url_h5', TType::STRING, 4);
      $xfer += $output->writeString($this->action_url_h5);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CreateActionRsp {
  static $_TSPEC;

  public $retcode = null;
  public $action_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'retcode',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'action_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['retcode'])) {
        $this->retcode = $vals['retcode'];
      }
      if (isset($vals['action_id'])) {
        $this->action_id = $vals['action_id'];
      }
    }
  }

  public function getName() {
    return 'CreateActionRsp';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->retcode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->action_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CreateActionRsp');
    if ($this->retcode !== null) {
      $xfer += $output->writeFieldBegin('retcode', TType::I32, 1);
      $xfer += $output->writeI32($this->retcode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->action_id !== null) {
      $xfer += $output->writeFieldBegin('action_id', TType::I32, 2);
      $xfer += $output->writeI32($this->action_id);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CreateAwardReq {
  static $_TSPEC;

  public $award_type = null;
  public $award_name = null;
  public $award_url = null;
  public $award_url_h5 = null;
  public $total_num = null;
  public $award_desc = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'award_type',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'award_name',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'award_url',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'award_url_h5',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'total_num',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'award_desc',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['award_type'])) {
        $this->award_type = $vals['award_type'];
      }
      if (isset($vals['award_name'])) {
        $this->award_name = $vals['award_name'];
      }
      if (isset($vals['award_url'])) {
        $this->award_url = $vals['award_url'];
      }
      if (isset($vals['award_url_h5'])) {
        $this->award_url_h5 = $vals['award_url_h5'];
      }
      if (isset($vals['total_num'])) {
        $this->total_num = $vals['total_num'];
      }
      if (isset($vals['award_desc'])) {
        $this->award_desc = $vals['award_desc'];
      }
    }
  }

  public function getName() {
    return 'CreateAwardReq';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->award_type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->award_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->award_url);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->award_url_h5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->total_num);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->award_desc);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CreateAwardReq');
    if ($this->award_type !== null) {
      $xfer += $output->writeFieldBegin('award_type', TType::I32, 1);
      $xfer += $output->writeI32($this->award_type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->award_name !== null) {
      $xfer += $output->writeFieldBegin('award_name', TType::STRING, 2);
      $xfer += $output->writeString($this->award_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->award_url !== null) {
      $xfer += $output->writeFieldBegin('award_url', TType::STRING, 3);
      $xfer += $output->writeString($this->award_url);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->award_url_h5 !== null) {
      $xfer += $output->writeFieldBegin('award_url_h5', TType::STRING, 4);
      $xfer += $output->writeString($this->award_url_h5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->total_num !== null) {
      $xfer += $output->writeFieldBegin('total_num', TType::I32, 5);
      $xfer += $output->writeI32($this->total_num);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->award_desc !== null) {
      $xfer += $output->writeFieldBegin('award_desc', TType::STRING, 6);
      $xfer += $output->writeString($this->award_desc);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CreateAwardRsp {
  static $_TSPEC;

  public $retcode = null;
  public $award_gid = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'retcode',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'award_gid',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['retcode'])) {
        $this->retcode = $vals['retcode'];
      }
      if (isset($vals['award_gid'])) {
        $this->award_gid = $vals['award_gid'];
      }
    }
  }

  public function getName() {
    return 'CreateAwardRsp';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->retcode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->award_gid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CreateAwardRsp');
    if ($this->retcode !== null) {
      $xfer += $output->writeFieldBegin('retcode', TType::I32, 1);
      $xfer += $output->writeI32($this->retcode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->award_gid !== null) {
      $xfer += $output->writeFieldBegin('award_gid', TType::I32, 2);
      $xfer += $output->writeI32($this->award_gid);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CreateTaskReq {
  static $_TSPEC;

  public $appid = null;
  public $sign = null;
  public $create_user = null;
  public $task_name = null;
  public $task_category = null;
  public $large_logo_url = null;
  public $middle_logo_url = null;
  public $small_logo_url = null;
  public $task_desc = null;
  public $award_gid = null;
  public $award_num = null;
  public $action_id = null;
  public $task_priod = 0;
  public $iscontinue = 0;
  public $aim_num = 0;
  public $isrepeat = 0;
  public $user_type = 1;
  public $grade_low = 0;
  public $grade_up = 0;
  public $vip_grade_low = 0;
  public $vip_grade_up = 0;
  public $jifen_low = 0;
  public $jifen_up = 0;
  public $plat = 1;
  public $start_time = null;
  public $end_time = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'appid',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'sign',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'create_user',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'task_name',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'task_category',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'large_logo_url',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'middle_logo_url',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'small_logo_url',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'task_desc',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'award_gid',
          'type' => TType::I32,
          ),
        11 => array(
          'var' => 'award_num',
          'type' => TType::I32,
          ),
        12 => array(
          'var' => 'action_id',
          'type' => TType::I32,
          ),
        13 => array(
          'var' => 'task_priod',
          'type' => TType::I32,
          ),
        14 => array(
          'var' => 'iscontinue',
          'type' => TType::I32,
          ),
        15 => array(
          'var' => 'aim_num',
          'type' => TType::I32,
          ),
        16 => array(
          'var' => 'isrepeat',
          'type' => TType::I32,
          ),
        17 => array(
          'var' => 'user_type',
          'type' => TType::I32,
          ),
        18 => array(
          'var' => 'grade_low',
          'type' => TType::I32,
          ),
        19 => array(
          'var' => 'grade_up',
          'type' => TType::I32,
          ),
        20 => array(
          'var' => 'vip_grade_low',
          'type' => TType::I32,
          ),
        21 => array(
          'var' => 'vip_grade_up',
          'type' => TType::I32,
          ),
        22 => array(
          'var' => 'jifen_low',
          'type' => TType::I32,
          ),
        23 => array(
          'var' => 'jifen_up',
          'type' => TType::I32,
          ),
        24 => array(
          'var' => 'plat',
          'type' => TType::I64,
          ),
        25 => array(
          'var' => 'start_time',
          'type' => TType::I64,
          ),
        26 => array(
          'var' => 'end_time',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['appid'])) {
        $this->appid = $vals['appid'];
      }
      if (isset($vals['sign'])) {
        $this->sign = $vals['sign'];
      }
      if (isset($vals['create_user'])) {
        $this->create_user = $vals['create_user'];
      }
      if (isset($vals['task_name'])) {
        $this->task_name = $vals['task_name'];
      }
      if (isset($vals['task_category'])) {
        $this->task_category = $vals['task_category'];
      }
      if (isset($vals['large_logo_url'])) {
        $this->large_logo_url = $vals['large_logo_url'];
      }
      if (isset($vals['middle_logo_url'])) {
        $this->middle_logo_url = $vals['middle_logo_url'];
      }
      if (isset($vals['small_logo_url'])) {
        $this->small_logo_url = $vals['small_logo_url'];
      }
      if (isset($vals['task_desc'])) {
        $this->task_desc = $vals['task_desc'];
      }
      if (isset($vals['award_gid'])) {
        $this->award_gid = $vals['award_gid'];
      }
      if (isset($vals['award_num'])) {
        $this->award_num = $vals['award_num'];
      }
      if (isset($vals['action_id'])) {
        $this->action_id = $vals['action_id'];
      }
      if (isset($vals['task_priod'])) {
        $this->task_priod = $vals['task_priod'];
      }
      if (isset($vals['iscontinue'])) {
        $this->iscontinue = $vals['iscontinue'];
      }
      if (isset($vals['aim_num'])) {
        $this->aim_num = $vals['aim_num'];
      }
      if (isset($vals['isrepeat'])) {
        $this->isrepeat = $vals['isrepeat'];
      }
      if (isset($vals['user_type'])) {
        $this->user_type = $vals['user_type'];
      }
      if (isset($vals['grade_low'])) {
        $this->grade_low = $vals['grade_low'];
      }
      if (isset($vals['grade_up'])) {
        $this->grade_up = $vals['grade_up'];
      }
      if (isset($vals['vip_grade_low'])) {
        $this->vip_grade_low = $vals['vip_grade_low'];
      }
      if (isset($vals['vip_grade_up'])) {
        $this->vip_grade_up = $vals['vip_grade_up'];
      }
      if (isset($vals['jifen_low'])) {
        $this->jifen_low = $vals['jifen_low'];
      }
      if (isset($vals['jifen_up'])) {
        $this->jifen_up = $vals['jifen_up'];
      }
      if (isset($vals['plat'])) {
        $this->plat = $vals['plat'];
      }
      if (isset($vals['start_time'])) {
        $this->start_time = $vals['start_time'];
      }
      if (isset($vals['end_time'])) {
        $this->end_time = $vals['end_time'];
      }
    }
  }

  public function getName() {
    return 'CreateTaskReq';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->appid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->sign);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->create_user);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->task_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->task_category);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->large_logo_url);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->middle_logo_url);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->small_logo_url);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->task_desc);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->award_gid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->award_num);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->action_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->task_priod);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->iscontinue);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->aim_num);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->isrepeat);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->user_type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 18:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->grade_low);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 19:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->grade_up);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 20:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->vip_grade_low);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 21:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->vip_grade_up);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 22:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->jifen_low);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 23:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->jifen_up);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 24:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->plat);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 25:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->start_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 26:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->end_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CreateTaskReq');
    if ($this->appid !== null) {
      $xfer += $output->writeFieldBegin('appid', TType::I32, 1);
      $xfer += $output->writeI32($this->appid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sign !== null) {
      $xfer += $output->writeFieldBegin('sign', TType::STRING, 2);
      $xfer += $output->writeString($this->sign);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->create_user !== null) {
      $xfer += $output->writeFieldBegin('create_user', TType::STRING, 3);
      $xfer += $output->writeString($this->create_user);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->task_name !== null) {
      $xfer += $output->writeFieldBegin('task_name', TType::STRING, 4);
      $xfer += $output->writeString($this->task_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->task_category !== null) {
      $xfer += $output->writeFieldBegin('task_category', TType::I32, 5);
      $xfer += $output->writeI32($this->task_category);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->large_logo_url !== null) {
      $xfer += $output->writeFieldBegin('large_logo_url', TType::STRING, 6);
      $xfer += $output->writeString($this->large_logo_url);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->middle_logo_url !== null) {
      $xfer += $output->writeFieldBegin('middle_logo_url', TType::STRING, 7);
      $xfer += $output->writeString($this->middle_logo_url);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->small_logo_url !== null) {
      $xfer += $output->writeFieldBegin('small_logo_url', TType::STRING, 8);
      $xfer += $output->writeString($this->small_logo_url);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->task_desc !== null) {
      $xfer += $output->writeFieldBegin('task_desc', TType::STRING, 9);
      $xfer += $output->writeString($this->task_desc);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->award_gid !== null) {
      $xfer += $output->writeFieldBegin('award_gid', TType::I32, 10);
      $xfer += $output->writeI32($this->award_gid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->award_num !== null) {
      $xfer += $output->writeFieldBegin('award_num', TType::I32, 11);
      $xfer += $output->writeI32($this->award_num);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->action_id !== null) {
      $xfer += $output->writeFieldBegin('action_id', TType::I32, 12);
      $xfer += $output->writeI32($this->action_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->task_priod !== null) {
      $xfer += $output->writeFieldBegin('task_priod', TType::I32, 13);
      $xfer += $output->writeI32($this->task_priod);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->iscontinue !== null) {
      $xfer += $output->writeFieldBegin('iscontinue', TType::I32, 14);
      $xfer += $output->writeI32($this->iscontinue);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->aim_num !== null) {
      $xfer += $output->writeFieldBegin('aim_num', TType::I32, 15);
      $xfer += $output->writeI32($this->aim_num);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->isrepeat !== null) {
      $xfer += $output->writeFieldBegin('isrepeat', TType::I32, 16);
      $xfer += $output->writeI32($this->isrepeat);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->user_type !== null) {
      $xfer += $output->writeFieldBegin('user_type', TType::I32, 17);
      $xfer += $output->writeI32($this->user_type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->grade_low !== null) {
      $xfer += $output->writeFieldBegin('grade_low', TType::I32, 18);
      $xfer += $output->writeI32($this->grade_low);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->grade_up !== null) {
      $xfer += $output->writeFieldBegin('grade_up', TType::I32, 19);
      $xfer += $output->writeI32($this->grade_up);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->vip_grade_low !== null) {
      $xfer += $output->writeFieldBegin('vip_grade_low', TType::I32, 20);
      $xfer += $output->writeI32($this->vip_grade_low);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->vip_grade_up !== null) {
      $xfer += $output->writeFieldBegin('vip_grade_up', TType::I32, 21);
      $xfer += $output->writeI32($this->vip_grade_up);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->jifen_low !== null) {
      $xfer += $output->writeFieldBegin('jifen_low', TType::I32, 22);
      $xfer += $output->writeI32($this->jifen_low);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->jifen_up !== null) {
      $xfer += $output->writeFieldBegin('jifen_up', TType::I32, 23);
      $xfer += $output->writeI32($this->jifen_up);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->plat !== null) {
      $xfer += $output->writeFieldBegin('plat', TType::I64, 24);
      $xfer += $output->writeI64($this->plat);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->start_time !== null) {
      $xfer += $output->writeFieldBegin('start_time', TType::I64, 25);
      $xfer += $output->writeI64($this->start_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->end_time !== null) {
      $xfer += $output->writeFieldBegin('end_time', TType::I64, 26);
      $xfer += $output->writeI64($this->end_time);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CreateTaskRsp {
  static $_TSPEC;

  public $retcode = null;
  public $task_detail = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'retcode',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'task_detail',
          'type' => TType::STRUCT,
          'class' => '\xyz\tasksvr\TaskDetail',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['retcode'])) {
        $this->retcode = $vals['retcode'];
      }
      if (isset($vals['task_detail'])) {
        $this->task_detail = $vals['task_detail'];
      }
    }
  }

  public function getName() {
    return 'CreateTaskRsp';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->retcode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->task_detail = new \xyz\tasksvr\TaskDetail();
            $xfer += $this->task_detail->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CreateTaskRsp');
    if ($this->retcode !== null) {
      $xfer += $output->writeFieldBegin('retcode', TType::I32, 1);
      $xfer += $output->writeI32($this->retcode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->task_detail !== null) {
      if (!is_object($this->task_detail)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('task_detail', TType::STRUCT, 2);
      $xfer += $this->task_detail->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ReportActReq {
  static $_TSPEC;

  public $appid = null;
  public $sign = null;
  public $uid = null;
  public $action_id = null;
  public $plat = "web";
  public $time = null;
  public $verify = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'appid',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'sign',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'uid',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'action_id',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'plat',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'time',
          'type' => TType::I64,
          ),
        7 => array(
          'var' => 'verify',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['appid'])) {
        $this->appid = $vals['appid'];
      }
      if (isset($vals['sign'])) {
        $this->sign = $vals['sign'];
      }
      if (isset($vals['uid'])) {
        $this->uid = $vals['uid'];
      }
      if (isset($vals['action_id'])) {
        $this->action_id = $vals['action_id'];
      }
      if (isset($vals['plat'])) {
        $this->plat = $vals['plat'];
      }
      if (isset($vals['time'])) {
        $this->time = $vals['time'];
      }
      if (isset($vals['verify'])) {
        $this->verify = $vals['verify'];
      }
    }
  }

  public function getName() {
    return 'ReportActReq';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->appid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->sign);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->action_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->plat);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->verify);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ReportActReq');
    if ($this->appid !== null) {
      $xfer += $output->writeFieldBegin('appid', TType::I32, 1);
      $xfer += $output->writeI32($this->appid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sign !== null) {
      $xfer += $output->writeFieldBegin('sign', TType::STRING, 2);
      $xfer += $output->writeString($this->sign);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->uid !== null) {
      $xfer += $output->writeFieldBegin('uid', TType::I64, 3);
      $xfer += $output->writeI64($this->uid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->action_id !== null) {
      $xfer += $output->writeFieldBegin('action_id', TType::I32, 4);
      $xfer += $output->writeI32($this->action_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->plat !== null) {
      $xfer += $output->writeFieldBegin('plat', TType::STRING, 5);
      $xfer += $output->writeString($this->plat);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->time !== null) {
      $xfer += $output->writeFieldBegin('time', TType::I64, 6);
      $xfer += $output->writeI64($this->time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->verify !== null) {
      $xfer += $output->writeFieldBegin('verify', TType::I32, 7);
      $xfer += $output->writeI32($this->verify);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ReportActRsp {
  static $_TSPEC;

  public $retcode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'retcode',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['retcode'])) {
        $this->retcode = $vals['retcode'];
      }
    }
  }

  public function getName() {
    return 'ReportActRsp';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->retcode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ReportActRsp');
    if ($this->retcode !== null) {
      $xfer += $output->writeFieldBegin('retcode', TType::I32, 1);
      $xfer += $output->writeI32($this->retcode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetTaskListReq {
  static $_TSPEC;

  public $task_category = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'task_category',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['task_category'])) {
        $this->task_category = $vals['task_category'];
      }
    }
  }

  public function getName() {
    return 'GetTaskListReq';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->task_category);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetTaskListReq');
    if ($this->task_category !== null) {
      $xfer += $output->writeFieldBegin('task_category', TType::I32, 1);
      $xfer += $output->writeI32($this->task_category);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetTaskListRsp {
  static $_TSPEC;

  public $retcode = null;
  public $task_list = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'retcode',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'task_list',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\xyz\tasksvr\TaskDetail',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['retcode'])) {
        $this->retcode = $vals['retcode'];
      }
      if (isset($vals['task_list'])) {
        $this->task_list = $vals['task_list'];
      }
    }
  }

  public function getName() {
    return 'GetTaskListRsp';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->retcode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->task_list = array();
            $_size28 = 0;
            $_etype31 = 0;
            $xfer += $input->readListBegin($_etype31, $_size28);
            for ($_i32 = 0; $_i32 < $_size28; ++$_i32)
            {
              $elem33 = null;
              $elem33 = new \xyz\tasksvr\TaskDetail();
              $xfer += $elem33->read($input);
              $this->task_list []= $elem33;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetTaskListRsp');
    if ($this->retcode !== null) {
      $xfer += $output->writeFieldBegin('retcode', TType::I32, 1);
      $xfer += $output->writeI32($this->retcode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->task_list !== null) {
      if (!is_array($this->task_list)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('task_list', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRUCT, count($this->task_list));
        {
          foreach ($this->task_list as $iter34)
          {
            $xfer += $iter34->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OptionTaskReq {
  static $_TSPEC;

  public $appid = null;
  public $sign = null;
  public $op_id = null;
  public $field = null;
  public $field_val = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'appid',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'sign',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'op_id',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'field',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'field_val',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['appid'])) {
        $this->appid = $vals['appid'];
      }
      if (isset($vals['sign'])) {
        $this->sign = $vals['sign'];
      }
      if (isset($vals['op_id'])) {
        $this->op_id = $vals['op_id'];
      }
      if (isset($vals['field'])) {
        $this->field = $vals['field'];
      }
      if (isset($vals['field_val'])) {
        $this->field_val = $vals['field_val'];
      }
    }
  }

  public function getName() {
    return 'OptionTaskReq';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->appid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->sign);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->op_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->field);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->field_val);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OptionTaskReq');
    if ($this->appid !== null) {
      $xfer += $output->writeFieldBegin('appid', TType::I32, 1);
      $xfer += $output->writeI32($this->appid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sign !== null) {
      $xfer += $output->writeFieldBegin('sign', TType::STRING, 2);
      $xfer += $output->writeString($this->sign);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->op_id !== null) {
      $xfer += $output->writeFieldBegin('op_id', TType::I32, 3);
      $xfer += $output->writeI32($this->op_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->field !== null) {
      $xfer += $output->writeFieldBegin('field', TType::STRING, 6);
      $xfer += $output->writeString($this->field);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->field_val !== null) {
      $xfer += $output->writeFieldBegin('field_val', TType::STRING, 7);
      $xfer += $output->writeString($this->field_val);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OptionTaskRsp {
  static $_TSPEC;

  public $retcode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'retcode',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['retcode'])) {
        $this->retcode = $vals['retcode'];
      }
    }
  }

  public function getName() {
    return 'OptionTaskRsp';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->retcode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OptionTaskRsp');
    if ($this->retcode !== null) {
      $xfer += $output->writeFieldBegin('retcode', TType::I32, 1);
      $xfer += $output->writeI32($this->retcode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class RegNewAppReq {
  static $_TSPEC;

  public $appname = null;
  public $appkey = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'appname',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'appkey',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['appname'])) {
        $this->appname = $vals['appname'];
      }
      if (isset($vals['appkey'])) {
        $this->appkey = $vals['appkey'];
      }
    }
  }

  public function getName() {
    return 'RegNewAppReq';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->appname);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->appkey);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('RegNewAppReq');
    if ($this->appname !== null) {
      $xfer += $output->writeFieldBegin('appname', TType::STRING, 1);
      $xfer += $output->writeString($this->appname);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->appkey !== null) {
      $xfer += $output->writeFieldBegin('appkey', TType::STRING, 2);
      $xfer += $output->writeString($this->appkey);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class RegNewAppRsp {
  static $_TSPEC;

  public $retcode = null;
  public $appid = null;
  public $appkey = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'retcode',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'appid',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'appkey',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['retcode'])) {
        $this->retcode = $vals['retcode'];
      }
      if (isset($vals['appid'])) {
        $this->appid = $vals['appid'];
      }
      if (isset($vals['appkey'])) {
        $this->appkey = $vals['appkey'];
      }
    }
  }

  public function getName() {
    return 'RegNewAppRsp';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->retcode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->appid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->appkey);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('RegNewAppRsp');
    if ($this->retcode !== null) {
      $xfer += $output->writeFieldBegin('retcode', TType::I32, 1);
      $xfer += $output->writeI32($this->retcode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->appid !== null) {
      $xfer += $output->writeFieldBegin('appid', TType::I32, 2);
      $xfer += $output->writeI32($this->appid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->appkey !== null) {
      $xfer += $output->writeFieldBegin('appkey', TType::STRING, 3);
      $xfer += $output->writeString($this->appkey);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetTaskinfoByIdRsp {
  static $_TSPEC;

  public $retcode = null;
  public $task_detail_list = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'retcode',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'task_detail_list',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\xyz\tasksvr\TaskDetail',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['retcode'])) {
        $this->retcode = $vals['retcode'];
      }
      if (isset($vals['task_detail_list'])) {
        $this->task_detail_list = $vals['task_detail_list'];
      }
    }
  }

  public function getName() {
    return 'GetTaskinfoByIdRsp';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->retcode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->task_detail_list = array();
            $_size35 = 0;
            $_etype38 = 0;
            $xfer += $input->readListBegin($_etype38, $_size35);
            for ($_i39 = 0; $_i39 < $_size35; ++$_i39)
            {
              $elem40 = null;
              $elem40 = new \xyz\tasksvr\TaskDetail();
              $xfer += $elem40->read($input);
              $this->task_detail_list []= $elem40;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetTaskinfoByIdRsp');
    if ($this->retcode !== null) {
      $xfer += $output->writeFieldBegin('retcode', TType::I32, 1);
      $xfer += $output->writeI32($this->retcode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->task_detail_list !== null) {
      if (!is_array($this->task_detail_list)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('task_detail_list', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRUCT, count($this->task_detail_list));
        {
          foreach ($this->task_detail_list as $iter41)
          {
            $xfer += $iter41->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetTaskinfoByIdReq {
  static $_TSPEC;

  public $task_id_list = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'task_id_list',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['task_id_list'])) {
        $this->task_id_list = $vals['task_id_list'];
      }
    }
  }

  public function getName() {
    return 'GetTaskinfoByIdReq';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->task_id_list = array();
            $_size42 = 0;
            $_etype45 = 0;
            $xfer += $input->readListBegin($_etype45, $_size42);
            for ($_i46 = 0; $_i46 < $_size42; ++$_i46)
            {
              $elem47 = null;
              $xfer += $input->readI32($elem47);
              $this->task_id_list []= $elem47;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetTaskinfoByIdReq');
    if ($this->task_id_list !== null) {
      if (!is_array($this->task_id_list)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('task_id_list', TType::LST, 1);
      {
        $output->writeListBegin(TType::I32, count($this->task_id_list));
        {
          foreach ($this->task_id_list as $iter48)
          {
            $xfer += $output->writeI32($iter48);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetAppInfoReq {
  static $_TSPEC;

  public $appid = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'appid',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['appid'])) {
        $this->appid = $vals['appid'];
      }
    }
  }

  public function getName() {
    return 'GetAppInfoReq';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->appid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetAppInfoReq');
    if ($this->appid !== null) {
      $xfer += $output->writeFieldBegin('appid', TType::I32, 1);
      $xfer += $output->writeI32($this->appid);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetAppInfoRsp {
  static $_TSPEC;

  public $retcode = null;
  public $appid = null;
  public $appkey = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'retcode',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'appid',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'appkey',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['retcode'])) {
        $this->retcode = $vals['retcode'];
      }
      if (isset($vals['appid'])) {
        $this->appid = $vals['appid'];
      }
      if (isset($vals['appkey'])) {
        $this->appkey = $vals['appkey'];
      }
    }
  }

  public function getName() {
    return 'GetAppInfoRsp';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->retcode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->appid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->appkey);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetAppInfoRsp');
    if ($this->retcode !== null) {
      $xfer += $output->writeFieldBegin('retcode', TType::I32, 1);
      $xfer += $output->writeI32($this->retcode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->appid !== null) {
      $xfer += $output->writeFieldBegin('appid', TType::I32, 2);
      $xfer += $output->writeI32($this->appid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->appkey !== null) {
      $xfer += $output->writeFieldBegin('appkey', TType::STRING, 3);
      $xfer += $output->writeString($this->appkey);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetActionInfoReq {
  static $_TSPEC;

  public $action_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'action_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['action_id'])) {
        $this->action_id = $vals['action_id'];
      }
    }
  }

  public function getName() {
    return 'GetActionInfoReq';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->action_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetActionInfoReq');
    if ($this->action_id !== null) {
      $xfer += $output->writeFieldBegin('action_id', TType::I32, 1);
      $xfer += $output->writeI32($this->action_id);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetActionInfoRsp {
  static $_TSPEC;

  public $retcode = null;
  public $action_id = null;
  public $action_name = null;
  public $action_desc = null;
  public $action_url = null;
  public $action_url_h5 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'retcode',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'action_id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'action_name',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'action_desc',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'action_url',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'action_url_h5',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['retcode'])) {
        $this->retcode = $vals['retcode'];
      }
      if (isset($vals['action_id'])) {
        $this->action_id = $vals['action_id'];
      }
      if (isset($vals['action_name'])) {
        $this->action_name = $vals['action_name'];
      }
      if (isset($vals['action_desc'])) {
        $this->action_desc = $vals['action_desc'];
      }
      if (isset($vals['action_url'])) {
        $this->action_url = $vals['action_url'];
      }
      if (isset($vals['action_url_h5'])) {
        $this->action_url_h5 = $vals['action_url_h5'];
      }
    }
  }

  public function getName() {
    return 'GetActionInfoRsp';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->retcode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->action_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->action_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->action_desc);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->action_url);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->action_url_h5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetActionInfoRsp');
    if ($this->retcode !== null) {
      $xfer += $output->writeFieldBegin('retcode', TType::I32, 1);
      $xfer += $output->writeI32($this->retcode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->action_id !== null) {
      $xfer += $output->writeFieldBegin('action_id', TType::I32, 2);
      $xfer += $output->writeI32($this->action_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->action_name !== null) {
      $xfer += $output->writeFieldBegin('action_name', TType::STRING, 3);
      $xfer += $output->writeString($this->action_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->action_desc !== null) {
      $xfer += $output->writeFieldBegin('action_desc', TType::STRING, 4);
      $xfer += $output->writeString($this->action_desc);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->action_url !== null) {
      $xfer += $output->writeFieldBegin('action_url', TType::STRING, 5);
      $xfer += $output->writeString($this->action_url);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->action_url_h5 !== null) {
      $xfer += $output->writeFieldBegin('action_url_h5', TType::STRING, 6);
      $xfer += $output->writeString($this->action_url_h5);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetAwardInfoReq {
  static $_TSPEC;

  public $award_gid = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'award_gid',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['award_gid'])) {
        $this->award_gid = $vals['award_gid'];
      }
    }
  }

  public function getName() {
    return 'GetAwardInfoReq';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->award_gid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetAwardInfoReq');
    if ($this->award_gid !== null) {
      $xfer += $output->writeFieldBegin('award_gid', TType::I32, 1);
      $xfer += $output->writeI32($this->award_gid);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetAwardInfoRsp {
  static $_TSPEC;

  public $retcode = null;
  public $award_gid = null;
  public $award_type = null;
  public $award_name = null;
  public $award_url = null;
  public $award_url_h5 = null;
  public $total_num = null;
  public $award_desc = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'retcode',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'award_gid',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'award_type',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'award_name',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'award_url',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'award_url_h5',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'total_num',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'award_desc',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['retcode'])) {
        $this->retcode = $vals['retcode'];
      }
      if (isset($vals['award_gid'])) {
        $this->award_gid = $vals['award_gid'];
      }
      if (isset($vals['award_type'])) {
        $this->award_type = $vals['award_type'];
      }
      if (isset($vals['award_name'])) {
        $this->award_name = $vals['award_name'];
      }
      if (isset($vals['award_url'])) {
        $this->award_url = $vals['award_url'];
      }
      if (isset($vals['award_url_h5'])) {
        $this->award_url_h5 = $vals['award_url_h5'];
      }
      if (isset($vals['total_num'])) {
        $this->total_num = $vals['total_num'];
      }
      if (isset($vals['award_desc'])) {
        $this->award_desc = $vals['award_desc'];
      }
    }
  }

  public function getName() {
    return 'GetAwardInfoRsp';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->retcode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->award_gid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->award_type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->award_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->award_url);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->award_url_h5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->total_num);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->award_desc);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetAwardInfoRsp');
    if ($this->retcode !== null) {
      $xfer += $output->writeFieldBegin('retcode', TType::I32, 1);
      $xfer += $output->writeI32($this->retcode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->award_gid !== null) {
      $xfer += $output->writeFieldBegin('award_gid', TType::I32, 2);
      $xfer += $output->writeI32($this->award_gid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->award_type !== null) {
      $xfer += $output->writeFieldBegin('award_type', TType::I32, 3);
      $xfer += $output->writeI32($this->award_type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->award_name !== null) {
      $xfer += $output->writeFieldBegin('award_name', TType::STRING, 4);
      $xfer += $output->writeString($this->award_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->award_url !== null) {
      $xfer += $output->writeFieldBegin('award_url', TType::STRING, 5);
      $xfer += $output->writeString($this->award_url);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->award_url_h5 !== null) {
      $xfer += $output->writeFieldBegin('award_url_h5', TType::STRING, 6);
      $xfer += $output->writeString($this->award_url_h5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->total_num !== null) {
      $xfer += $output->writeFieldBegin('total_num', TType::I32, 7);
      $xfer += $output->writeI32($this->total_num);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->award_desc !== null) {
      $xfer += $output->writeFieldBegin('award_desc', TType::STRING, 8);
      $xfer += $output->writeString($this->award_desc);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CreateTaskCombinationReq {
  static $_TSPEC;

  public $task_id_list = null;
  public $task_relation = null;
  public $task_combination_name = null;
  public $task_combination_desc = null;
  public $task_combination_category = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'task_id_list',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        2 => array(
          'var' => 'task_relation',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'task_combination_name',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'task_combination_desc',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'task_combination_category',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['task_id_list'])) {
        $this->task_id_list = $vals['task_id_list'];
      }
      if (isset($vals['task_relation'])) {
        $this->task_relation = $vals['task_relation'];
      }
      if (isset($vals['task_combination_name'])) {
        $this->task_combination_name = $vals['task_combination_name'];
      }
      if (isset($vals['task_combination_desc'])) {
        $this->task_combination_desc = $vals['task_combination_desc'];
      }
      if (isset($vals['task_combination_category'])) {
        $this->task_combination_category = $vals['task_combination_category'];
      }
    }
  }

  public function getName() {
    return 'CreateTaskCombinationReq';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->task_id_list = array();
            $_size49 = 0;
            $_etype52 = 0;
            $xfer += $input->readListBegin($_etype52, $_size49);
            for ($_i53 = 0; $_i53 < $_size49; ++$_i53)
            {
              $elem54 = null;
              $xfer += $input->readI32($elem54);
              $this->task_id_list []= $elem54;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->task_relation);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->task_combination_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->task_combination_desc);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->task_combination_category);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CreateTaskCombinationReq');
    if ($this->task_id_list !== null) {
      if (!is_array($this->task_id_list)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('task_id_list', TType::LST, 1);
      {
        $output->writeListBegin(TType::I32, count($this->task_id_list));
        {
          foreach ($this->task_id_list as $iter55)
          {
            $xfer += $output->writeI32($iter55);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->task_relation !== null) {
      $xfer += $output->writeFieldBegin('task_relation', TType::I32, 2);
      $xfer += $output->writeI32($this->task_relation);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->task_combination_name !== null) {
      $xfer += $output->writeFieldBegin('task_combination_name', TType::STRING, 3);
      $xfer += $output->writeString($this->task_combination_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->task_combination_desc !== null) {
      $xfer += $output->writeFieldBegin('task_combination_desc', TType::STRING, 4);
      $xfer += $output->writeString($this->task_combination_desc);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->task_combination_category !== null) {
      $xfer += $output->writeFieldBegin('task_combination_category', TType::I32, 5);
      $xfer += $output->writeI32($this->task_combination_category);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CreateTaskCombinationRsp {
  static $_TSPEC;

  public $retcode = null;
  public $task_combination_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'retcode',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'task_combination_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['retcode'])) {
        $this->retcode = $vals['retcode'];
      }
      if (isset($vals['task_combination_id'])) {
        $this->task_combination_id = $vals['task_combination_id'];
      }
    }
  }

  public function getName() {
    return 'CreateTaskCombinationRsp';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->retcode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->task_combination_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CreateTaskCombinationRsp');
    if ($this->retcode !== null) {
      $xfer += $output->writeFieldBegin('retcode', TType::I32, 1);
      $xfer += $output->writeI32($this->retcode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->task_combination_id !== null) {
      $xfer += $output->writeFieldBegin('task_combination_id', TType::I32, 2);
      $xfer += $output->writeI32($this->task_combination_id);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetTaskCombinationReq {
  static $_TSPEC;

  public $task_combination_category = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'task_combination_category',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['task_combination_category'])) {
        $this->task_combination_category = $vals['task_combination_category'];
      }
    }
  }

  public function getName() {
    return 'GetTaskCombinationReq';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->task_combination_category);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetTaskCombinationReq');
    if ($this->task_combination_category !== null) {
      $xfer += $output->writeFieldBegin('task_combination_category', TType::I32, 1);
      $xfer += $output->writeI32($this->task_combination_category);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CombinationTaskItem {
  static $_TSPEC;

  public $task_combination_id = null;
  public $task_relation = null;
  public $task_combination_name = null;
  public $task_combination_desc = null;
  public $task_combination_category = null;
  public $task_combination_detail = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'task_combination_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'task_relation',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'task_combination_name',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'task_combination_desc',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'task_combination_category',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'task_combination_detail',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\xyz\tasksvr\TaskDetail',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['task_combination_id'])) {
        $this->task_combination_id = $vals['task_combination_id'];
      }
      if (isset($vals['task_relation'])) {
        $this->task_relation = $vals['task_relation'];
      }
      if (isset($vals['task_combination_name'])) {
        $this->task_combination_name = $vals['task_combination_name'];
      }
      if (isset($vals['task_combination_desc'])) {
        $this->task_combination_desc = $vals['task_combination_desc'];
      }
      if (isset($vals['task_combination_category'])) {
        $this->task_combination_category = $vals['task_combination_category'];
      }
      if (isset($vals['task_combination_detail'])) {
        $this->task_combination_detail = $vals['task_combination_detail'];
      }
    }
  }

  public function getName() {
    return 'CombinationTaskItem';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->task_combination_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->task_relation);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->task_combination_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->task_combination_desc);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->task_combination_category);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::LST) {
            $this->task_combination_detail = array();
            $_size56 = 0;
            $_etype59 = 0;
            $xfer += $input->readListBegin($_etype59, $_size56);
            for ($_i60 = 0; $_i60 < $_size56; ++$_i60)
            {
              $elem61 = null;
              $elem61 = new \xyz\tasksvr\TaskDetail();
              $xfer += $elem61->read($input);
              $this->task_combination_detail []= $elem61;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CombinationTaskItem');
    if ($this->task_combination_id !== null) {
      $xfer += $output->writeFieldBegin('task_combination_id', TType::I32, 1);
      $xfer += $output->writeI32($this->task_combination_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->task_relation !== null) {
      $xfer += $output->writeFieldBegin('task_relation', TType::I32, 2);
      $xfer += $output->writeI32($this->task_relation);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->task_combination_name !== null) {
      $xfer += $output->writeFieldBegin('task_combination_name', TType::STRING, 3);
      $xfer += $output->writeString($this->task_combination_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->task_combination_desc !== null) {
      $xfer += $output->writeFieldBegin('task_combination_desc', TType::STRING, 4);
      $xfer += $output->writeString($this->task_combination_desc);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->task_combination_category !== null) {
      $xfer += $output->writeFieldBegin('task_combination_category', TType::I32, 5);
      $xfer += $output->writeI32($this->task_combination_category);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->task_combination_detail !== null) {
      if (!is_array($this->task_combination_detail)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('task_combination_detail', TType::LST, 6);
      {
        $output->writeListBegin(TType::STRUCT, count($this->task_combination_detail));
        {
          foreach ($this->task_combination_detail as $iter62)
          {
            $xfer += $iter62->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetTaskCombinationRsp {
  static $_TSPEC;

  public $retcode = null;
  public $combination_task_list = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'retcode',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'combination_task_list',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\xyz\tasksvr\CombinationTaskItem',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['retcode'])) {
        $this->retcode = $vals['retcode'];
      }
      if (isset($vals['combination_task_list'])) {
        $this->combination_task_list = $vals['combination_task_list'];
      }
    }
  }

  public function getName() {
    return 'GetTaskCombinationRsp';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->retcode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->combination_task_list = array();
            $_size63 = 0;
            $_etype66 = 0;
            $xfer += $input->readListBegin($_etype66, $_size63);
            for ($_i67 = 0; $_i67 < $_size63; ++$_i67)
            {
              $elem68 = null;
              $elem68 = new \xyz\tasksvr\CombinationTaskItem();
              $xfer += $elem68->read($input);
              $this->combination_task_list []= $elem68;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetTaskCombinationRsp');
    if ($this->retcode !== null) {
      $xfer += $output->writeFieldBegin('retcode', TType::I32, 1);
      $xfer += $output->writeI32($this->retcode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->combination_task_list !== null) {
      if (!is_array($this->combination_task_list)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('combination_task_list', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRUCT, count($this->combination_task_list));
        {
          foreach ($this->combination_task_list as $iter69)
          {
            $xfer += $iter69->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetUserTaskCombinationReq {
  static $_TSPEC;

  public $uid = null;
  public $task_combination_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'uid',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'task_combination_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['uid'])) {
        $this->uid = $vals['uid'];
      }
      if (isset($vals['task_combination_id'])) {
        $this->task_combination_id = $vals['task_combination_id'];
      }
    }
  }

  public function getName() {
    return 'GetUserTaskCombinationReq';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->task_combination_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetUserTaskCombinationReq');
    if ($this->uid !== null) {
      $xfer += $output->writeFieldBegin('uid', TType::I64, 1);
      $xfer += $output->writeI64($this->uid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->task_combination_id !== null) {
      $xfer += $output->writeFieldBegin('task_combination_id', TType::I32, 2);
      $xfer += $output->writeI32($this->task_combination_id);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetUserTaskCombinationRsp {
  static $_TSPEC;

  public $retcode = null;
  public $com_task_id = null;
  public $com_task_name = null;
  public $com_task_desc = null;
  public $com_task_category = null;
  public $task_count = null;
  public $completed_task = null;
  public $task_combination_detail = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'retcode',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'com_task_id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'com_task_name',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'com_task_desc',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'com_task_category',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'task_count',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'completed_task',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'task_combination_detail',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\xyz\tasksvr\TaskInfo',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['retcode'])) {
        $this->retcode = $vals['retcode'];
      }
      if (isset($vals['com_task_id'])) {
        $this->com_task_id = $vals['com_task_id'];
      }
      if (isset($vals['com_task_name'])) {
        $this->com_task_name = $vals['com_task_name'];
      }
      if (isset($vals['com_task_desc'])) {
        $this->com_task_desc = $vals['com_task_desc'];
      }
      if (isset($vals['com_task_category'])) {
        $this->com_task_category = $vals['com_task_category'];
      }
      if (isset($vals['task_count'])) {
        $this->task_count = $vals['task_count'];
      }
      if (isset($vals['completed_task'])) {
        $this->completed_task = $vals['completed_task'];
      }
      if (isset($vals['task_combination_detail'])) {
        $this->task_combination_detail = $vals['task_combination_detail'];
      }
    }
  }

  public function getName() {
    return 'GetUserTaskCombinationRsp';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->retcode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->com_task_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->com_task_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->com_task_desc);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->com_task_category);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->task_count);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->completed_task);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::LST) {
            $this->task_combination_detail = array();
            $_size70 = 0;
            $_etype73 = 0;
            $xfer += $input->readListBegin($_etype73, $_size70);
            for ($_i74 = 0; $_i74 < $_size70; ++$_i74)
            {
              $elem75 = null;
              $elem75 = new \xyz\tasksvr\TaskInfo();
              $xfer += $elem75->read($input);
              $this->task_combination_detail []= $elem75;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetUserTaskCombinationRsp');
    if ($this->retcode !== null) {
      $xfer += $output->writeFieldBegin('retcode', TType::I32, 1);
      $xfer += $output->writeI32($this->retcode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->com_task_id !== null) {
      $xfer += $output->writeFieldBegin('com_task_id', TType::I32, 2);
      $xfer += $output->writeI32($this->com_task_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->com_task_name !== null) {
      $xfer += $output->writeFieldBegin('com_task_name', TType::STRING, 3);
      $xfer += $output->writeString($this->com_task_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->com_task_desc !== null) {
      $xfer += $output->writeFieldBegin('com_task_desc', TType::STRING, 4);
      $xfer += $output->writeString($this->com_task_desc);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->com_task_category !== null) {
      $xfer += $output->writeFieldBegin('com_task_category', TType::I32, 5);
      $xfer += $output->writeI32($this->com_task_category);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->task_count !== null) {
      $xfer += $output->writeFieldBegin('task_count', TType::I32, 6);
      $xfer += $output->writeI32($this->task_count);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->completed_task !== null) {
      $xfer += $output->writeFieldBegin('completed_task', TType::I32, 7);
      $xfer += $output->writeI32($this->completed_task);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->task_combination_detail !== null) {
      if (!is_array($this->task_combination_detail)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('task_combination_detail', TType::LST, 8);
      {
        $output->writeListBegin(TType::STRUCT, count($this->task_combination_detail));
        {
          foreach ($this->task_combination_detail as $iter76)
          {
            $xfer += $iter76->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetComTaskIdFromNameReq {
  static $_TSPEC;

  public $com_task_name = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'com_task_name',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['com_task_name'])) {
        $this->com_task_name = $vals['com_task_name'];
      }
    }
  }

  public function getName() {
    return 'GetComTaskIdFromNameReq';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->com_task_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetComTaskIdFromNameReq');
    if ($this->com_task_name !== null) {
      $xfer += $output->writeFieldBegin('com_task_name', TType::STRING, 1);
      $xfer += $output->writeString($this->com_task_name);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetComTaskIdFromNameRsp {
  static $_TSPEC;

  public $retcode = null;
  public $com_task_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'retcode',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'com_task_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['retcode'])) {
        $this->retcode = $vals['retcode'];
      }
      if (isset($vals['com_task_id'])) {
        $this->com_task_id = $vals['com_task_id'];
      }
    }
  }

  public function getName() {
    return 'GetComTaskIdFromNameRsp';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->retcode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->com_task_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetComTaskIdFromNameRsp');
    if ($this->retcode !== null) {
      $xfer += $output->writeFieldBegin('retcode', TType::I32, 1);
      $xfer += $output->writeI32($this->retcode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->com_task_id !== null) {
      $xfer += $output->writeFieldBegin('com_task_id', TType::I32, 2);
      $xfer += $output->writeI32($this->com_task_id);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ComTaskDetail {
  static $_TSPEC;

  public $task_combination_id = null;
  public $task_relation = null;
  public $task_combination_name = null;
  public $task_combination_desc = null;
  public $task_combination_category = null;
  public $tasks = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'task_combination_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'task_relation',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'task_combination_name',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'task_combination_desc',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'task_combination_category',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'tasks',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['task_combination_id'])) {
        $this->task_combination_id = $vals['task_combination_id'];
      }
      if (isset($vals['task_relation'])) {
        $this->task_relation = $vals['task_relation'];
      }
      if (isset($vals['task_combination_name'])) {
        $this->task_combination_name = $vals['task_combination_name'];
      }
      if (isset($vals['task_combination_desc'])) {
        $this->task_combination_desc = $vals['task_combination_desc'];
      }
      if (isset($vals['task_combination_category'])) {
        $this->task_combination_category = $vals['task_combination_category'];
      }
      if (isset($vals['tasks'])) {
        $this->tasks = $vals['tasks'];
      }
    }
  }

  public function getName() {
    return 'ComTaskDetail';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->task_combination_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->task_relation);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->task_combination_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->task_combination_desc);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->task_combination_category);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::LST) {
            $this->tasks = array();
            $_size77 = 0;
            $_etype80 = 0;
            $xfer += $input->readListBegin($_etype80, $_size77);
            for ($_i81 = 0; $_i81 < $_size77; ++$_i81)
            {
              $elem82 = null;
              $xfer += $input->readI32($elem82);
              $this->tasks []= $elem82;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ComTaskDetail');
    if ($this->task_combination_id !== null) {
      $xfer += $output->writeFieldBegin('task_combination_id', TType::I32, 1);
      $xfer += $output->writeI32($this->task_combination_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->task_relation !== null) {
      $xfer += $output->writeFieldBegin('task_relation', TType::I32, 2);
      $xfer += $output->writeI32($this->task_relation);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->task_combination_name !== null) {
      $xfer += $output->writeFieldBegin('task_combination_name', TType::STRING, 3);
      $xfer += $output->writeString($this->task_combination_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->task_combination_desc !== null) {
      $xfer += $output->writeFieldBegin('task_combination_desc', TType::STRING, 4);
      $xfer += $output->writeString($this->task_combination_desc);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->task_combination_category !== null) {
      $xfer += $output->writeFieldBegin('task_combination_category', TType::I32, 5);
      $xfer += $output->writeI32($this->task_combination_category);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tasks !== null) {
      if (!is_array($this->tasks)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('tasks', TType::LST, 6);
      {
        $output->writeListBegin(TType::I32, count($this->tasks));
        {
          foreach ($this->tasks as $iter83)
          {
            $xfer += $output->writeI32($iter83);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class UserComTask {
  static $_TSPEC;

  public $user_com_tasks = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_com_tasks',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['user_com_tasks'])) {
        $this->user_com_tasks = $vals['user_com_tasks'];
      }
    }
  }

  public function getName() {
    return 'UserComTask';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->user_com_tasks = array();
            $_size84 = 0;
            $_etype87 = 0;
            $xfer += $input->readListBegin($_etype87, $_size84);
            for ($_i88 = 0; $_i88 < $_size84; ++$_i88)
            {
              $elem89 = null;
              $xfer += $input->readI32($elem89);
              $this->user_com_tasks []= $elem89;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('UserComTask');
    if ($this->user_com_tasks !== null) {
      if (!is_array($this->user_com_tasks)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('user_com_tasks', TType::LST, 1);
      {
        $output->writeListBegin(TType::I32, count($this->user_com_tasks));
        {
          foreach ($this->user_com_tasks as $iter90)
          {
            $xfer += $output->writeI32($iter90);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


