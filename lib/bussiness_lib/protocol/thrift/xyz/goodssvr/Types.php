<?php
namespace xyz\goodssvr;

/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


final class GoodsInOut {
  const ENUM_GOODS_IN = 1;
  const ENUM_GOODS_OUT = 2;
  static public $__names = array(
    1 => 'ENUM_GOODS_IN',
    2 => 'ENUM_GOODS_OUT',
  );
}

final class GoodsErrCode {
  const ERR_SVR_GOODS_ID = -400010001;
  const ERR_SVR_GOODS_NAME = -400010002;
  const ERR_SVR_GOODS_SUPPLIER = -400010003;
  const ERR_SVR_GOODS_OPER = -400010004;
  const ERR_SVR_GOODS_TOTAL = -400010005;
  const ERR_SVR_GOODS_DETAIL = -400010006;
  const ERR_SVR_GOODS_TYPE = -400010007;
  const ERR_SVR_GOODS_PARSE = -400010008;
  const ERR_SVR_GOODS_DB_CONNECT = -400010009;
  const ERR_SVR_GOODS_DB_INSERT = -400010010;
  const ERR_SVR_GOODS_DB_UPDATE = -400010011;
  const ERR_SVR_GOODS_DB_DEL = -400010012;
  const ERR_SVR_GOODS_DB_SELECT = -400010013;
  const ERR_SVR_GOODS_DB_SELECT_EMPTY = -400010014;
  const ERR_SVR_GOODS_STATE = -400010015;
  const ERR_SVR_GOODS_PARAMS = -400010016;
  const ERR_SVR_GOODS_TIME = -400010017;
  const ERR_SVR_GOODS_LEFT = -400010018;
  const ERR_SVR_GOODS_OUT_ID = -400010019;
  const ERR_SVR_GOODS_DELIVERY_TO = -400010020;
  const ERR_SVR_GOODS_COUNT_NOT_ENOUGH = -400010021;
  const ERR_SVR_GOODS_YTID = -400010022;
  const ERR_SVR_GOODS_CLIENT_IP = -400010023;
  const ERR_SVR_GOODS_SIGN_TYPE = -400010024;
  const ERR_SVR_GOODS_SIGN = -400010025;
  const ERR_SVR_GOODS_PUB_KEY = -400010026;
  const ERR_SVR_GOODS_CALLER = -400010027;
  const ERR_SVR_GOODS_PLATFORM = -400010028;
  const ERR_SVR_GOODS_VERIFY_SIGN = -400010029;
  const ERR_SVR_GOODS_EXT_INFO = -400010030;
  static public $__names = array(
    -400010001 => 'ERR_SVR_GOODS_ID',
    -400010002 => 'ERR_SVR_GOODS_NAME',
    -400010003 => 'ERR_SVR_GOODS_SUPPLIER',
    -400010004 => 'ERR_SVR_GOODS_OPER',
    -400010005 => 'ERR_SVR_GOODS_TOTAL',
    -400010006 => 'ERR_SVR_GOODS_DETAIL',
    -400010007 => 'ERR_SVR_GOODS_TYPE',
    -400010008 => 'ERR_SVR_GOODS_PARSE',
    -400010009 => 'ERR_SVR_GOODS_DB_CONNECT',
    -400010010 => 'ERR_SVR_GOODS_DB_INSERT',
    -400010011 => 'ERR_SVR_GOODS_DB_UPDATE',
    -400010012 => 'ERR_SVR_GOODS_DB_DEL',
    -400010013 => 'ERR_SVR_GOODS_DB_SELECT',
    -400010014 => 'ERR_SVR_GOODS_DB_SELECT_EMPTY',
    -400010015 => 'ERR_SVR_GOODS_STATE',
    -400010016 => 'ERR_SVR_GOODS_PARAMS',
    -400010017 => 'ERR_SVR_GOODS_TIME',
    -400010018 => 'ERR_SVR_GOODS_LEFT',
    -400010019 => 'ERR_SVR_GOODS_OUT_ID',
    -400010020 => 'ERR_SVR_GOODS_DELIVERY_TO',
    -400010021 => 'ERR_SVR_GOODS_COUNT_NOT_ENOUGH',
    -400010022 => 'ERR_SVR_GOODS_YTID',
    -400010023 => 'ERR_SVR_GOODS_CLIENT_IP',
    -400010024 => 'ERR_SVR_GOODS_SIGN_TYPE',
    -400010025 => 'ERR_SVR_GOODS_SIGN',
    -400010026 => 'ERR_SVR_GOODS_PUB_KEY',
    -400010027 => 'ERR_SVR_GOODS_CALLER',
    -400010028 => 'ERR_SVR_GOODS_PLATFORM',
    -400010029 => 'ERR_SVR_GOODS_VERIFY_SIGN',
    -400010030 => 'ERR_SVR_GOODS_EXT_INFO',
  );
}

final class GoodsPlatform {
  const ENUM_GOODS_PLATFROM_PC = 1;
  const ENUM_GOODS_PLATFROM_IPHONE = 2;
  const ENUM_GOODS_PLATFROM_IPAD = 3;
  const ENUM_GOODS_PLATFROM_ANDROID = 4;
  const ENUM_GOODS_PLATFROM_IKU = 5;
  static public $__names = array(
    1 => 'ENUM_GOODS_PLATFROM_PC',
    2 => 'ENUM_GOODS_PLATFROM_IPHONE',
    3 => 'ENUM_GOODS_PLATFROM_IPAD',
    4 => 'ENUM_GOODS_PLATFROM_ANDROID',
    5 => 'ENUM_GOODS_PLATFROM_IKU',
  );
}

final class GoodsType {
  const ENUM_GOODS_TYPE_VIRTUAL = 100001;
  const ENUM_GOODS_TYPE_REAL = 100002;
  const ENUM_GOODS_TYPE_CDKEY = 100003;
  static public $__names = array(
    100001 => 'ENUM_GOODS_TYPE_VIRTUAL',
    100002 => 'ENUM_GOODS_TYPE_REAL',
    100003 => 'ENUM_GOODS_TYPE_CDKEY',
  );
}

final class GoodsSubType {
  const ENUM_GOODS_SUB_TYPE_VIRTUAL_COM = 100001;
  const ENUM_GOODS_SUB_TYPE_VIRTUAL_JD = 100002;
  const ENUM_GOODS_SUB_TYPE_VIRTUAL_VIP = 100003;
  const ENUM_GOODS_SUB_TYPE_VIRTUAL_TAOBAO_COUPON = 100004;
  const ENUM_GOODS_SUB_TYPE_VIRTUAL_PCHANNEL_VIP = 100005;
  static public $__names = array(
    100001 => 'ENUM_GOODS_SUB_TYPE_VIRTUAL_COM',
    100002 => 'ENUM_GOODS_SUB_TYPE_VIRTUAL_JD',
    100003 => 'ENUM_GOODS_SUB_TYPE_VIRTUAL_VIP',
    100004 => 'ENUM_GOODS_SUB_TYPE_VIRTUAL_TAOBAO_COUPON',
    100005 => 'ENUM_GOODS_SUB_TYPE_VIRTUAL_PCHANNEL_VIP',
  );
}

final class GoodsArithmeticOperator {
  const ENUM_GOODS_OPERATOR_EQ = 1;
  const ENUM_GOODS_OPERATOR_NEQ = 2;
  const ENUM_GOODS_OPERATOR_LT = 3;
  const ENUM_GOODS_OPERATOR_LTE = 4;
  const ENUM_GOODS_OPERATOR_GT = 5;
  const ENUM_GOODS_OPERATOR_GTE = 6;
  const ENUM_GOODS_OPERATOR_MATCH = 7;
  const ENUM_GOODS_OPERATOR_IN = 8;
  static public $__names = array(
    1 => 'ENUM_GOODS_OPERATOR_EQ',
    2 => 'ENUM_GOODS_OPERATOR_NEQ',
    3 => 'ENUM_GOODS_OPERATOR_LT',
    4 => 'ENUM_GOODS_OPERATOR_LTE',
    5 => 'ENUM_GOODS_OPERATOR_GT',
    6 => 'ENUM_GOODS_OPERATOR_GTE',
    7 => 'ENUM_GOODS_OPERATOR_MATCH',
    8 => 'ENUM_GOODS_OPERATOR_IN',
  );
}

final class GoodsLogicOperator {
  const ENUM_GOODS_LOPERATOR_AND = 1;
  const ENUM_GOODS_LOPERATOR_OR = 2;
  static public $__names = array(
    1 => 'ENUM_GOODS_LOPERATOR_AND',
    2 => 'ENUM_GOODS_LOPERATOR_OR',
  );
}

final class GoodsCRUD {
  const ENUM_GOODS_OP_C = 1;
  const ENUM_GOODS_OP_D = 2;
  const ENUM_GOODS_OP_U = 3;
  const ENUM_GOODS_OP_R = 4;
  static public $__names = array(
    1 => 'ENUM_GOODS_OP_C',
    2 => 'ENUM_GOODS_OP_D',
    3 => 'ENUM_GOODS_OP_U',
    4 => 'ENUM_GOODS_OP_R',
  );
}

final class GoodsState {
  const ENUM_GOODS_STATE_INIT = 0;
  const ENUM_GOODS_STATE_PASS = 1;
  const ENUM_GOODS_STATE_UNPASS = 2;
  const ENUM_GOODS_STATE_USED = 3;
  const ENUM_GOODS_STATE_TASK_SET_DISABLE = 4;
  static public $__names = array(
    0 => 'ENUM_GOODS_STATE_INIT',
    1 => 'ENUM_GOODS_STATE_PASS',
    2 => 'ENUM_GOODS_STATE_UNPASS',
    3 => 'ENUM_GOODS_STATE_USED',
    4 => 'ENUM_GOODS_STATE_TASK_SET_DISABLE',
  );
}

class GoodsOneCondition {
  static $_TSPEC;

  public $field = null;
  public $value = null;
  public $aop = null;
  public $lop = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'field',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'value',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'aop',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'lop',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['field'])) {
        $this->field = $vals['field'];
      }
      if (isset($vals['value'])) {
        $this->value = $vals['value'];
      }
      if (isset($vals['aop'])) {
        $this->aop = $vals['aop'];
      }
      if (isset($vals['lop'])) {
        $this->lop = $vals['lop'];
      }
    }
  }

  public function getName() {
    return 'GoodsOneCondition';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->field);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->value);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->aop);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->lop);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GoodsOneCondition');
    if ($this->field !== null) {
      $xfer += $output->writeFieldBegin('field', TType::STRING, 1);
      $xfer += $output->writeString($this->field);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->value !== null) {
      $xfer += $output->writeFieldBegin('value', TType::STRING, 2);
      $xfer += $output->writeString($this->value);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->aop !== null) {
      $xfer += $output->writeFieldBegin('aop', TType::I32, 3);
      $xfer += $output->writeI32($this->aop);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lop !== null) {
      $xfer += $output->writeFieldBegin('lop', TType::I32, 4);
      $xfer += $output->writeI32($this->lop);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GoodsCondition {
  static $_TSPEC;

  public $con = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'con',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\xyz\goodssvr\GoodsOneCondition',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['con'])) {
        $this->con = $vals['con'];
      }
    }
  }

  public function getName() {
    return 'GoodsCondition';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->con = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readListBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $elem5 = new \xyz\goodssvr\GoodsOneCondition();
              $xfer += $elem5->read($input);
              $this->con []= $elem5;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GoodsCondition');
    if ($this->con !== null) {
      if (!is_array($this->con)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('con', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->con));
        {
          foreach ($this->con as $iter6)
          {
            $xfer += $iter6->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GoodsInInfo {
  static $_TSPEC;

  public $spu_id = null;
  public $type = null;
  public $sub_type = null;
  public $name = null;
  public $total = null;
  public $left = null;
  public $state = null;
  public $supplier = null;
  public $oper = null;
  public $time = null;
  public $detail = null;
  public $org_pic_url = null;
  public $big_pic_url = null;
  public $middle_pic_url = null;
  public $small_pic_url = null;
  public $click_url = null;
  public $desc = null;
  public $price = null;
  public $horizontal_pic_url = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'spu_id',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'type',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'sub_type',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'total',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'left',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'state',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'supplier',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'oper',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'time',
          'type' => TType::I64,
          ),
        11 => array(
          'var' => 'detail',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'org_pic_url',
          'type' => TType::STRING,
          ),
        13 => array(
          'var' => 'big_pic_url',
          'type' => TType::STRING,
          ),
        14 => array(
          'var' => 'middle_pic_url',
          'type' => TType::STRING,
          ),
        15 => array(
          'var' => 'small_pic_url',
          'type' => TType::STRING,
          ),
        16 => array(
          'var' => 'click_url',
          'type' => TType::STRING,
          ),
        17 => array(
          'var' => 'desc',
          'type' => TType::STRING,
          ),
        18 => array(
          'var' => 'price',
          'type' => TType::I64,
          ),
        19 => array(
          'var' => 'horizontal_pic_url',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['spu_id'])) {
        $this->spu_id = $vals['spu_id'];
      }
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['sub_type'])) {
        $this->sub_type = $vals['sub_type'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['total'])) {
        $this->total = $vals['total'];
      }
      if (isset($vals['left'])) {
        $this->left = $vals['left'];
      }
      if (isset($vals['state'])) {
        $this->state = $vals['state'];
      }
      if (isset($vals['supplier'])) {
        $this->supplier = $vals['supplier'];
      }
      if (isset($vals['oper'])) {
        $this->oper = $vals['oper'];
      }
      if (isset($vals['time'])) {
        $this->time = $vals['time'];
      }
      if (isset($vals['detail'])) {
        $this->detail = $vals['detail'];
      }
      if (isset($vals['org_pic_url'])) {
        $this->org_pic_url = $vals['org_pic_url'];
      }
      if (isset($vals['big_pic_url'])) {
        $this->big_pic_url = $vals['big_pic_url'];
      }
      if (isset($vals['middle_pic_url'])) {
        $this->middle_pic_url = $vals['middle_pic_url'];
      }
      if (isset($vals['small_pic_url'])) {
        $this->small_pic_url = $vals['small_pic_url'];
      }
      if (isset($vals['click_url'])) {
        $this->click_url = $vals['click_url'];
      }
      if (isset($vals['desc'])) {
        $this->desc = $vals['desc'];
      }
      if (isset($vals['price'])) {
        $this->price = $vals['price'];
      }
      if (isset($vals['horizontal_pic_url'])) {
        $this->horizontal_pic_url = $vals['horizontal_pic_url'];
      }
    }
  }

  public function getName() {
    return 'GoodsInInfo';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->spu_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->sub_type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->total);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->left);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->state);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->supplier);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->oper);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->detail);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->org_pic_url);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->big_pic_url);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->middle_pic_url);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->small_pic_url);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->click_url);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->desc);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 18:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->price);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 19:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->horizontal_pic_url);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GoodsInInfo');
    if ($this->spu_id !== null) {
      $xfer += $output->writeFieldBegin('spu_id', TType::I64, 1);
      $xfer += $output->writeI64($this->spu_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::I64, 2);
      $xfer += $output->writeI64($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sub_type !== null) {
      $xfer += $output->writeFieldBegin('sub_type', TType::I64, 3);
      $xfer += $output->writeI64($this->sub_type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 4);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->total !== null) {
      $xfer += $output->writeFieldBegin('total', TType::I32, 5);
      $xfer += $output->writeI32($this->total);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->left !== null) {
      $xfer += $output->writeFieldBegin('left', TType::I32, 6);
      $xfer += $output->writeI32($this->left);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->state !== null) {
      $xfer += $output->writeFieldBegin('state', TType::I32, 7);
      $xfer += $output->writeI32($this->state);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->supplier !== null) {
      $xfer += $output->writeFieldBegin('supplier', TType::STRING, 8);
      $xfer += $output->writeString($this->supplier);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->oper !== null) {
      $xfer += $output->writeFieldBegin('oper', TType::STRING, 9);
      $xfer += $output->writeString($this->oper);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->time !== null) {
      $xfer += $output->writeFieldBegin('time', TType::I64, 10);
      $xfer += $output->writeI64($this->time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->detail !== null) {
      $xfer += $output->writeFieldBegin('detail', TType::STRING, 11);
      $xfer += $output->writeString($this->detail);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->org_pic_url !== null) {
      $xfer += $output->writeFieldBegin('org_pic_url', TType::STRING, 12);
      $xfer += $output->writeString($this->org_pic_url);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->big_pic_url !== null) {
      $xfer += $output->writeFieldBegin('big_pic_url', TType::STRING, 13);
      $xfer += $output->writeString($this->big_pic_url);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->middle_pic_url !== null) {
      $xfer += $output->writeFieldBegin('middle_pic_url', TType::STRING, 14);
      $xfer += $output->writeString($this->middle_pic_url);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->small_pic_url !== null) {
      $xfer += $output->writeFieldBegin('small_pic_url', TType::STRING, 15);
      $xfer += $output->writeString($this->small_pic_url);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->click_url !== null) {
      $xfer += $output->writeFieldBegin('click_url', TType::STRING, 16);
      $xfer += $output->writeString($this->click_url);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->desc !== null) {
      $xfer += $output->writeFieldBegin('desc', TType::STRING, 17);
      $xfer += $output->writeString($this->desc);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->price !== null) {
      $xfer += $output->writeFieldBegin('price', TType::I64, 18);
      $xfer += $output->writeI64($this->price);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->horizontal_pic_url !== null) {
      $xfer += $output->writeFieldBegin('horizontal_pic_url', TType::STRING, 19);
      $xfer += $output->writeString($this->horizontal_pic_url);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetGoodsInInfoRsp {
  static $_TSPEC;

  public $retcode = null;
  public $info = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'retcode',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'info',
          'type' => TType::STRUCT,
          'class' => '\xyz\goodssvr\GoodsInInfo',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['retcode'])) {
        $this->retcode = $vals['retcode'];
      }
      if (isset($vals['info'])) {
        $this->info = $vals['info'];
      }
    }
  }

  public function getName() {
    return 'GetGoodsInInfoRsp';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->retcode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->info = new \xyz\goodssvr\GoodsInInfo();
            $xfer += $this->info->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetGoodsInInfoRsp');
    if ($this->retcode !== null) {
      $xfer += $output->writeFieldBegin('retcode', TType::I32, 1);
      $xfer += $output->writeI32($this->retcode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->info !== null) {
      if (!is_object($this->info)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('info', TType::STRUCT, 2);
      $xfer += $this->info->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetGoodsInListReq {
  static $_TSPEC;

  public $page = null;
  public $count = null;
  public $condition = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'page',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'count',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'condition',
          'type' => TType::STRUCT,
          'class' => '\xyz\goodssvr\GoodsCondition',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['page'])) {
        $this->page = $vals['page'];
      }
      if (isset($vals['count'])) {
        $this->count = $vals['count'];
      }
      if (isset($vals['condition'])) {
        $this->condition = $vals['condition'];
      }
    }
  }

  public function getName() {
    return 'GetGoodsInListReq';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->page);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->count);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->condition = new \xyz\goodssvr\GoodsCondition();
            $xfer += $this->condition->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetGoodsInListReq');
    if ($this->page !== null) {
      $xfer += $output->writeFieldBegin('page', TType::I32, 1);
      $xfer += $output->writeI32($this->page);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->count !== null) {
      $xfer += $output->writeFieldBegin('count', TType::I32, 2);
      $xfer += $output->writeI32($this->count);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->condition !== null) {
      if (!is_object($this->condition)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('condition', TType::STRUCT, 3);
      $xfer += $this->condition->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetGoodsInListRsp {
  static $_TSPEC;

  public $retcode = null;
  public $goods_list = null;
  public $total_page = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'retcode',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'goods_list',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\xyz\goodssvr\GoodsInInfo',
            ),
          ),
        3 => array(
          'var' => 'total_page',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['retcode'])) {
        $this->retcode = $vals['retcode'];
      }
      if (isset($vals['goods_list'])) {
        $this->goods_list = $vals['goods_list'];
      }
      if (isset($vals['total_page'])) {
        $this->total_page = $vals['total_page'];
      }
    }
  }

  public function getName() {
    return 'GetGoodsInListRsp';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->retcode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->goods_list = array();
            $_size7 = 0;
            $_etype10 = 0;
            $xfer += $input->readListBegin($_etype10, $_size7);
            for ($_i11 = 0; $_i11 < $_size7; ++$_i11)
            {
              $elem12 = null;
              $elem12 = new \xyz\goodssvr\GoodsInInfo();
              $xfer += $elem12->read($input);
              $this->goods_list []= $elem12;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->total_page);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetGoodsInListRsp');
    if ($this->retcode !== null) {
      $xfer += $output->writeFieldBegin('retcode', TType::I32, 1);
      $xfer += $output->writeI32($this->retcode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->goods_list !== null) {
      if (!is_array($this->goods_list)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('goods_list', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRUCT, count($this->goods_list));
        {
          foreach ($this->goods_list as $iter13)
          {
            $xfer += $iter13->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->total_page !== null) {
      $xfer += $output->writeFieldBegin('total_page', TType::I32, 3);
      $xfer += $output->writeI32($this->total_page);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GoodsOutInfo {
  static $_TSPEC;

  public $apply_id = null;
  public $total = null;
  public $left = null;
  public $state = null;
  public $delivery_to = null;
  public $oper = null;
  public $pri_key = null;
  public $time = null;
  public $in_info = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'apply_id',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'total',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'left',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'state',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'delivery_to',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'oper',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'pri_key',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'time',
          'type' => TType::I64,
          ),
        9 => array(
          'var' => 'in_info',
          'type' => TType::STRUCT,
          'class' => '\xyz\goodssvr\GoodsInInfo',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['apply_id'])) {
        $this->apply_id = $vals['apply_id'];
      }
      if (isset($vals['total'])) {
        $this->total = $vals['total'];
      }
      if (isset($vals['left'])) {
        $this->left = $vals['left'];
      }
      if (isset($vals['state'])) {
        $this->state = $vals['state'];
      }
      if (isset($vals['delivery_to'])) {
        $this->delivery_to = $vals['delivery_to'];
      }
      if (isset($vals['oper'])) {
        $this->oper = $vals['oper'];
      }
      if (isset($vals['pri_key'])) {
        $this->pri_key = $vals['pri_key'];
      }
      if (isset($vals['time'])) {
        $this->time = $vals['time'];
      }
      if (isset($vals['in_info'])) {
        $this->in_info = $vals['in_info'];
      }
    }
  }

  public function getName() {
    return 'GoodsOutInfo';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->apply_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->total);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->left);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->state);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->delivery_to);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->oper);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->pri_key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRUCT) {
            $this->in_info = new \xyz\goodssvr\GoodsInInfo();
            $xfer += $this->in_info->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GoodsOutInfo');
    if ($this->apply_id !== null) {
      $xfer += $output->writeFieldBegin('apply_id', TType::I64, 1);
      $xfer += $output->writeI64($this->apply_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->total !== null) {
      $xfer += $output->writeFieldBegin('total', TType::I32, 2);
      $xfer += $output->writeI32($this->total);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->left !== null) {
      $xfer += $output->writeFieldBegin('left', TType::I32, 3);
      $xfer += $output->writeI32($this->left);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->state !== null) {
      $xfer += $output->writeFieldBegin('state', TType::I32, 4);
      $xfer += $output->writeI32($this->state);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->delivery_to !== null) {
      $xfer += $output->writeFieldBegin('delivery_to', TType::STRING, 5);
      $xfer += $output->writeString($this->delivery_to);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->oper !== null) {
      $xfer += $output->writeFieldBegin('oper', TType::STRING, 6);
      $xfer += $output->writeString($this->oper);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pri_key !== null) {
      $xfer += $output->writeFieldBegin('pri_key', TType::STRING, 7);
      $xfer += $output->writeString($this->pri_key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->time !== null) {
      $xfer += $output->writeFieldBegin('time', TType::I64, 8);
      $xfer += $output->writeI64($this->time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->in_info !== null) {
      if (!is_object($this->in_info)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('in_info', TType::STRUCT, 9);
      $xfer += $this->in_info->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GoodsInfo {
  static $_TSPEC;

  public $sku_id = null;
  public $detail = null;
  public $out_info = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'sku_id',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'detail',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'out_info',
          'type' => TType::STRUCT,
          'class' => '\xyz\goodssvr\GoodsOutInfo',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['sku_id'])) {
        $this->sku_id = $vals['sku_id'];
      }
      if (isset($vals['detail'])) {
        $this->detail = $vals['detail'];
      }
      if (isset($vals['out_info'])) {
        $this->out_info = $vals['out_info'];
      }
    }
  }

  public function getName() {
    return 'GoodsInfo';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->sku_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->detail);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->out_info = new \xyz\goodssvr\GoodsOutInfo();
            $xfer += $this->out_info->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GoodsInfo');
    if ($this->sku_id !== null) {
      $xfer += $output->writeFieldBegin('sku_id', TType::I64, 1);
      $xfer += $output->writeI64($this->sku_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->detail !== null) {
      $xfer += $output->writeFieldBegin('detail', TType::STRING, 2);
      $xfer += $output->writeString($this->detail);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->out_info !== null) {
      if (!is_object($this->out_info)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('out_info', TType::STRUCT, 3);
      $xfer += $this->out_info->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GoodsOrder {
  static $_TSPEC;

  public $spu_id = null;
  public $apply_id = null;
  public $sku_id = null;
  public $ytid = null;
  public $time = null;
  public $name = null;
  public $detail = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'spu_id',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'apply_id',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'sku_id',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'ytid',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'time',
          'type' => TType::I64,
          ),
        6 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'detail',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['spu_id'])) {
        $this->spu_id = $vals['spu_id'];
      }
      if (isset($vals['apply_id'])) {
        $this->apply_id = $vals['apply_id'];
      }
      if (isset($vals['sku_id'])) {
        $this->sku_id = $vals['sku_id'];
      }
      if (isset($vals['ytid'])) {
        $this->ytid = $vals['ytid'];
      }
      if (isset($vals['time'])) {
        $this->time = $vals['time'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['detail'])) {
        $this->detail = $vals['detail'];
      }
    }
  }

  public function getName() {
    return 'GoodsOrder';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->spu_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->apply_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->sku_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->ytid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->detail);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GoodsOrder');
    if ($this->spu_id !== null) {
      $xfer += $output->writeFieldBegin('spu_id', TType::I64, 1);
      $xfer += $output->writeI64($this->spu_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->apply_id !== null) {
      $xfer += $output->writeFieldBegin('apply_id', TType::I64, 2);
      $xfer += $output->writeI64($this->apply_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sku_id !== null) {
      $xfer += $output->writeFieldBegin('sku_id', TType::I64, 3);
      $xfer += $output->writeI64($this->sku_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ytid !== null) {
      $xfer += $output->writeFieldBegin('ytid', TType::I64, 4);
      $xfer += $output->writeI64($this->ytid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->time !== null) {
      $xfer += $output->writeFieldBegin('time', TType::I64, 5);
      $xfer += $output->writeI64($this->time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 6);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->detail !== null) {
      $xfer += $output->writeFieldBegin('detail', TType::STRING, 7);
      $xfer += $output->writeString($this->detail);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetGoodsOrderReq {
  static $_TSPEC;

  public $page = null;
  public $count = null;
  public $condition = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'page',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'count',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'condition',
          'type' => TType::STRUCT,
          'class' => '\xyz\goodssvr\GoodsCondition',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['page'])) {
        $this->page = $vals['page'];
      }
      if (isset($vals['count'])) {
        $this->count = $vals['count'];
      }
      if (isset($vals['condition'])) {
        $this->condition = $vals['condition'];
      }
    }
  }

  public function getName() {
    return 'GetGoodsOrderReq';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->page);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->count);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->condition = new \xyz\goodssvr\GoodsCondition();
            $xfer += $this->condition->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetGoodsOrderReq');
    if ($this->page !== null) {
      $xfer += $output->writeFieldBegin('page', TType::I32, 1);
      $xfer += $output->writeI32($this->page);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->count !== null) {
      $xfer += $output->writeFieldBegin('count', TType::I32, 2);
      $xfer += $output->writeI32($this->count);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->condition !== null) {
      if (!is_object($this->condition)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('condition', TType::STRUCT, 3);
      $xfer += $this->condition->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetGoodsOrderRsp {
  static $_TSPEC;

  public $retcode = null;
  public $order_list = null;
  public $total_page = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'retcode',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'order_list',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\xyz\goodssvr\GoodsOrder',
            ),
          ),
        3 => array(
          'var' => 'total_page',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['retcode'])) {
        $this->retcode = $vals['retcode'];
      }
      if (isset($vals['order_list'])) {
        $this->order_list = $vals['order_list'];
      }
      if (isset($vals['total_page'])) {
        $this->total_page = $vals['total_page'];
      }
    }
  }

  public function getName() {
    return 'GetGoodsOrderRsp';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->retcode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->order_list = array();
            $_size14 = 0;
            $_etype17 = 0;
            $xfer += $input->readListBegin($_etype17, $_size14);
            for ($_i18 = 0; $_i18 < $_size14; ++$_i18)
            {
              $elem19 = null;
              $elem19 = new \xyz\goodssvr\GoodsOrder();
              $xfer += $elem19->read($input);
              $this->order_list []= $elem19;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->total_page);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetGoodsOrderRsp');
    if ($this->retcode !== null) {
      $xfer += $output->writeFieldBegin('retcode', TType::I32, 1);
      $xfer += $output->writeI32($this->retcode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->order_list !== null) {
      if (!is_array($this->order_list)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('order_list', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRUCT, count($this->order_list));
        {
          foreach ($this->order_list as $iter20)
          {
            $xfer += $iter20->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->total_page !== null) {
      $xfer += $output->writeFieldBegin('total_page', TType::I32, 3);
      $xfer += $output->writeI32($this->total_page);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ApplyGoodsOutReq {
  static $_TSPEC;

  public $spu_id = null;
  public $apply_id = null;
  public $count = null;
  public $oper = null;
  public $delivery_to = null;
  public $pri_key = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'spu_id',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'apply_id',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'count',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'oper',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'delivery_to',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'pri_key',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['spu_id'])) {
        $this->spu_id = $vals['spu_id'];
      }
      if (isset($vals['apply_id'])) {
        $this->apply_id = $vals['apply_id'];
      }
      if (isset($vals['count'])) {
        $this->count = $vals['count'];
      }
      if (isset($vals['oper'])) {
        $this->oper = $vals['oper'];
      }
      if (isset($vals['delivery_to'])) {
        $this->delivery_to = $vals['delivery_to'];
      }
      if (isset($vals['pri_key'])) {
        $this->pri_key = $vals['pri_key'];
      }
    }
  }

  public function getName() {
    return 'ApplyGoodsOutReq';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->spu_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->apply_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->count);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->oper);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->delivery_to);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->pri_key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ApplyGoodsOutReq');
    if ($this->spu_id !== null) {
      $xfer += $output->writeFieldBegin('spu_id', TType::I64, 1);
      $xfer += $output->writeI64($this->spu_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->apply_id !== null) {
      $xfer += $output->writeFieldBegin('apply_id', TType::I64, 2);
      $xfer += $output->writeI64($this->apply_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->count !== null) {
      $xfer += $output->writeFieldBegin('count', TType::I32, 3);
      $xfer += $output->writeI32($this->count);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->oper !== null) {
      $xfer += $output->writeFieldBegin('oper', TType::STRING, 4);
      $xfer += $output->writeString($this->oper);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->delivery_to !== null) {
      $xfer += $output->writeFieldBegin('delivery_to', TType::STRING, 5);
      $xfer += $output->writeString($this->delivery_to);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pri_key !== null) {
      $xfer += $output->writeFieldBegin('pri_key', TType::STRING, 6);
      $xfer += $output->writeString($this->pri_key);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ApplyGoodsOutRsp {
  static $_TSPEC;

  public $retcode = null;
  public $spu_id = null;
  public $apply_id = null;
  public $pri_key = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'retcode',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'spu_id',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'apply_id',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'pri_key',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['retcode'])) {
        $this->retcode = $vals['retcode'];
      }
      if (isset($vals['spu_id'])) {
        $this->spu_id = $vals['spu_id'];
      }
      if (isset($vals['apply_id'])) {
        $this->apply_id = $vals['apply_id'];
      }
      if (isset($vals['pri_key'])) {
        $this->pri_key = $vals['pri_key'];
      }
    }
  }

  public function getName() {
    return 'ApplyGoodsOutRsp';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->retcode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->spu_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->apply_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->pri_key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ApplyGoodsOutRsp');
    if ($this->retcode !== null) {
      $xfer += $output->writeFieldBegin('retcode', TType::I32, 1);
      $xfer += $output->writeI32($this->retcode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->spu_id !== null) {
      $xfer += $output->writeFieldBegin('spu_id', TType::I64, 2);
      $xfer += $output->writeI64($this->spu_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->apply_id !== null) {
      $xfer += $output->writeFieldBegin('apply_id', TType::I64, 3);
      $xfer += $output->writeI64($this->apply_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pri_key !== null) {
      $xfer += $output->writeFieldBegin('pri_key', TType::STRING, 4);
      $xfer += $output->writeString($this->pri_key);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetGoodsOutInfoRsp {
  static $_TSPEC;

  public $retcode = null;
  public $info = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'retcode',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'info',
          'type' => TType::STRUCT,
          'class' => '\xyz\goodssvr\GoodsOutInfo',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['retcode'])) {
        $this->retcode = $vals['retcode'];
      }
      if (isset($vals['info'])) {
        $this->info = $vals['info'];
      }
    }
  }

  public function getName() {
    return 'GetGoodsOutInfoRsp';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->retcode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->info = new \xyz\goodssvr\GoodsOutInfo();
            $xfer += $this->info->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetGoodsOutInfoRsp');
    if ($this->retcode !== null) {
      $xfer += $output->writeFieldBegin('retcode', TType::I32, 1);
      $xfer += $output->writeI32($this->retcode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->info !== null) {
      if (!is_object($this->info)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('info', TType::STRUCT, 2);
      $xfer += $this->info->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetGoodsOutListReq {
  static $_TSPEC;

  public $page = null;
  public $count = null;
  public $condition = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'page',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'count',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'condition',
          'type' => TType::MAP,
          'ktype' => TType::I32,
          'vtype' => TType::STRUCT,
          'key' => array(
            'type' => TType::I32,
          ),
          'val' => array(
            'type' => TType::STRUCT,
            'class' => '\xyz\goodssvr\GoodsCondition',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['page'])) {
        $this->page = $vals['page'];
      }
      if (isset($vals['count'])) {
        $this->count = $vals['count'];
      }
      if (isset($vals['condition'])) {
        $this->condition = $vals['condition'];
      }
    }
  }

  public function getName() {
    return 'GetGoodsOutListReq';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->page);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->count);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::MAP) {
            $this->condition = array();
            $_size21 = 0;
            $_ktype22 = 0;
            $_vtype23 = 0;
            $xfer += $input->readMapBegin($_ktype22, $_vtype23, $_size21);
            for ($_i25 = 0; $_i25 < $_size21; ++$_i25)
            {
              $key26 = 0;
              $val27 = new \xyz\goodssvr\GoodsCondition();
              $xfer += $input->readI32($key26);
              $val27 = new \xyz\goodssvr\GoodsCondition();
              $xfer += $val27->read($input);
              $this->condition[$key26] = $val27;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetGoodsOutListReq');
    if ($this->page !== null) {
      $xfer += $output->writeFieldBegin('page', TType::I32, 1);
      $xfer += $output->writeI32($this->page);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->count !== null) {
      $xfer += $output->writeFieldBegin('count', TType::I32, 2);
      $xfer += $output->writeI32($this->count);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->condition !== null) {
      if (!is_array($this->condition)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('condition', TType::MAP, 3);
      {
        $output->writeMapBegin(TType::I32, TType::STRUCT, count($this->condition));
        {
          foreach ($this->condition as $kiter28 => $viter29)
          {
            $xfer += $output->writeI32($kiter28);
            $xfer += $viter29->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetGoodsOutListRsp {
  static $_TSPEC;

  public $retcode = null;
  public $goods_list = null;
  public $total_page = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'retcode',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'goods_list',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\xyz\goodssvr\GoodsOutInfo',
            ),
          ),
        3 => array(
          'var' => 'total_page',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['retcode'])) {
        $this->retcode = $vals['retcode'];
      }
      if (isset($vals['goods_list'])) {
        $this->goods_list = $vals['goods_list'];
      }
      if (isset($vals['total_page'])) {
        $this->total_page = $vals['total_page'];
      }
    }
  }

  public function getName() {
    return 'GetGoodsOutListRsp';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->retcode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->goods_list = array();
            $_size30 = 0;
            $_etype33 = 0;
            $xfer += $input->readListBegin($_etype33, $_size30);
            for ($_i34 = 0; $_i34 < $_size30; ++$_i34)
            {
              $elem35 = null;
              $elem35 = new \xyz\goodssvr\GoodsOutInfo();
              $xfer += $elem35->read($input);
              $this->goods_list []= $elem35;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->total_page);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetGoodsOutListRsp');
    if ($this->retcode !== null) {
      $xfer += $output->writeFieldBegin('retcode', TType::I32, 1);
      $xfer += $output->writeI32($this->retcode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->goods_list !== null) {
      if (!is_array($this->goods_list)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('goods_list', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRUCT, count($this->goods_list));
        {
          foreach ($this->goods_list as $iter36)
          {
            $xfer += $iter36->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->total_page !== null) {
      $xfer += $output->writeFieldBegin('total_page', TType::I32, 3);
      $xfer += $output->writeI32($this->total_page);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MGetGoodsOutReq {
  static $_TSPEC;

  public $apply_ids = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'apply_ids',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['apply_ids'])) {
        $this->apply_ids = $vals['apply_ids'];
      }
    }
  }

  public function getName() {
    return 'MGetGoodsOutReq';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->apply_ids = array();
            $_size37 = 0;
            $_etype40 = 0;
            $xfer += $input->readListBegin($_etype40, $_size37);
            for ($_i41 = 0; $_i41 < $_size37; ++$_i41)
            {
              $elem42 = null;
              $xfer += $input->readI64($elem42);
              $this->apply_ids []= $elem42;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MGetGoodsOutReq');
    if ($this->apply_ids !== null) {
      if (!is_array($this->apply_ids)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('apply_ids', TType::LST, 1);
      {
        $output->writeListBegin(TType::I64, count($this->apply_ids));
        {
          foreach ($this->apply_ids as $iter43)
          {
            $xfer += $output->writeI64($iter43);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MGetGoodsOutRsp {
  static $_TSPEC;

  public $retcode = null;
  public $info = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'retcode',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'info',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::STRUCT,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::STRUCT,
            'class' => '\xyz\goodssvr\GoodsOutInfo',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['retcode'])) {
        $this->retcode = $vals['retcode'];
      }
      if (isset($vals['info'])) {
        $this->info = $vals['info'];
      }
    }
  }

  public function getName() {
    return 'MGetGoodsOutRsp';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->retcode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::MAP) {
            $this->info = array();
            $_size44 = 0;
            $_ktype45 = 0;
            $_vtype46 = 0;
            $xfer += $input->readMapBegin($_ktype45, $_vtype46, $_size44);
            for ($_i48 = 0; $_i48 < $_size44; ++$_i48)
            {
              $key49 = 0;
              $val50 = new \xyz\goodssvr\GoodsOutInfo();
              $xfer += $input->readI64($key49);
              $val50 = new \xyz\goodssvr\GoodsOutInfo();
              $xfer += $val50->read($input);
              $this->info[$key49] = $val50;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MGetGoodsOutRsp');
    if ($this->retcode !== null) {
      $xfer += $output->writeFieldBegin('retcode', TType::I32, 1);
      $xfer += $output->writeI32($this->retcode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->info !== null) {
      if (!is_array($this->info)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('info', TType::MAP, 2);
      {
        $output->writeMapBegin(TType::I64, TType::STRUCT, count($this->info));
        {
          foreach ($this->info as $kiter51 => $viter52)
          {
            $xfer += $output->writeI64($kiter51);
            $xfer += $viter52->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MGetGoodsInReq {
  static $_TSPEC;

  public $spu_ids = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'spu_ids',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['spu_ids'])) {
        $this->spu_ids = $vals['spu_ids'];
      }
    }
  }

  public function getName() {
    return 'MGetGoodsInReq';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->spu_ids = array();
            $_size53 = 0;
            $_etype56 = 0;
            $xfer += $input->readListBegin($_etype56, $_size53);
            for ($_i57 = 0; $_i57 < $_size53; ++$_i57)
            {
              $elem58 = null;
              $xfer += $input->readI64($elem58);
              $this->spu_ids []= $elem58;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MGetGoodsInReq');
    if ($this->spu_ids !== null) {
      if (!is_array($this->spu_ids)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('spu_ids', TType::LST, 1);
      {
        $output->writeListBegin(TType::I64, count($this->spu_ids));
        {
          foreach ($this->spu_ids as $iter59)
          {
            $xfer += $output->writeI64($iter59);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MGetGoodsInRsp {
  static $_TSPEC;

  public $retcode = null;
  public $info = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'retcode',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'info',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::STRUCT,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::STRUCT,
            'class' => '\xyz\goodssvr\GoodsInInfo',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['retcode'])) {
        $this->retcode = $vals['retcode'];
      }
      if (isset($vals['info'])) {
        $this->info = $vals['info'];
      }
    }
  }

  public function getName() {
    return 'MGetGoodsInRsp';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->retcode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::MAP) {
            $this->info = array();
            $_size60 = 0;
            $_ktype61 = 0;
            $_vtype62 = 0;
            $xfer += $input->readMapBegin($_ktype61, $_vtype62, $_size60);
            for ($_i64 = 0; $_i64 < $_size60; ++$_i64)
            {
              $key65 = 0;
              $val66 = new \xyz\goodssvr\GoodsInInfo();
              $xfer += $input->readI64($key65);
              $val66 = new \xyz\goodssvr\GoodsInInfo();
              $xfer += $val66->read($input);
              $this->info[$key65] = $val66;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MGetGoodsInRsp');
    if ($this->retcode !== null) {
      $xfer += $output->writeFieldBegin('retcode', TType::I32, 1);
      $xfer += $output->writeI32($this->retcode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->info !== null) {
      if (!is_array($this->info)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('info', TType::MAP, 2);
      {
        $output->writeMapBegin(TType::I64, TType::STRUCT, count($this->info));
        {
          foreach ($this->info as $kiter67 => $viter68)
          {
            $xfer += $output->writeI64($kiter67);
            $xfer += $viter68->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetGoodsReq {
  static $_TSPEC;

  public $ytid = null;
  public $platform = null;
  public $spu_id = null;
  public $client_ip = null;
  public $sign_type = null;
  public $sign = null;
  public $apply_id = null;
  public $from_service = null;
  public $ext_info = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ytid',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'platform',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'spu_id',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'client_ip',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'sign_type',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'sign',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'apply_id',
          'type' => TType::I64,
          ),
        8 => array(
          'var' => 'from_service',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'ext_info',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ytid'])) {
        $this->ytid = $vals['ytid'];
      }
      if (isset($vals['platform'])) {
        $this->platform = $vals['platform'];
      }
      if (isset($vals['spu_id'])) {
        $this->spu_id = $vals['spu_id'];
      }
      if (isset($vals['client_ip'])) {
        $this->client_ip = $vals['client_ip'];
      }
      if (isset($vals['sign_type'])) {
        $this->sign_type = $vals['sign_type'];
      }
      if (isset($vals['sign'])) {
        $this->sign = $vals['sign'];
      }
      if (isset($vals['apply_id'])) {
        $this->apply_id = $vals['apply_id'];
      }
      if (isset($vals['from_service'])) {
        $this->from_service = $vals['from_service'];
      }
      if (isset($vals['ext_info'])) {
        $this->ext_info = $vals['ext_info'];
      }
    }
  }

  public function getName() {
    return 'GetGoodsReq';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->ytid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->platform);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->spu_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->client_ip);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->sign_type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->sign);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->apply_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->from_service);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ext_info);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetGoodsReq');
    if ($this->ytid !== null) {
      $xfer += $output->writeFieldBegin('ytid', TType::I64, 1);
      $xfer += $output->writeI64($this->ytid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->platform !== null) {
      $xfer += $output->writeFieldBegin('platform', TType::STRING, 2);
      $xfer += $output->writeString($this->platform);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->spu_id !== null) {
      $xfer += $output->writeFieldBegin('spu_id', TType::I64, 3);
      $xfer += $output->writeI64($this->spu_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->client_ip !== null) {
      $xfer += $output->writeFieldBegin('client_ip', TType::STRING, 4);
      $xfer += $output->writeString($this->client_ip);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sign_type !== null) {
      $xfer += $output->writeFieldBegin('sign_type', TType::STRING, 5);
      $xfer += $output->writeString($this->sign_type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sign !== null) {
      $xfer += $output->writeFieldBegin('sign', TType::STRING, 6);
      $xfer += $output->writeString($this->sign);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->apply_id !== null) {
      $xfer += $output->writeFieldBegin('apply_id', TType::I64, 7);
      $xfer += $output->writeI64($this->apply_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->from_service !== null) {
      $xfer += $output->writeFieldBegin('from_service', TType::STRING, 8);
      $xfer += $output->writeString($this->from_service);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ext_info !== null) {
      $xfer += $output->writeFieldBegin('ext_info', TType::STRING, 9);
      $xfer += $output->writeString($this->ext_info);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetGoodsRsp {
  static $_TSPEC;

  public $retcode = null;
  public $info = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'retcode',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'info',
          'type' => TType::STRUCT,
          'class' => '\xyz\goodssvr\GoodsInfo',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['retcode'])) {
        $this->retcode = $vals['retcode'];
      }
      if (isset($vals['info'])) {
        $this->info = $vals['info'];
      }
    }
  }

  public function getName() {
    return 'GetGoodsRsp';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->retcode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->info = new \xyz\goodssvr\GoodsInfo();
            $xfer += $this->info->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetGoodsRsp');
    if ($this->retcode !== null) {
      $xfer += $output->writeFieldBegin('retcode', TType::I32, 1);
      $xfer += $output->writeI32($this->retcode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->info !== null) {
      if (!is_object($this->info)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('info', TType::STRUCT, 2);
      $xfer += $this->info->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


