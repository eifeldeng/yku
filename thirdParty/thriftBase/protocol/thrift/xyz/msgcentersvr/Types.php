<?php
namespace xyz\msgcentersvr;

/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


final class EM_MSG_STATUS {
  const EM_PSUDO_EXPOSED = -1;
  const EM_CREATED = 0;
  const EM_POPED = 1;
  const EM_EXPOSED = 1;
  const EM_READED = 2;
  const EM_CANCLED = 3;
  const EM_DELETED = 4;
  const EM_EXPIRED = 5;
  static public $__names = array(
    -1 => 'EM_PSUDO_EXPOSED',
    0 => 'EM_CREATED',
    1 => 'EM_POPED',
    1 => 'EM_EXPOSED',
    2 => 'EM_READED',
    3 => 'EM_CANCLED',
    4 => 'EM_DELETED',
    5 => 'EM_EXPIRED',
  );
}

final class EM_MSG_DISPLAY {
  const EM_MSG_DISPLAY_STRONG = 1;
  const EM_MSG_DISPLAY_NORMAL = 2;
  const EM_MSG_DISPLAY_WEAK = 3;
  const EM_MSG_DISPLAY_TOP = 101;
  static public $__names = array(
    1 => 'EM_MSG_DISPLAY_STRONG',
    2 => 'EM_MSG_DISPLAY_NORMAL',
    3 => 'EM_MSG_DISPLAY_WEAK',
    101 => 'EM_MSG_DISPLAY_TOP',
  );
}

final class EM_MSG_CATEGORY {
  const EM_SYSTEM = 1;
  const EM_FUNC = 1001;
  const EM_BUSINESS = 100001;
  static public $__names = array(
    1 => 'EM_SYSTEM',
    1001 => 'EM_FUNC',
    100001 => 'EM_BUSINESS',
  );
}

final class EM_JUMP_TYPE {
  const EM_JUMPTO_NONE = 0;
  const EM_JUMPTO_BUYVIP = 1;
  const EM_JUMPTO_H5 = 2;
  const EM_JUMPTO_VEDIO = 3;
  const EM_JUMPTO_SHOW = 4;
  const EM_JUMPTO_HOT_TOPIC = 5;
  const EM_JUMPTO_TOPIC = 6;
  const EM_JUMPTO_POP = 7;
  const EM_JUMPTO_AGGREGATION = 8;
  static public $__names = array(
    0 => 'EM_JUMPTO_NONE',
    1 => 'EM_JUMPTO_BUYVIP',
    2 => 'EM_JUMPTO_H5',
    3 => 'EM_JUMPTO_VEDIO',
    4 => 'EM_JUMPTO_SHOW',
    5 => 'EM_JUMPTO_HOT_TOPIC',
    6 => 'EM_JUMPTO_TOPIC',
    7 => 'EM_JUMPTO_POP',
    8 => 'EM_JUMPTO_AGGREGATION',
  );
}

final class EM_SUB_TYPE {
  const EM_DEFAULT = 0;
  const EM_VEDIO = 1;
  const EM_PIC_TEXT = 2;
  const EM_VEDIO_PIC = 3;
  static public $__names = array(
    0 => 'EM_DEFAULT',
    1 => 'EM_VEDIO',
    2 => 'EM_PIC_TEXT',
    3 => 'EM_VEDIO_PIC',
  );
}

final class EM_POPUP_TYPE {
  const EM_POPUP = 1;
  const EM_NOTPOPUP = 2;
  static public $__names = array(
    1 => 'EM_POPUP',
    2 => 'EM_NOTPOPUP',
  );
}

final class EM_MSG_MODE {
  const EM_SINGLE_CREATED = 1;
  const EM_SINGLE_NODISPATCH = 2;
  const EM_SINGLE_DELETE = 3;
  const EM_SINGLE_DISPATCHING = 4;
  const EM_SINGLE_FINISHED = 5;
  const EM_GROUP_CREATED = 10;
  const EM_GROUP_NODISPATCH = 11;
  const EM_GROUP_DELETE = 12;
  static public $__names = array(
    1 => 'EM_SINGLE_CREATED',
    2 => 'EM_SINGLE_NODISPATCH',
    3 => 'EM_SINGLE_DELETE',
    4 => 'EM_SINGLE_DISPATCHING',
    5 => 'EM_SINGLE_FINISHED',
    10 => 'EM_GROUP_CREATED',
    11 => 'EM_GROUP_NODISPATCH',
    12 => 'EM_GROUP_DELETE',
  );
}

final class EM_MSG_LOCATION {
  const EM_DEFAULT = 0;
  const EM_INDEXPAGE_BANNER = 1;
  static public $__names = array(
    0 => 'EM_DEFAULT',
    1 => 'EM_INDEXPAGE_BANNER',
  );
}

final class EM_TERM {
  const EM_ALL = 0;
  const EM_ONCE = 1;
  const EM_ANDROID = 2;
  const EM_IOS = 4;
  const EM_WIN = 8;
  const EM_WEB = 16;
  const EM_PC = 32;
  const EM_IPAD = 64;
  static public $__names = array(
    0 => 'EM_ALL',
    1 => 'EM_ONCE',
    2 => 'EM_ANDROID',
    4 => 'EM_IOS',
    8 => 'EM_WIN',
    16 => 'EM_WEB',
    32 => 'EM_PC',
    64 => 'EM_IPAD',
  );
}

final class EM_TYPE {
  const EM_SINGLE = 0;
  const EM_GROUP = 1;
  const EM_DBCONF_NOTIFY = 2;
  const EM_DBCONF_FEE = 3;
  const EM_MOVIE_TICKET = 1000;
  const EM_GRADE = 1001;
  const EM_SELFCHANNEL_INCOME = 1002;
  const EM_SELFCHANNEL_CETIFICATION = 1003;
  const EM_VIDEO_PUBLISH = 1004;
  const EM_VEDIO_REVIEW = 1005;
  const EM_CHAT = 1006;
  const EM_HCHAT = 1007;
  const EM_BKBL = 1008;
  const EM_LEVEL_UP = 1009;
  const EM_TASK_CREDITS = 1010;
  const EM_ZHIBO = 1011;
  const EM_VIDEO_PLAY = 1012;
  const EM_CROWDFUNDING = 1013;
  const EM_SYSTEM = 1014;
  const EM_USER_VIDEO_TOPIC = 1015;
  const EM_PRIVATE_MSG = 1016;
  const EM_PGC_MSG = 1017;
  const EM_PGC_VIP_PAY_IOS = 1018;
  const EM_VIP_EXPIRE_NEW = 1019;
  const EM_SYSTEM_PROCLAMATION = 2001;
  const EM_SYSTEM_EVENT = 2002;
  const EM_FUNC_SUBSCRIPTION = 3001;
  const EM_FUNC_ICHANNEL = 3002;
  const EM_FUNC_MAKETING = 3003;
  const EM_FUNC_IDENTIFY = 3004;
  const EM_USER_ACCOUNT = 3011;
  const EM_USER_ASSET = 3012;
  const EM_USER_VIDEO_VERIFY = 3101;
  const EM_USER_ICHANNEL_PROFIT = 3201;
  const EM_BUSINESS_ACTIVITY = 4001;
  const EM_BUSINESS_LIVE = 4002;
  const EM_BUSINESS_HELLO = 4003;
  static public $__names = array(
    0 => 'EM_SINGLE',
    1 => 'EM_GROUP',
    2 => 'EM_DBCONF_NOTIFY',
    3 => 'EM_DBCONF_FEE',
    1000 => 'EM_MOVIE_TICKET',
    1001 => 'EM_GRADE',
    1002 => 'EM_SELFCHANNEL_INCOME',
    1003 => 'EM_SELFCHANNEL_CETIFICATION',
    1004 => 'EM_VIDEO_PUBLISH',
    1005 => 'EM_VEDIO_REVIEW',
    1006 => 'EM_CHAT',
    1007 => 'EM_HCHAT',
    1008 => 'EM_BKBL',
    1009 => 'EM_LEVEL_UP',
    1010 => 'EM_TASK_CREDITS',
    1011 => 'EM_ZHIBO',
    1012 => 'EM_VIDEO_PLAY',
    1013 => 'EM_CROWDFUNDING',
    1014 => 'EM_SYSTEM',
    1015 => 'EM_USER_VIDEO_TOPIC',
    1016 => 'EM_PRIVATE_MSG',
    1017 => 'EM_PGC_MSG',
    1018 => 'EM_PGC_VIP_PAY_IOS',
    1019 => 'EM_VIP_EXPIRE_NEW',
    2001 => 'EM_SYSTEM_PROCLAMATION',
    2002 => 'EM_SYSTEM_EVENT',
    3001 => 'EM_FUNC_SUBSCRIPTION',
    3002 => 'EM_FUNC_ICHANNEL',
    3003 => 'EM_FUNC_MAKETING',
    3004 => 'EM_FUNC_IDENTIFY',
    3011 => 'EM_USER_ACCOUNT',
    3012 => 'EM_USER_ASSET',
    3101 => 'EM_USER_VIDEO_VERIFY',
    3201 => 'EM_USER_ICHANNEL_PROFIT',
    4001 => 'EM_BUSINESS_ACTIVITY',
    4002 => 'EM_BUSINESS_LIVE',
    4003 => 'EM_BUSINESS_HELLO',
  );
}

final class EM_USER_TYPE {
  const EM_NOT_LOGIN = 0;
  const EM_NO_VIP = 1;
  const EM_LVIP = 2;
  const EM_YEARLVIP = 4;
  const EM_VIP = 8;
  const EM_YEARVIP = 16;
  const EM_ALL = 32;
  const EM_EXPIRED_VIP = 64;
  static public $__names = array(
    0 => 'EM_NOT_LOGIN',
    1 => 'EM_NO_VIP',
    2 => 'EM_LVIP',
    4 => 'EM_YEARLVIP',
    8 => 'EM_VIP',
    16 => 'EM_YEARVIP',
    32 => 'EM_ALL',
    64 => 'EM_EXPIRED_VIP',
  );
}

final class EM_RENEW_TYPE {
  const EM_RENEW_NONE = 0;
  const EM_RENEW_AUTO = 1;
  static public $__names = array(
    0 => 'EM_RENEW_NONE',
    1 => 'EM_RENEW_AUTO',
  );
}

class UserInfoStorage {
  static $_TSPEC;

  /**
   * @var int
   */
  public $uid = null;
  /**
   * @var int
   */
  public $last_get_time = null;
  /**
   * @var string
   */
  public $last_get_deviceid = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'uid',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'last_get_time',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'last_get_deviceid',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['uid'])) {
        $this->uid = $vals['uid'];
      }
      if (isset($vals['last_get_time'])) {
        $this->last_get_time = $vals['last_get_time'];
      }
      if (isset($vals['last_get_deviceid'])) {
        $this->last_get_deviceid = $vals['last_get_deviceid'];
      }
    }
  }

  public function getName() {
    return 'UserInfoStorage';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->last_get_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->last_get_deviceid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('UserInfoStorage');
    if ($this->uid !== null) {
      $xfer += $output->writeFieldBegin('uid', TType::I64, 1);
      $xfer += $output->writeI64($this->uid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->last_get_time !== null) {
      $xfer += $output->writeFieldBegin('last_get_time', TType::I32, 2);
      $xfer += $output->writeI32($this->last_get_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->last_get_deviceid !== null) {
      $xfer += $output->writeFieldBegin('last_get_deviceid', TType::STRING, 3);
      $xfer += $output->writeString($this->last_get_deviceid);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class UnloggerProtocolMsg {
  static $_TSPEC;

  /**
   * @var int
   */
  public $uid = null;
  /**
   * @var int
   */
  public $msgid = null;
  /**
   * @var string
   */
  public $device_id = null;
  /**
   * @var int
   */
  public $op_term = null;
  /**
   * @var int
   */
  public $op_location = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'uid',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'msgid',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'device_id',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'op_term',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'op_location',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['uid'])) {
        $this->uid = $vals['uid'];
      }
      if (isset($vals['msgid'])) {
        $this->msgid = $vals['msgid'];
      }
      if (isset($vals['device_id'])) {
        $this->device_id = $vals['device_id'];
      }
      if (isset($vals['op_term'])) {
        $this->op_term = $vals['op_term'];
      }
      if (isset($vals['op_location'])) {
        $this->op_location = $vals['op_location'];
      }
    }
  }

  public function getName() {
    return 'UnloggerProtocolMsg';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->msgid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->device_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->op_term);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->op_location);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('UnloggerProtocolMsg');
    if ($this->uid !== null) {
      $xfer += $output->writeFieldBegin('uid', TType::I64, 1);
      $xfer += $output->writeI64($this->uid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->msgid !== null) {
      $xfer += $output->writeFieldBegin('msgid', TType::I64, 2);
      $xfer += $output->writeI64($this->msgid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->device_id !== null) {
      $xfer += $output->writeFieldBegin('device_id', TType::STRING, 3);
      $xfer += $output->writeString($this->device_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->op_term !== null) {
      $xfer += $output->writeFieldBegin('op_term', TType::I32, 4);
      $xfer += $output->writeI32($this->op_term);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->op_location !== null) {
      $xfer += $output->writeFieldBegin('op_location', TType::I32, 5);
      $xfer += $output->writeI32($this->op_location);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Jump {
  static $_TSPEC;

  /**
   * @var int
   */
  public $jumptype = null;
  /**
   * @var string
   */
  public $iosdata = null;
  /**
   * @var string
   */
  public $anddata = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'jumptype',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'iosdata',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'anddata',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['jumptype'])) {
        $this->jumptype = $vals['jumptype'];
      }
      if (isset($vals['iosdata'])) {
        $this->iosdata = $vals['iosdata'];
      }
      if (isset($vals['anddata'])) {
        $this->anddata = $vals['anddata'];
      }
    }
  }

  public function getName() {
    return 'Jump';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->jumptype);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->iosdata);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->anddata);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Jump');
    if ($this->jumptype !== null) {
      $xfer += $output->writeFieldBegin('jumptype', TType::I32, 1);
      $xfer += $output->writeI32($this->jumptype);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->iosdata !== null) {
      $xfer += $output->writeFieldBegin('iosdata', TType::STRING, 2);
      $xfer += $output->writeString($this->iosdata);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->anddata !== null) {
      $xfer += $output->writeFieldBegin('anddata', TType::STRING, 3);
      $xfer += $output->writeString($this->anddata);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SMsgStatus {
  static $_TSPEC;

  /**
   * @var int
   */
  public $msgid = null;
  /**
   * @var int
   */
  public $access_time = null;
  /**
   * @var int
   */
  public $status = null;
  /**
   * @var int
   */
  public $u_insert_time = null;
  /**
   * @var int
   */
  public $u_update_time = null;
  /**
   * @var int
   */
  public $msg_exp_time = null;
  /**
   * @var int
   */
  public $type = null;
  /**
   * @var int
   */
  public $popup = null;
  /**
   * @var int
   */
  public $term = null;
  /**
   * @var int
   */
  public $display = null;
  /**
   * @var int
   */
  public $expire_time = null;
  /**
   * @var int
   */
  public $revint1 = null;
  /**
   * @var string
   */
  public $revstr1 = null;
  /**
   * @var int
   */
  public $click_count = null;
  /**
   * @var int
   */
  public $link_expire_time = null;
  /**
   * @var int
   */
  public $fromuid = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'msgid',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'access_time',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'status',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'u_insert_time',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'u_update_time',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'msg_exp_time',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'type',
          'type' => TType::I32,
          ),
        9 => array(
          'var' => 'popup',
          'type' => TType::I32,
          ),
        10 => array(
          'var' => 'term',
          'type' => TType::I32,
          ),
        11 => array(
          'var' => 'display',
          'type' => TType::I32,
          ),
        12 => array(
          'var' => 'expire_time',
          'type' => TType::I32,
          ),
        21 => array(
          'var' => 'revint1',
          'type' => TType::I64,
          ),
        22 => array(
          'var' => 'revstr1',
          'type' => TType::STRING,
          ),
        23 => array(
          'var' => 'click_count',
          'type' => TType::I32,
          ),
        24 => array(
          'var' => 'link_expire_time',
          'type' => TType::I32,
          ),
        25 => array(
          'var' => 'fromuid',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['msgid'])) {
        $this->msgid = $vals['msgid'];
      }
      if (isset($vals['access_time'])) {
        $this->access_time = $vals['access_time'];
      }
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['u_insert_time'])) {
        $this->u_insert_time = $vals['u_insert_time'];
      }
      if (isset($vals['u_update_time'])) {
        $this->u_update_time = $vals['u_update_time'];
      }
      if (isset($vals['msg_exp_time'])) {
        $this->msg_exp_time = $vals['msg_exp_time'];
      }
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['popup'])) {
        $this->popup = $vals['popup'];
      }
      if (isset($vals['term'])) {
        $this->term = $vals['term'];
      }
      if (isset($vals['display'])) {
        $this->display = $vals['display'];
      }
      if (isset($vals['expire_time'])) {
        $this->expire_time = $vals['expire_time'];
      }
      if (isset($vals['revint1'])) {
        $this->revint1 = $vals['revint1'];
      }
      if (isset($vals['revstr1'])) {
        $this->revstr1 = $vals['revstr1'];
      }
      if (isset($vals['click_count'])) {
        $this->click_count = $vals['click_count'];
      }
      if (isset($vals['link_expire_time'])) {
        $this->link_expire_time = $vals['link_expire_time'];
      }
      if (isset($vals['fromuid'])) {
        $this->fromuid = $vals['fromuid'];
      }
    }
  }

  public function getName() {
    return 'SMsgStatus';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->msgid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->access_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->u_insert_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->u_update_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->msg_exp_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->popup);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->term);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->display);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->expire_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 21:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->revint1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 22:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->revstr1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 23:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->click_count);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 24:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->link_expire_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 25:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->fromuid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SMsgStatus');
    if ($this->msgid !== null) {
      $xfer += $output->writeFieldBegin('msgid', TType::I64, 1);
      $xfer += $output->writeI64($this->msgid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->access_time !== null) {
      $xfer += $output->writeFieldBegin('access_time', TType::I32, 2);
      $xfer += $output->writeI32($this->access_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->status !== null) {
      $xfer += $output->writeFieldBegin('status', TType::I32, 3);
      $xfer += $output->writeI32($this->status);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->u_insert_time !== null) {
      $xfer += $output->writeFieldBegin('u_insert_time', TType::I32, 5);
      $xfer += $output->writeI32($this->u_insert_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->u_update_time !== null) {
      $xfer += $output->writeFieldBegin('u_update_time', TType::I32, 6);
      $xfer += $output->writeI32($this->u_update_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->msg_exp_time !== null) {
      $xfer += $output->writeFieldBegin('msg_exp_time', TType::I32, 7);
      $xfer += $output->writeI32($this->msg_exp_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::I32, 8);
      $xfer += $output->writeI32($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->popup !== null) {
      $xfer += $output->writeFieldBegin('popup', TType::I32, 9);
      $xfer += $output->writeI32($this->popup);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->term !== null) {
      $xfer += $output->writeFieldBegin('term', TType::I32, 10);
      $xfer += $output->writeI32($this->term);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->display !== null) {
      $xfer += $output->writeFieldBegin('display', TType::I32, 11);
      $xfer += $output->writeI32($this->display);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->expire_time !== null) {
      $xfer += $output->writeFieldBegin('expire_time', TType::I32, 12);
      $xfer += $output->writeI32($this->expire_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->revint1 !== null) {
      $xfer += $output->writeFieldBegin('revint1', TType::I64, 21);
      $xfer += $output->writeI64($this->revint1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->revstr1 !== null) {
      $xfer += $output->writeFieldBegin('revstr1', TType::STRING, 22);
      $xfer += $output->writeString($this->revstr1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->click_count !== null) {
      $xfer += $output->writeFieldBegin('click_count', TType::I32, 23);
      $xfer += $output->writeI32($this->click_count);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->link_expire_time !== null) {
      $xfer += $output->writeFieldBegin('link_expire_time', TType::I32, 24);
      $xfer += $output->writeI32($this->link_expire_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->fromuid !== null) {
      $xfer += $output->writeFieldBegin('fromuid', TType::I64, 25);
      $xfer += $output->writeI64($this->fromuid);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MsgDataStorage {
  static $_TSPEC;

  /**
   * @var int
   */
  public $msgid = null;
  /**
   * @var int
   */
  public $appid = null;
  /**
   * @var int
   */
  public $fromuid = null;
  /**
   * @var int
   */
  public $type = null;
  /**
   * @var int
   */
  public $toid = null;
  /**
   * @var int
   */
  public $display = null;
  /**
   * @var int
   */
  public $term = null;
  /**
   * @var int
   */
  public $tplid = null;
  /**
   * @var string
   */
  public $content = null;
  /**
   * @var int
   */
  public $mode = null;
  /**
   * @var int
   */
  public $expire_time = null;
  /**
   * @var int
   */
  public $access_time = null;
  /**
   * @var int
   */
  public $create_time = null;
  /**
   * @var int
   */
  public $update_time = null;
  /**
   * @var string
   */
  public $desc = null;
  /**
   * @var int
   */
  public $fade = null;
  /**
   * @var int
   */
  public $popup = null;
  /**
   * @var \xyz\msgcentersvr\Jump
   */
  public $jump = null;
  /**
   * @var int
   */
  public $link_expire_time = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'msgid',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'appid',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'fromuid',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'type',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'toid',
          'type' => TType::I64,
          ),
        6 => array(
          'var' => 'display',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'term',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'tplid',
          'type' => TType::I32,
          ),
        9 => array(
          'var' => 'content',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'mode',
          'type' => TType::I32,
          ),
        11 => array(
          'var' => 'expire_time',
          'type' => TType::I32,
          ),
        12 => array(
          'var' => 'access_time',
          'type' => TType::I32,
          ),
        13 => array(
          'var' => 'create_time',
          'type' => TType::I32,
          ),
        14 => array(
          'var' => 'update_time',
          'type' => TType::I32,
          ),
        15 => array(
          'var' => 'desc',
          'type' => TType::STRING,
          ),
        16 => array(
          'var' => 'fade',
          'type' => TType::I32,
          ),
        17 => array(
          'var' => 'popup',
          'type' => TType::I32,
          ),
        18 => array(
          'var' => 'jump',
          'type' => TType::STRUCT,
          'class' => '\xyz\msgcentersvr\Jump',
          ),
        19 => array(
          'var' => 'link_expire_time',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['msgid'])) {
        $this->msgid = $vals['msgid'];
      }
      if (isset($vals['appid'])) {
        $this->appid = $vals['appid'];
      }
      if (isset($vals['fromuid'])) {
        $this->fromuid = $vals['fromuid'];
      }
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['toid'])) {
        $this->toid = $vals['toid'];
      }
      if (isset($vals['display'])) {
        $this->display = $vals['display'];
      }
      if (isset($vals['term'])) {
        $this->term = $vals['term'];
      }
      if (isset($vals['tplid'])) {
        $this->tplid = $vals['tplid'];
      }
      if (isset($vals['content'])) {
        $this->content = $vals['content'];
      }
      if (isset($vals['mode'])) {
        $this->mode = $vals['mode'];
      }
      if (isset($vals['expire_time'])) {
        $this->expire_time = $vals['expire_time'];
      }
      if (isset($vals['access_time'])) {
        $this->access_time = $vals['access_time'];
      }
      if (isset($vals['create_time'])) {
        $this->create_time = $vals['create_time'];
      }
      if (isset($vals['update_time'])) {
        $this->update_time = $vals['update_time'];
      }
      if (isset($vals['desc'])) {
        $this->desc = $vals['desc'];
      }
      if (isset($vals['fade'])) {
        $this->fade = $vals['fade'];
      }
      if (isset($vals['popup'])) {
        $this->popup = $vals['popup'];
      }
      if (isset($vals['jump'])) {
        $this->jump = $vals['jump'];
      }
      if (isset($vals['link_expire_time'])) {
        $this->link_expire_time = $vals['link_expire_time'];
      }
    }
  }

  public function getName() {
    return 'MsgDataStorage';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->msgid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->appid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->fromuid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->toid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->display);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->term);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->tplid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->content);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->mode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->expire_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->access_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->create_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->update_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->desc);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->fade);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->popup);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 18:
          if ($ftype == TType::STRUCT) {
            $this->jump = new \xyz\msgcentersvr\Jump();
            $xfer += $this->jump->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 19:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->link_expire_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MsgDataStorage');
    if ($this->msgid !== null) {
      $xfer += $output->writeFieldBegin('msgid', TType::I64, 1);
      $xfer += $output->writeI64($this->msgid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->appid !== null) {
      $xfer += $output->writeFieldBegin('appid', TType::I32, 2);
      $xfer += $output->writeI32($this->appid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->fromuid !== null) {
      $xfer += $output->writeFieldBegin('fromuid', TType::I64, 3);
      $xfer += $output->writeI64($this->fromuid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::I32, 4);
      $xfer += $output->writeI32($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->toid !== null) {
      $xfer += $output->writeFieldBegin('toid', TType::I64, 5);
      $xfer += $output->writeI64($this->toid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->display !== null) {
      $xfer += $output->writeFieldBegin('display', TType::I32, 6);
      $xfer += $output->writeI32($this->display);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->term !== null) {
      $xfer += $output->writeFieldBegin('term', TType::I32, 7);
      $xfer += $output->writeI32($this->term);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tplid !== null) {
      $xfer += $output->writeFieldBegin('tplid', TType::I32, 8);
      $xfer += $output->writeI32($this->tplid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->content !== null) {
      $xfer += $output->writeFieldBegin('content', TType::STRING, 9);
      $xfer += $output->writeString($this->content);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->mode !== null) {
      $xfer += $output->writeFieldBegin('mode', TType::I32, 10);
      $xfer += $output->writeI32($this->mode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->expire_time !== null) {
      $xfer += $output->writeFieldBegin('expire_time', TType::I32, 11);
      $xfer += $output->writeI32($this->expire_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->access_time !== null) {
      $xfer += $output->writeFieldBegin('access_time', TType::I32, 12);
      $xfer += $output->writeI32($this->access_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->create_time !== null) {
      $xfer += $output->writeFieldBegin('create_time', TType::I32, 13);
      $xfer += $output->writeI32($this->create_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->update_time !== null) {
      $xfer += $output->writeFieldBegin('update_time', TType::I32, 14);
      $xfer += $output->writeI32($this->update_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->desc !== null) {
      $xfer += $output->writeFieldBegin('desc', TType::STRING, 15);
      $xfer += $output->writeString($this->desc);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->fade !== null) {
      $xfer += $output->writeFieldBegin('fade', TType::I32, 16);
      $xfer += $output->writeI32($this->fade);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->popup !== null) {
      $xfer += $output->writeFieldBegin('popup', TType::I32, 17);
      $xfer += $output->writeI32($this->popup);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->jump !== null) {
      if (!is_object($this->jump)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('jump', TType::STRUCT, 18);
      $xfer += $this->jump->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->link_expire_time !== null) {
      $xfer += $output->writeFieldBegin('link_expire_time', TType::I32, 19);
      $xfer += $output->writeI32($this->link_expire_time);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MsgStatusStorage {
  static $_TSPEC;

  /**
   * @var array
   */
  public $msginfolist = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'msginfolist',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::STRUCT,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::STRUCT,
            'class' => '\xyz\msgcentersvr\SMsgStatus',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['msginfolist'])) {
        $this->msginfolist = $vals['msginfolist'];
      }
    }
  }

  public function getName() {
    return 'MsgStatusStorage';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::MAP) {
            $this->msginfolist = array();
            $_size0 = 0;
            $_ktype1 = 0;
            $_vtype2 = 0;
            $xfer += $input->readMapBegin($_ktype1, $_vtype2, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $key5 = 0;
              $val6 = new \xyz\msgcentersvr\SMsgStatus();
              $xfer += $input->readI64($key5);
              $val6 = new \xyz\msgcentersvr\SMsgStatus();
              $xfer += $val6->read($input);
              $this->msginfolist[$key5] = $val6;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MsgStatusStorage');
    if ($this->msginfolist !== null) {
      if (!is_array($this->msginfolist)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('msginfolist', TType::MAP, 1);
      {
        $output->writeMapBegin(TType::I64, TType::STRUCT, count($this->msginfolist));
        {
          foreach ($this->msginfolist as $kiter7 => $viter8)
          {
            $xfer += $output->writeI64($kiter7);
            $xfer += $viter8->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class VideoPlayAmountMessage {
  static $_TSPEC;

  /**
   * @var int
   */
  public $uid = null;
  /**
   * @var int
   */
  public $tplid = null;
  /**
   * @var int
   */
  public $access_time = null;
  /**
   * @var int
   */
  public $insert_time = null;
  /**
   * @var int
   */
  public $update_time = null;
  /**
   * @var string
   */
  public $vid = null;
  /**
   * @var string
   */
  public $content = null;
  /**
   * @var string
   */
  public $desc = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'uid',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'tplid',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'access_time',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'insert_time',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'update_time',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'vid',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'content',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'desc',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['uid'])) {
        $this->uid = $vals['uid'];
      }
      if (isset($vals['tplid'])) {
        $this->tplid = $vals['tplid'];
      }
      if (isset($vals['access_time'])) {
        $this->access_time = $vals['access_time'];
      }
      if (isset($vals['insert_time'])) {
        $this->insert_time = $vals['insert_time'];
      }
      if (isset($vals['update_time'])) {
        $this->update_time = $vals['update_time'];
      }
      if (isset($vals['vid'])) {
        $this->vid = $vals['vid'];
      }
      if (isset($vals['content'])) {
        $this->content = $vals['content'];
      }
      if (isset($vals['desc'])) {
        $this->desc = $vals['desc'];
      }
    }
  }

  public function getName() {
    return 'VideoPlayAmountMessage';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->tplid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->access_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->insert_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->update_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->vid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->content);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->desc);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('VideoPlayAmountMessage');
    if ($this->uid !== null) {
      $xfer += $output->writeFieldBegin('uid', TType::I64, 1);
      $xfer += $output->writeI64($this->uid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tplid !== null) {
      $xfer += $output->writeFieldBegin('tplid', TType::I32, 2);
      $xfer += $output->writeI32($this->tplid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->access_time !== null) {
      $xfer += $output->writeFieldBegin('access_time', TType::I32, 3);
      $xfer += $output->writeI32($this->access_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->insert_time !== null) {
      $xfer += $output->writeFieldBegin('insert_time', TType::I32, 4);
      $xfer += $output->writeI32($this->insert_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->update_time !== null) {
      $xfer += $output->writeFieldBegin('update_time', TType::I32, 5);
      $xfer += $output->writeI32($this->update_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->vid !== null) {
      $xfer += $output->writeFieldBegin('vid', TType::STRING, 6);
      $xfer += $output->writeString($this->vid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->content !== null) {
      $xfer += $output->writeFieldBegin('content', TType::STRING, 7);
      $xfer += $output->writeString($this->content);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->desc !== null) {
      $xfer += $output->writeFieldBegin('desc', TType::STRING, 8);
      $xfer += $output->writeString($this->desc);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class VideoPlayAmountStorage {
  static $_TSPEC;

  /**
   * @var \xyz\msgcentersvr\VideoPlayAmountMessage[]
   */
  public $vpa_msg = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'vpa_msg',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\xyz\msgcentersvr\VideoPlayAmountMessage',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['vpa_msg'])) {
        $this->vpa_msg = $vals['vpa_msg'];
      }
    }
  }

  public function getName() {
    return 'VideoPlayAmountStorage';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->vpa_msg = array();
            $_size9 = 0;
            $_etype12 = 0;
            $xfer += $input->readListBegin($_etype12, $_size9);
            for ($_i13 = 0; $_i13 < $_size9; ++$_i13)
            {
              $elem14 = null;
              $elem14 = new \xyz\msgcentersvr\VideoPlayAmountMessage();
              $xfer += $elem14->read($input);
              $this->vpa_msg []= $elem14;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('VideoPlayAmountStorage');
    if ($this->vpa_msg !== null) {
      if (!is_array($this->vpa_msg)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('vpa_msg', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->vpa_msg));
        {
          foreach ($this->vpa_msg as $iter15)
          {
            $xfer += $iter15->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CategoryDisplayStatus {
  static $_TSPEC;

  /**
   * @var int
   */
  public $first_valid_time = null;
  /**
   * @var int
   */
  public $times = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'first_valid_time',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'times',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['first_valid_time'])) {
        $this->first_valid_time = $vals['first_valid_time'];
      }
      if (isset($vals['times'])) {
        $this->times = $vals['times'];
      }
    }
  }

  public function getName() {
    return 'CategoryDisplayStatus';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->first_valid_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->times);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CategoryDisplayStatus');
    if ($this->first_valid_time !== null) {
      $xfer += $output->writeFieldBegin('first_valid_time', TType::I32, 1);
      $xfer += $output->writeI32($this->first_valid_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->times !== null) {
      $xfer += $output->writeFieldBegin('times', TType::I32, 2);
      $xfer += $output->writeI32($this->times);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CatDispStatusStorage {
  static $_TSPEC;

  /**
   * @var array
   */
  public $cat_disp_status = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'cat_disp_status',
          'type' => TType::MAP,
          'ktype' => TType::I32,
          'vtype' => TType::STRUCT,
          'key' => array(
            'type' => TType::I32,
          ),
          'val' => array(
            'type' => TType::STRUCT,
            'class' => '\xyz\msgcentersvr\CategoryDisplayStatus',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['cat_disp_status'])) {
        $this->cat_disp_status = $vals['cat_disp_status'];
      }
    }
  }

  public function getName() {
    return 'CatDispStatusStorage';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::MAP) {
            $this->cat_disp_status = array();
            $_size16 = 0;
            $_ktype17 = 0;
            $_vtype18 = 0;
            $xfer += $input->readMapBegin($_ktype17, $_vtype18, $_size16);
            for ($_i20 = 0; $_i20 < $_size16; ++$_i20)
            {
              $key21 = 0;
              $val22 = new \xyz\msgcentersvr\CategoryDisplayStatus();
              $xfer += $input->readI32($key21);
              $val22 = new \xyz\msgcentersvr\CategoryDisplayStatus();
              $xfer += $val22->read($input);
              $this->cat_disp_status[$key21] = $val22;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CatDispStatusStorage');
    if ($this->cat_disp_status !== null) {
      if (!is_array($this->cat_disp_status)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('cat_disp_status', TType::MAP, 1);
      {
        $output->writeMapBegin(TType::I32, TType::STRUCT, count($this->cat_disp_status));
        {
          foreach ($this->cat_disp_status as $kiter23 => $viter24)
          {
            $xfer += $output->writeI32($kiter23);
            $xfer += $viter24->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class IndexpageDisplayStatus {
  static $_TSPEC;

  /**
   * @var int
   */
  public $category = null;
  /**
   * @var int
   */
  public $first_valid_time = null;
  /**
   * @var int
   */
  public $times = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'category',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'first_valid_time',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'times',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['category'])) {
        $this->category = $vals['category'];
      }
      if (isset($vals['first_valid_time'])) {
        $this->first_valid_time = $vals['first_valid_time'];
      }
      if (isset($vals['times'])) {
        $this->times = $vals['times'];
      }
    }
  }

  public function getName() {
    return 'IndexpageDisplayStatus';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->category);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->first_valid_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->times);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('IndexpageDisplayStatus');
    if ($this->category !== null) {
      $xfer += $output->writeFieldBegin('category', TType::I32, 1);
      $xfer += $output->writeI32($this->category);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->first_valid_time !== null) {
      $xfer += $output->writeFieldBegin('first_valid_time', TType::I32, 2);
      $xfer += $output->writeI32($this->first_valid_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->times !== null) {
      $xfer += $output->writeFieldBegin('times', TType::I32, 3);
      $xfer += $output->writeI32($this->times);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class IndexpageDisplayStatusStorage {
  static $_TSPEC;

  /**
   * @var array
   */
  public $display_status = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'display_status',
          'type' => TType::MAP,
          'ktype' => TType::I32,
          'vtype' => TType::STRUCT,
          'key' => array(
            'type' => TType::I32,
          ),
          'val' => array(
            'type' => TType::STRUCT,
            'class' => '\xyz\msgcentersvr\IndexpageDisplayStatus',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['display_status'])) {
        $this->display_status = $vals['display_status'];
      }
    }
  }

  public function getName() {
    return 'IndexpageDisplayStatusStorage';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::MAP) {
            $this->display_status = array();
            $_size25 = 0;
            $_ktype26 = 0;
            $_vtype27 = 0;
            $xfer += $input->readMapBegin($_ktype26, $_vtype27, $_size25);
            for ($_i29 = 0; $_i29 < $_size25; ++$_i29)
            {
              $key30 = 0;
              $val31 = new \xyz\msgcentersvr\IndexpageDisplayStatus();
              $xfer += $input->readI32($key30);
              $val31 = new \xyz\msgcentersvr\IndexpageDisplayStatus();
              $xfer += $val31->read($input);
              $this->display_status[$key30] = $val31;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('IndexpageDisplayStatusStorage');
    if ($this->display_status !== null) {
      if (!is_array($this->display_status)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('display_status', TType::MAP, 1);
      {
        $output->writeMapBegin(TType::I32, TType::STRUCT, count($this->display_status));
        {
          foreach ($this->display_status as $kiter32 => $viter33)
          {
            $xfer += $output->writeI32($kiter32);
            $xfer += $viter33->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MsgConf {
  static $_TSPEC;

  /**
   * @var int
   */
  public $user_type = null;
  /**
   * @var \xyz\msgcentersvr\MsgDataStorage
   */
  public $msgdata = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_type',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'msgdata',
          'type' => TType::STRUCT,
          'class' => '\xyz\msgcentersvr\MsgDataStorage',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['user_type'])) {
        $this->user_type = $vals['user_type'];
      }
      if (isset($vals['msgdata'])) {
        $this->msgdata = $vals['msgdata'];
      }
    }
  }

  public function getName() {
    return 'MsgConf';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->user_type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->msgdata = new \xyz\msgcentersvr\MsgDataStorage();
            $xfer += $this->msgdata->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MsgConf');
    if ($this->user_type !== null) {
      $xfer += $output->writeFieldBegin('user_type', TType::I32, 1);
      $xfer += $output->writeI32($this->user_type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->msgdata !== null) {
      if (!is_object($this->msgdata)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('msgdata', TType::STRUCT, 2);
      $xfer += $this->msgdata->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SAppMsgItem {
  static $_TSPEC;

  /**
   * @var int
   */
  public $msgid = null;
  /**
   * @var int
   */
  public $access_time = null;
  /**
   * @var int
   */
  public $mode = null;
  /**
   * @var string
   */
  public $desc = null;
  /**
   * @var int
   */
  public $create_time = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'msgid',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'access_time',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'mode',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'desc',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'create_time',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['msgid'])) {
        $this->msgid = $vals['msgid'];
      }
      if (isset($vals['access_time'])) {
        $this->access_time = $vals['access_time'];
      }
      if (isset($vals['mode'])) {
        $this->mode = $vals['mode'];
      }
      if (isset($vals['desc'])) {
        $this->desc = $vals['desc'];
      }
      if (isset($vals['create_time'])) {
        $this->create_time = $vals['create_time'];
      }
    }
  }

  public function getName() {
    return 'SAppMsgItem';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->msgid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->access_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->mode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->desc);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->create_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SAppMsgItem');
    if ($this->msgid !== null) {
      $xfer += $output->writeFieldBegin('msgid', TType::I64, 1);
      $xfer += $output->writeI64($this->msgid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->access_time !== null) {
      $xfer += $output->writeFieldBegin('access_time', TType::I32, 2);
      $xfer += $output->writeI32($this->access_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->mode !== null) {
      $xfer += $output->writeFieldBegin('mode', TType::I32, 3);
      $xfer += $output->writeI32($this->mode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->desc !== null) {
      $xfer += $output->writeFieldBegin('desc', TType::STRING, 4);
      $xfer += $output->writeString($this->desc);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->create_time !== null) {
      $xfer += $output->writeFieldBegin('create_time', TType::I32, 5);
      $xfer += $output->writeI32($this->create_time);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AppMsgHistory {
  static $_TSPEC;

  /**
   * @var array
   */
  public $msginfolist = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'msginfolist',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::STRUCT,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::STRUCT,
            'class' => '\xyz\msgcentersvr\SAppMsgItem',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['msginfolist'])) {
        $this->msginfolist = $vals['msginfolist'];
      }
    }
  }

  public function getName() {
    return 'AppMsgHistory';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::MAP) {
            $this->msginfolist = array();
            $_size34 = 0;
            $_ktype35 = 0;
            $_vtype36 = 0;
            $xfer += $input->readMapBegin($_ktype35, $_vtype36, $_size34);
            for ($_i38 = 0; $_i38 < $_size34; ++$_i38)
            {
              $key39 = 0;
              $val40 = new \xyz\msgcentersvr\SAppMsgItem();
              $xfer += $input->readI64($key39);
              $val40 = new \xyz\msgcentersvr\SAppMsgItem();
              $xfer += $val40->read($input);
              $this->msginfolist[$key39] = $val40;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AppMsgHistory');
    if ($this->msginfolist !== null) {
      if (!is_array($this->msginfolist)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('msginfolist', TType::MAP, 1);
      {
        $output->writeMapBegin(TType::I64, TType::STRUCT, count($this->msginfolist));
        {
          foreach ($this->msginfolist as $kiter41 => $viter42)
          {
            $xfer += $output->writeI64($kiter41);
            $xfer += $viter42->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class DispatchItem {
  static $_TSPEC;

  /**
   * @var int
   */
  public $appid = null;
  /**
   * @var int
   */
  public $msgid = null;
  /**
   * @var int
   */
  public $togid = null;
  /**
   * @var int
   */
  public $update_time = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'appid',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'msgid',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'togid',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'update_time',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['appid'])) {
        $this->appid = $vals['appid'];
      }
      if (isset($vals['msgid'])) {
        $this->msgid = $vals['msgid'];
      }
      if (isset($vals['togid'])) {
        $this->togid = $vals['togid'];
      }
      if (isset($vals['update_time'])) {
        $this->update_time = $vals['update_time'];
      }
    }
  }

  public function getName() {
    return 'DispatchItem';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->appid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->msgid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->togid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->update_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('DispatchItem');
    if ($this->appid !== null) {
      $xfer += $output->writeFieldBegin('appid', TType::I32, 1);
      $xfer += $output->writeI32($this->appid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->msgid !== null) {
      $xfer += $output->writeFieldBegin('msgid', TType::I64, 2);
      $xfer += $output->writeI64($this->msgid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->togid !== null) {
      $xfer += $output->writeFieldBegin('togid', TType::I64, 3);
      $xfer += $output->writeI64($this->togid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->update_time !== null) {
      $xfer += $output->writeFieldBegin('update_time', TType::I32, 4);
      $xfer += $output->writeI32($this->update_time);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MsgDataProtocol {
  static $_TSPEC;

  /**
   * @var int
   */
  public $appid = null;
  /**
   * @var int
   */
  public $fromuid = null;
  /**
   * @var int
   */
  public $display = null;
  /**
   * @var int
   */
  public $term = null;
  /**
   * @var int
   */
  public $tplid = null;
  /**
   * @var string
   */
  public $content = null;
  /**
   * @var int
   */
  public $type = null;
  /**
   * @var int
   */
  public $expire_time = null;
  /**
   * @var int
   */
  public $access_time = null;
  /**
   * @var string
   */
  public $desc = null;
  /**
   * @var int
   */
  public $fade = null;
  /**
   * @var int
   */
  public $popup = null;
  /**
   * @var int
   */
  public $msgid = null;
  /**
   * @var \xyz\msgcentersvr\Jump
   */
  public $jump = null;
  /**
   * @var int
   */
  public $revint1 = null;
  /**
   * @var string
   */
  public $revstr1 = null;
  /**
   * @var int
   */
  public $link_expire_time = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'appid',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'fromuid',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'display',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'term',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'tplid',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'content',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'type',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'expire_time',
          'type' => TType::I32,
          ),
        9 => array(
          'var' => 'access_time',
          'type' => TType::I32,
          ),
        10 => array(
          'var' => 'desc',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'fade',
          'type' => TType::I32,
          ),
        12 => array(
          'var' => 'popup',
          'type' => TType::I32,
          ),
        13 => array(
          'var' => 'msgid',
          'type' => TType::I64,
          ),
        14 => array(
          'var' => 'jump',
          'type' => TType::STRUCT,
          'class' => '\xyz\msgcentersvr\Jump',
          ),
        15 => array(
          'var' => 'revint1',
          'type' => TType::I64,
          ),
        16 => array(
          'var' => 'revstr1',
          'type' => TType::STRING,
          ),
        17 => array(
          'var' => 'link_expire_time',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['appid'])) {
        $this->appid = $vals['appid'];
      }
      if (isset($vals['fromuid'])) {
        $this->fromuid = $vals['fromuid'];
      }
      if (isset($vals['display'])) {
        $this->display = $vals['display'];
      }
      if (isset($vals['term'])) {
        $this->term = $vals['term'];
      }
      if (isset($vals['tplid'])) {
        $this->tplid = $vals['tplid'];
      }
      if (isset($vals['content'])) {
        $this->content = $vals['content'];
      }
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['expire_time'])) {
        $this->expire_time = $vals['expire_time'];
      }
      if (isset($vals['access_time'])) {
        $this->access_time = $vals['access_time'];
      }
      if (isset($vals['desc'])) {
        $this->desc = $vals['desc'];
      }
      if (isset($vals['fade'])) {
        $this->fade = $vals['fade'];
      }
      if (isset($vals['popup'])) {
        $this->popup = $vals['popup'];
      }
      if (isset($vals['msgid'])) {
        $this->msgid = $vals['msgid'];
      }
      if (isset($vals['jump'])) {
        $this->jump = $vals['jump'];
      }
      if (isset($vals['revint1'])) {
        $this->revint1 = $vals['revint1'];
      }
      if (isset($vals['revstr1'])) {
        $this->revstr1 = $vals['revstr1'];
      }
      if (isset($vals['link_expire_time'])) {
        $this->link_expire_time = $vals['link_expire_time'];
      }
    }
  }

  public function getName() {
    return 'MsgDataProtocol';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->appid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->fromuid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->display);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->term);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->tplid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->content);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->expire_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->access_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->desc);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->fade);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->popup);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->msgid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::STRUCT) {
            $this->jump = new \xyz\msgcentersvr\Jump();
            $xfer += $this->jump->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->revint1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->revstr1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->link_expire_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MsgDataProtocol');
    if ($this->appid !== null) {
      $xfer += $output->writeFieldBegin('appid', TType::I32, 1);
      $xfer += $output->writeI32($this->appid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->fromuid !== null) {
      $xfer += $output->writeFieldBegin('fromuid', TType::I64, 2);
      $xfer += $output->writeI64($this->fromuid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->display !== null) {
      $xfer += $output->writeFieldBegin('display', TType::I32, 3);
      $xfer += $output->writeI32($this->display);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->term !== null) {
      $xfer += $output->writeFieldBegin('term', TType::I32, 4);
      $xfer += $output->writeI32($this->term);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tplid !== null) {
      $xfer += $output->writeFieldBegin('tplid', TType::I32, 5);
      $xfer += $output->writeI32($this->tplid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->content !== null) {
      $xfer += $output->writeFieldBegin('content', TType::STRING, 6);
      $xfer += $output->writeString($this->content);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::I32, 7);
      $xfer += $output->writeI32($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->expire_time !== null) {
      $xfer += $output->writeFieldBegin('expire_time', TType::I32, 8);
      $xfer += $output->writeI32($this->expire_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->access_time !== null) {
      $xfer += $output->writeFieldBegin('access_time', TType::I32, 9);
      $xfer += $output->writeI32($this->access_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->desc !== null) {
      $xfer += $output->writeFieldBegin('desc', TType::STRING, 10);
      $xfer += $output->writeString($this->desc);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->fade !== null) {
      $xfer += $output->writeFieldBegin('fade', TType::I32, 11);
      $xfer += $output->writeI32($this->fade);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->popup !== null) {
      $xfer += $output->writeFieldBegin('popup', TType::I32, 12);
      $xfer += $output->writeI32($this->popup);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->msgid !== null) {
      $xfer += $output->writeFieldBegin('msgid', TType::I64, 13);
      $xfer += $output->writeI64($this->msgid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->jump !== null) {
      if (!is_object($this->jump)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('jump', TType::STRUCT, 14);
      $xfer += $this->jump->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->revint1 !== null) {
      $xfer += $output->writeFieldBegin('revint1', TType::I64, 15);
      $xfer += $output->writeI64($this->revint1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->revstr1 !== null) {
      $xfer += $output->writeFieldBegin('revstr1', TType::STRING, 16);
      $xfer += $output->writeString($this->revstr1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->link_expire_time !== null) {
      $xfer += $output->writeFieldBegin('link_expire_time', TType::I32, 17);
      $xfer += $output->writeI32($this->link_expire_time);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MsgDataProtocolOut {
  static $_TSPEC;

  /**
   * @var int
   */
  public $msgid = null;
  /**
   * @var int
   */
  public $appid = null;
  /**
   * @var int
   */
  public $fromuid = null;
  /**
   * @var int
   */
  public $type = null;
  /**
   * @var int
   */
  public $toid = null;
  /**
   * @var int
   */
  public $display = null;
  /**
   * @var int
   */
  public $term = null;
  /**
   * @var int
   */
  public $tplid = null;
  /**
   * @var string
   */
  public $content = null;
  /**
   * @var int
   */
  public $status = null;
  /**
   * @var int
   */
  public $expire_time = null;
  /**
   * @var int
   */
  public $access_time = null;
  /**
   * @var int
   */
  public $u_insert_time = null;
  /**
   * @var int
   */
  public $u_update_time = null;
  /**
   * @var string
   */
  public $desc = null;
  /**
   * @var int
   */
  public $fade = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'msgid',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'appid',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'fromuid',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'type',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'toid',
          'type' => TType::I64,
          ),
        6 => array(
          'var' => 'display',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'term',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'tplid',
          'type' => TType::I32,
          ),
        9 => array(
          'var' => 'content',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'status',
          'type' => TType::I32,
          ),
        11 => array(
          'var' => 'expire_time',
          'type' => TType::I32,
          ),
        12 => array(
          'var' => 'access_time',
          'type' => TType::I32,
          ),
        13 => array(
          'var' => 'u_insert_time',
          'type' => TType::I32,
          ),
        14 => array(
          'var' => 'u_update_time',
          'type' => TType::I32,
          ),
        15 => array(
          'var' => 'desc',
          'type' => TType::STRING,
          ),
        16 => array(
          'var' => 'fade',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['msgid'])) {
        $this->msgid = $vals['msgid'];
      }
      if (isset($vals['appid'])) {
        $this->appid = $vals['appid'];
      }
      if (isset($vals['fromuid'])) {
        $this->fromuid = $vals['fromuid'];
      }
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['toid'])) {
        $this->toid = $vals['toid'];
      }
      if (isset($vals['display'])) {
        $this->display = $vals['display'];
      }
      if (isset($vals['term'])) {
        $this->term = $vals['term'];
      }
      if (isset($vals['tplid'])) {
        $this->tplid = $vals['tplid'];
      }
      if (isset($vals['content'])) {
        $this->content = $vals['content'];
      }
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['expire_time'])) {
        $this->expire_time = $vals['expire_time'];
      }
      if (isset($vals['access_time'])) {
        $this->access_time = $vals['access_time'];
      }
      if (isset($vals['u_insert_time'])) {
        $this->u_insert_time = $vals['u_insert_time'];
      }
      if (isset($vals['u_update_time'])) {
        $this->u_update_time = $vals['u_update_time'];
      }
      if (isset($vals['desc'])) {
        $this->desc = $vals['desc'];
      }
      if (isset($vals['fade'])) {
        $this->fade = $vals['fade'];
      }
    }
  }

  public function getName() {
    return 'MsgDataProtocolOut';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->msgid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->appid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->fromuid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->toid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->display);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->term);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->tplid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->content);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->expire_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->access_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->u_insert_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->u_update_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->desc);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->fade);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MsgDataProtocolOut');
    if ($this->msgid !== null) {
      $xfer += $output->writeFieldBegin('msgid', TType::I64, 1);
      $xfer += $output->writeI64($this->msgid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->appid !== null) {
      $xfer += $output->writeFieldBegin('appid', TType::I32, 2);
      $xfer += $output->writeI32($this->appid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->fromuid !== null) {
      $xfer += $output->writeFieldBegin('fromuid', TType::I64, 3);
      $xfer += $output->writeI64($this->fromuid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::I32, 4);
      $xfer += $output->writeI32($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->toid !== null) {
      $xfer += $output->writeFieldBegin('toid', TType::I64, 5);
      $xfer += $output->writeI64($this->toid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->display !== null) {
      $xfer += $output->writeFieldBegin('display', TType::I32, 6);
      $xfer += $output->writeI32($this->display);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->term !== null) {
      $xfer += $output->writeFieldBegin('term', TType::I32, 7);
      $xfer += $output->writeI32($this->term);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tplid !== null) {
      $xfer += $output->writeFieldBegin('tplid', TType::I32, 8);
      $xfer += $output->writeI32($this->tplid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->content !== null) {
      $xfer += $output->writeFieldBegin('content', TType::STRING, 9);
      $xfer += $output->writeString($this->content);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->status !== null) {
      $xfer += $output->writeFieldBegin('status', TType::I32, 10);
      $xfer += $output->writeI32($this->status);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->expire_time !== null) {
      $xfer += $output->writeFieldBegin('expire_time', TType::I32, 11);
      $xfer += $output->writeI32($this->expire_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->access_time !== null) {
      $xfer += $output->writeFieldBegin('access_time', TType::I32, 12);
      $xfer += $output->writeI32($this->access_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->u_insert_time !== null) {
      $xfer += $output->writeFieldBegin('u_insert_time', TType::I32, 13);
      $xfer += $output->writeI32($this->u_insert_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->u_update_time !== null) {
      $xfer += $output->writeFieldBegin('u_update_time', TType::I32, 14);
      $xfer += $output->writeI32($this->u_update_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->desc !== null) {
      $xfer += $output->writeFieldBegin('desc', TType::STRING, 15);
      $xfer += $output->writeString($this->desc);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->fade !== null) {
      $xfer += $output->writeFieldBegin('fade', TType::I32, 16);
      $xfer += $output->writeI32($this->fade);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MobileMessageDataProtocolOut {
  static $_TSPEC;

  /**
   * @var int
   */
  public $msgid = null;
  /**
   * @var int
   */
  public $type = null;
  /**
   * @var string
   */
  public $content = null;
  /**
   * @var int
   */
  public $status = null;
  /**
   * @var int
   */
  public $u_insert_time = null;
  /**
   * @var \xyz\msgcentersvr\Jump
   */
  public $jump = null;
  /**
   * @var int
   */
  public $access_time = null;
  /**
   * @var int
   */
  public $expired_link = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'msgid',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'type',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'content',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'status',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'u_insert_time',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'jump',
          'type' => TType::STRUCT,
          'class' => '\xyz\msgcentersvr\Jump',
          ),
        7 => array(
          'var' => 'access_time',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'expired_link',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['msgid'])) {
        $this->msgid = $vals['msgid'];
      }
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['content'])) {
        $this->content = $vals['content'];
      }
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['u_insert_time'])) {
        $this->u_insert_time = $vals['u_insert_time'];
      }
      if (isset($vals['jump'])) {
        $this->jump = $vals['jump'];
      }
      if (isset($vals['access_time'])) {
        $this->access_time = $vals['access_time'];
      }
      if (isset($vals['expired_link'])) {
        $this->expired_link = $vals['expired_link'];
      }
    }
  }

  public function getName() {
    return 'MobileMessageDataProtocolOut';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->msgid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->content);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->u_insert_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->jump = new \xyz\msgcentersvr\Jump();
            $xfer += $this->jump->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->access_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->expired_link);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MobileMessageDataProtocolOut');
    if ($this->msgid !== null) {
      $xfer += $output->writeFieldBegin('msgid', TType::I64, 1);
      $xfer += $output->writeI64($this->msgid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::I32, 2);
      $xfer += $output->writeI32($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->content !== null) {
      $xfer += $output->writeFieldBegin('content', TType::STRING, 3);
      $xfer += $output->writeString($this->content);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->status !== null) {
      $xfer += $output->writeFieldBegin('status', TType::I32, 4);
      $xfer += $output->writeI32($this->status);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->u_insert_time !== null) {
      $xfer += $output->writeFieldBegin('u_insert_time', TType::I32, 5);
      $xfer += $output->writeI32($this->u_insert_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->jump !== null) {
      if (!is_object($this->jump)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('jump', TType::STRUCT, 6);
      $xfer += $this->jump->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->access_time !== null) {
      $xfer += $output->writeFieldBegin('access_time', TType::I32, 7);
      $xfer += $output->writeI32($this->access_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->expired_link !== null) {
      $xfer += $output->writeFieldBegin('expired_link', TType::I32, 8);
      $xfer += $output->writeI32($this->expired_link);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CommonMessageOut {
  static $_TSPEC;

  /**
   * @var int
   */
  public $msgid = null;
  /**
   * @var int
   */
  public $fromuid = null;
  /**
   * @var int
   */
  public $appid = null;
  /**
   * @var int
   */
  public $tplid = null;
  /**
   * @var int
   */
  public $access_time = null;
  /**
   * @var int
   */
  public $display = null;
  /**
   * @var int
   */
  public $type = null;
  /**
   * @var int
   */
  public $term = null;
  /**
   * @var int
   */
  public $status = null;
  /**
   * @var string
   */
  public $content = null;
  /**
   * @var string
   */
  public $desc = null;
  /**
   * @var int
   */
  public $expire_time = null;
  /**
   * @var \xyz\msgcentersvr\Jump
   */
  public $jump = null;
  /**
   * @var int
   */
  public $fade = null;
  /**
   * @var int
   */
  public $expired_link = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'msgid',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'fromuid',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'appid',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'tplid',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'access_time',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'display',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'type',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'term',
          'type' => TType::I32,
          ),
        9 => array(
          'var' => 'status',
          'type' => TType::I32,
          ),
        10 => array(
          'var' => 'content',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'desc',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'expire_time',
          'type' => TType::I32,
          ),
        13 => array(
          'var' => 'jump',
          'type' => TType::STRUCT,
          'class' => '\xyz\msgcentersvr\Jump',
          ),
        14 => array(
          'var' => 'fade',
          'type' => TType::I32,
          ),
        15 => array(
          'var' => 'expired_link',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['msgid'])) {
        $this->msgid = $vals['msgid'];
      }
      if (isset($vals['fromuid'])) {
        $this->fromuid = $vals['fromuid'];
      }
      if (isset($vals['appid'])) {
        $this->appid = $vals['appid'];
      }
      if (isset($vals['tplid'])) {
        $this->tplid = $vals['tplid'];
      }
      if (isset($vals['access_time'])) {
        $this->access_time = $vals['access_time'];
      }
      if (isset($vals['display'])) {
        $this->display = $vals['display'];
      }
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['term'])) {
        $this->term = $vals['term'];
      }
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['content'])) {
        $this->content = $vals['content'];
      }
      if (isset($vals['desc'])) {
        $this->desc = $vals['desc'];
      }
      if (isset($vals['expire_time'])) {
        $this->expire_time = $vals['expire_time'];
      }
      if (isset($vals['jump'])) {
        $this->jump = $vals['jump'];
      }
      if (isset($vals['fade'])) {
        $this->fade = $vals['fade'];
      }
      if (isset($vals['expired_link'])) {
        $this->expired_link = $vals['expired_link'];
      }
    }
  }

  public function getName() {
    return 'CommonMessageOut';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->msgid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->fromuid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->appid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->tplid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->access_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->display);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->term);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->content);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->desc);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->expire_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRUCT) {
            $this->jump = new \xyz\msgcentersvr\Jump();
            $xfer += $this->jump->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->fade);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->expired_link);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CommonMessageOut');
    if ($this->msgid !== null) {
      $xfer += $output->writeFieldBegin('msgid', TType::I64, 1);
      $xfer += $output->writeI64($this->msgid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->fromuid !== null) {
      $xfer += $output->writeFieldBegin('fromuid', TType::I64, 2);
      $xfer += $output->writeI64($this->fromuid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->appid !== null) {
      $xfer += $output->writeFieldBegin('appid', TType::I32, 3);
      $xfer += $output->writeI32($this->appid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tplid !== null) {
      $xfer += $output->writeFieldBegin('tplid', TType::I32, 4);
      $xfer += $output->writeI32($this->tplid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->access_time !== null) {
      $xfer += $output->writeFieldBegin('access_time', TType::I32, 5);
      $xfer += $output->writeI32($this->access_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->display !== null) {
      $xfer += $output->writeFieldBegin('display', TType::I32, 6);
      $xfer += $output->writeI32($this->display);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::I32, 7);
      $xfer += $output->writeI32($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->term !== null) {
      $xfer += $output->writeFieldBegin('term', TType::I32, 8);
      $xfer += $output->writeI32($this->term);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->status !== null) {
      $xfer += $output->writeFieldBegin('status', TType::I32, 9);
      $xfer += $output->writeI32($this->status);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->content !== null) {
      $xfer += $output->writeFieldBegin('content', TType::STRING, 10);
      $xfer += $output->writeString($this->content);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->desc !== null) {
      $xfer += $output->writeFieldBegin('desc', TType::STRING, 11);
      $xfer += $output->writeString($this->desc);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->expire_time !== null) {
      $xfer += $output->writeFieldBegin('expire_time', TType::I32, 12);
      $xfer += $output->writeI32($this->expire_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->jump !== null) {
      if (!is_object($this->jump)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('jump', TType::STRUCT, 13);
      $xfer += $this->jump->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->fade !== null) {
      $xfer += $output->writeFieldBegin('fade', TType::I32, 14);
      $xfer += $output->writeI32($this->fade);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->expired_link !== null) {
      $xfer += $output->writeFieldBegin('expired_link', TType::I32, 15);
      $xfer += $output->writeI32($this->expired_link);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class IndexpageMessageOut {
  static $_TSPEC;

  /**
   * @var int
   */
  public $msgid = null;
  /**
   * @var int
   */
  public $touid = null;
  /**
   * @var int
   */
  public $appid = null;
  /**
   * @var int
   */
  public $tplid = null;
  /**
   * @var int
   */
  public $access_time = null;
  /**
   * @var int
   */
  public $type = null;
  /**
   * @var int
   */
  public $term = null;
  /**
   * @var int
   */
  public $status = null;
  /**
   * @var string
   */
  public $content = null;
  /**
   * @var string
   */
  public $desc = null;
  /**
   * @var \xyz\msgcentersvr\Jump
   */
  public $jump = null;
  /**
   * @var int
   */
  public $expire_time = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'msgid',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'touid',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'appid',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'tplid',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'access_time',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'type',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'term',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'status',
          'type' => TType::I32,
          ),
        9 => array(
          'var' => 'content',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'desc',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'jump',
          'type' => TType::STRUCT,
          'class' => '\xyz\msgcentersvr\Jump',
          ),
        12 => array(
          'var' => 'expire_time',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['msgid'])) {
        $this->msgid = $vals['msgid'];
      }
      if (isset($vals['touid'])) {
        $this->touid = $vals['touid'];
      }
      if (isset($vals['appid'])) {
        $this->appid = $vals['appid'];
      }
      if (isset($vals['tplid'])) {
        $this->tplid = $vals['tplid'];
      }
      if (isset($vals['access_time'])) {
        $this->access_time = $vals['access_time'];
      }
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['term'])) {
        $this->term = $vals['term'];
      }
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['content'])) {
        $this->content = $vals['content'];
      }
      if (isset($vals['desc'])) {
        $this->desc = $vals['desc'];
      }
      if (isset($vals['jump'])) {
        $this->jump = $vals['jump'];
      }
      if (isset($vals['expire_time'])) {
        $this->expire_time = $vals['expire_time'];
      }
    }
  }

  public function getName() {
    return 'IndexpageMessageOut';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->msgid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->touid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->appid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->tplid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->access_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->term);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->content);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->desc);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRUCT) {
            $this->jump = new \xyz\msgcentersvr\Jump();
            $xfer += $this->jump->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->expire_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('IndexpageMessageOut');
    if ($this->msgid !== null) {
      $xfer += $output->writeFieldBegin('msgid', TType::I64, 1);
      $xfer += $output->writeI64($this->msgid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->touid !== null) {
      $xfer += $output->writeFieldBegin('touid', TType::I64, 2);
      $xfer += $output->writeI64($this->touid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->appid !== null) {
      $xfer += $output->writeFieldBegin('appid', TType::I32, 3);
      $xfer += $output->writeI32($this->appid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tplid !== null) {
      $xfer += $output->writeFieldBegin('tplid', TType::I32, 4);
      $xfer += $output->writeI32($this->tplid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->access_time !== null) {
      $xfer += $output->writeFieldBegin('access_time', TType::I32, 5);
      $xfer += $output->writeI32($this->access_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::I32, 6);
      $xfer += $output->writeI32($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->term !== null) {
      $xfer += $output->writeFieldBegin('term', TType::I32, 7);
      $xfer += $output->writeI32($this->term);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->status !== null) {
      $xfer += $output->writeFieldBegin('status', TType::I32, 8);
      $xfer += $output->writeI32($this->status);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->content !== null) {
      $xfer += $output->writeFieldBegin('content', TType::STRING, 9);
      $xfer += $output->writeString($this->content);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->desc !== null) {
      $xfer += $output->writeFieldBegin('desc', TType::STRING, 10);
      $xfer += $output->writeString($this->desc);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->jump !== null) {
      if (!is_object($this->jump)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('jump', TType::STRUCT, 11);
      $xfer += $this->jump->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->expire_time !== null) {
      $xfer += $output->writeFieldBegin('expire_time', TType::I32, 12);
      $xfer += $output->writeI32($this->expire_time);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class IndexpageMessagelistOut {
  static $_TSPEC;

  /**
   * @var int
   */
  public $msgid = null;
  /**
   * @var int
   */
  public $touid = null;
  /**
   * @var int
   */
  public $appid = null;
  /**
   * @var int
   */
  public $tplid = null;
  /**
   * @var int
   */
  public $access_time = null;
  /**
   * @var int
   */
  public $type = null;
  /**
   * @var int
   */
  public $term = null;
  /**
   * @var int
   */
  public $status = null;
  /**
   * @var string
   */
  public $content = null;
  /**
   * @var string
   */
  public $desc = null;
  /**
   * @var \xyz\msgcentersvr\Jump
   */
  public $jump = null;
  /**
   * @var int
   */
  public $expire_time = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'msgid',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'touid',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'appid',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'tplid',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'access_time',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'type',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'term',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'status',
          'type' => TType::I32,
          ),
        9 => array(
          'var' => 'content',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'desc',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'jump',
          'type' => TType::STRUCT,
          'class' => '\xyz\msgcentersvr\Jump',
          ),
        12 => array(
          'var' => 'expire_time',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['msgid'])) {
        $this->msgid = $vals['msgid'];
      }
      if (isset($vals['touid'])) {
        $this->touid = $vals['touid'];
      }
      if (isset($vals['appid'])) {
        $this->appid = $vals['appid'];
      }
      if (isset($vals['tplid'])) {
        $this->tplid = $vals['tplid'];
      }
      if (isset($vals['access_time'])) {
        $this->access_time = $vals['access_time'];
      }
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['term'])) {
        $this->term = $vals['term'];
      }
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['content'])) {
        $this->content = $vals['content'];
      }
      if (isset($vals['desc'])) {
        $this->desc = $vals['desc'];
      }
      if (isset($vals['jump'])) {
        $this->jump = $vals['jump'];
      }
      if (isset($vals['expire_time'])) {
        $this->expire_time = $vals['expire_time'];
      }
    }
  }

  public function getName() {
    return 'IndexpageMessagelistOut';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->msgid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->touid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->appid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->tplid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->access_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->term);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->content);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->desc);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRUCT) {
            $this->jump = new \xyz\msgcentersvr\Jump();
            $xfer += $this->jump->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->expire_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('IndexpageMessagelistOut');
    if ($this->msgid !== null) {
      $xfer += $output->writeFieldBegin('msgid', TType::I64, 1);
      $xfer += $output->writeI64($this->msgid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->touid !== null) {
      $xfer += $output->writeFieldBegin('touid', TType::I64, 2);
      $xfer += $output->writeI64($this->touid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->appid !== null) {
      $xfer += $output->writeFieldBegin('appid', TType::I32, 3);
      $xfer += $output->writeI32($this->appid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tplid !== null) {
      $xfer += $output->writeFieldBegin('tplid', TType::I32, 4);
      $xfer += $output->writeI32($this->tplid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->access_time !== null) {
      $xfer += $output->writeFieldBegin('access_time', TType::I32, 5);
      $xfer += $output->writeI32($this->access_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::I32, 6);
      $xfer += $output->writeI32($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->term !== null) {
      $xfer += $output->writeFieldBegin('term', TType::I32, 7);
      $xfer += $output->writeI32($this->term);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->status !== null) {
      $xfer += $output->writeFieldBegin('status', TType::I32, 8);
      $xfer += $output->writeI32($this->status);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->content !== null) {
      $xfer += $output->writeFieldBegin('content', TType::STRING, 9);
      $xfer += $output->writeString($this->content);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->desc !== null) {
      $xfer += $output->writeFieldBegin('desc', TType::STRING, 10);
      $xfer += $output->writeString($this->desc);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->jump !== null) {
      if (!is_object($this->jump)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('jump', TType::STRUCT, 11);
      $xfer += $this->jump->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->expire_time !== null) {
      $xfer += $output->writeFieldBegin('expire_time', TType::I32, 12);
      $xfer += $output->writeI32($this->expire_time);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SubsMessageOut {
  static $_TSPEC;

  /**
   * @var int
   */
  public $uid = null;
  /**
   * @var string
   */
  public $nickname = null;
  /**
   * @var string
   */
  public $title = null;
  /**
   * @var string
   */
  public $icon = null;
  /**
   * @var int
   */
  public $data_type = null;
  /**
   * @var string
   */
  public $v_id = null;
  /**
   * @var int
   */
  public $show_id = null;
  /**
   * @var string
   */
  public $feed_url = null;
  /**
   * @var string
   */
  public $article_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'uid',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'nickname',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'title',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'icon',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'data_type',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'v_id',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'show_id',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'feed_url',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'article_id',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['uid'])) {
        $this->uid = $vals['uid'];
      }
      if (isset($vals['nickname'])) {
        $this->nickname = $vals['nickname'];
      }
      if (isset($vals['title'])) {
        $this->title = $vals['title'];
      }
      if (isset($vals['icon'])) {
        $this->icon = $vals['icon'];
      }
      if (isset($vals['data_type'])) {
        $this->data_type = $vals['data_type'];
      }
      if (isset($vals['v_id'])) {
        $this->v_id = $vals['v_id'];
      }
      if (isset($vals['show_id'])) {
        $this->show_id = $vals['show_id'];
      }
      if (isset($vals['feed_url'])) {
        $this->feed_url = $vals['feed_url'];
      }
      if (isset($vals['article_id'])) {
        $this->article_id = $vals['article_id'];
      }
    }
  }

  public function getName() {
    return 'SubsMessageOut';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->nickname);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->title);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->icon);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->data_type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->v_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->show_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->feed_url);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->article_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SubsMessageOut');
    if ($this->uid !== null) {
      $xfer += $output->writeFieldBegin('uid', TType::I64, 1);
      $xfer += $output->writeI64($this->uid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->nickname !== null) {
      $xfer += $output->writeFieldBegin('nickname', TType::STRING, 2);
      $xfer += $output->writeString($this->nickname);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->title !== null) {
      $xfer += $output->writeFieldBegin('title', TType::STRING, 3);
      $xfer += $output->writeString($this->title);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->icon !== null) {
      $xfer += $output->writeFieldBegin('icon', TType::STRING, 4);
      $xfer += $output->writeString($this->icon);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->data_type !== null) {
      $xfer += $output->writeFieldBegin('data_type', TType::I32, 5);
      $xfer += $output->writeI32($this->data_type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->v_id !== null) {
      $xfer += $output->writeFieldBegin('v_id', TType::STRING, 6);
      $xfer += $output->writeString($this->v_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->show_id !== null) {
      $xfer += $output->writeFieldBegin('show_id', TType::I32, 7);
      $xfer += $output->writeI32($this->show_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->feed_url !== null) {
      $xfer += $output->writeFieldBegin('feed_url', TType::STRING, 8);
      $xfer += $output->writeString($this->feed_url);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->article_id !== null) {
      $xfer += $output->writeFieldBegin('article_id', TType::STRING, 9);
      $xfer += $output->writeString($this->article_id);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class condition {
  static $_TSPEC;

  /**
   * @var int
   */
  public $begin_time = null;
  /**
   * @var int
   */
  public $end_time = null;
  /**
   * @var int
   */
  public $page_size = null;
  /**
   * @var int
   */
  public $page_no = null;
  /**
   * @var int
   */
  public $msg_type = null;
  /**
   * @var int
   */
  public $msg_status = null;
  /**
   * @var int[]
   */
  public $vctmsg_type = null;
  /**
   * @var int[]
   */
  public $msg_statuses = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'begin_time',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'end_time',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'page_size',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'page_no',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'msg_type',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'msg_status',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'vctmsg_type',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        8 => array(
          'var' => 'msg_statuses',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['begin_time'])) {
        $this->begin_time = $vals['begin_time'];
      }
      if (isset($vals['end_time'])) {
        $this->end_time = $vals['end_time'];
      }
      if (isset($vals['page_size'])) {
        $this->page_size = $vals['page_size'];
      }
      if (isset($vals['page_no'])) {
        $this->page_no = $vals['page_no'];
      }
      if (isset($vals['msg_type'])) {
        $this->msg_type = $vals['msg_type'];
      }
      if (isset($vals['msg_status'])) {
        $this->msg_status = $vals['msg_status'];
      }
      if (isset($vals['vctmsg_type'])) {
        $this->vctmsg_type = $vals['vctmsg_type'];
      }
      if (isset($vals['msg_statuses'])) {
        $this->msg_statuses = $vals['msg_statuses'];
      }
    }
  }

  public function getName() {
    return 'condition';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->begin_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->end_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->page_size);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->page_no);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->msg_type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->msg_status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::LST) {
            $this->vctmsg_type = array();
            $_size43 = 0;
            $_etype46 = 0;
            $xfer += $input->readListBegin($_etype46, $_size43);
            for ($_i47 = 0; $_i47 < $_size43; ++$_i47)
            {
              $elem48 = null;
              $xfer += $input->readI32($elem48);
              $this->vctmsg_type []= $elem48;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::LST) {
            $this->msg_statuses = array();
            $_size49 = 0;
            $_etype52 = 0;
            $xfer += $input->readListBegin($_etype52, $_size49);
            for ($_i53 = 0; $_i53 < $_size49; ++$_i53)
            {
              $elem54 = null;
              $xfer += $input->readI32($elem54);
              $this->msg_statuses []= $elem54;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('condition');
    if ($this->begin_time !== null) {
      $xfer += $output->writeFieldBegin('begin_time', TType::I32, 1);
      $xfer += $output->writeI32($this->begin_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->end_time !== null) {
      $xfer += $output->writeFieldBegin('end_time', TType::I32, 2);
      $xfer += $output->writeI32($this->end_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->page_size !== null) {
      $xfer += $output->writeFieldBegin('page_size', TType::I32, 3);
      $xfer += $output->writeI32($this->page_size);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->page_no !== null) {
      $xfer += $output->writeFieldBegin('page_no', TType::I32, 4);
      $xfer += $output->writeI32($this->page_no);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->msg_type !== null) {
      $xfer += $output->writeFieldBegin('msg_type', TType::I32, 5);
      $xfer += $output->writeI32($this->msg_type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->msg_status !== null) {
      $xfer += $output->writeFieldBegin('msg_status', TType::I32, 6);
      $xfer += $output->writeI32($this->msg_status);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->vctmsg_type !== null) {
      if (!is_array($this->vctmsg_type)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('vctmsg_type', TType::LST, 7);
      {
        $output->writeListBegin(TType::I32, count($this->vctmsg_type));
        {
          foreach ($this->vctmsg_type as $iter55)
          {
            $xfer += $output->writeI32($iter55);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->msg_statuses !== null) {
      if (!is_array($this->msg_statuses)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('msg_statuses', TType::LST, 8);
      {
        $output->writeListBegin(TType::I32, count($this->msg_statuses));
        {
          foreach ($this->msg_statuses as $iter56)
          {
            $xfer += $output->writeI32($iter56);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class RedPointCondition {
  static $_TSPEC;

  /**
   * @var int[]
   */
  public $msg_types = null;
  /**
   * @var int[]
   */
  public $msg_statuses = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'msg_types',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        2 => array(
          'var' => 'msg_statuses',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['msg_types'])) {
        $this->msg_types = $vals['msg_types'];
      }
      if (isset($vals['msg_statuses'])) {
        $this->msg_statuses = $vals['msg_statuses'];
      }
    }
  }

  public function getName() {
    return 'RedPointCondition';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->msg_types = array();
            $_size57 = 0;
            $_etype60 = 0;
            $xfer += $input->readListBegin($_etype60, $_size57);
            for ($_i61 = 0; $_i61 < $_size57; ++$_i61)
            {
              $elem62 = null;
              $xfer += $input->readI32($elem62);
              $this->msg_types []= $elem62;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->msg_statuses = array();
            $_size63 = 0;
            $_etype66 = 0;
            $xfer += $input->readListBegin($_etype66, $_size63);
            for ($_i67 = 0; $_i67 < $_size63; ++$_i67)
            {
              $elem68 = null;
              $xfer += $input->readI32($elem68);
              $this->msg_statuses []= $elem68;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('RedPointCondition');
    if ($this->msg_types !== null) {
      if (!is_array($this->msg_types)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('msg_types', TType::LST, 1);
      {
        $output->writeListBegin(TType::I32, count($this->msg_types));
        {
          foreach ($this->msg_types as $iter69)
          {
            $xfer += $output->writeI32($iter69);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->msg_statuses !== null) {
      if (!is_array($this->msg_statuses)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('msg_statuses', TType::LST, 2);
      {
        $output->writeListBegin(TType::I32, count($this->msg_statuses));
        {
          foreach ($this->msg_statuses as $iter70)
          {
            $xfer += $output->writeI32($iter70);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class InnerpageItemCondition {
  static $_TSPEC;

  /**
   * @var int
   */
  public $type = null;
  /**
   * @var int[]
   */
  public $msg_types = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'type',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'msg_types',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['msg_types'])) {
        $this->msg_types = $vals['msg_types'];
      }
    }
  }

  public function getName() {
    return 'InnerpageItemCondition';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->msg_types = array();
            $_size71 = 0;
            $_etype74 = 0;
            $xfer += $input->readListBegin($_etype74, $_size71);
            for ($_i75 = 0; $_i75 < $_size71; ++$_i75)
            {
              $elem76 = null;
              $xfer += $input->readI32($elem76);
              $this->msg_types []= $elem76;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('InnerpageItemCondition');
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::I32, 1);
      $xfer += $output->writeI32($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->msg_types !== null) {
      if (!is_array($this->msg_types)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('msg_types', TType::LST, 2);
      {
        $output->writeListBegin(TType::I32, count($this->msg_types));
        {
          foreach ($this->msg_types as $iter77)
          {
            $xfer += $output->writeI32($iter77);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CommonMessageCondition {
  static $_TSPEC;

  /**
   * @var int
   */
  public $start_time = null;
  /**
   * @var int
   */
  public $end_time = null;
  /**
   * @var int
   */
  public $page_size = null;
  /**
   * @var int
   */
  public $page_no = null;
  /**
   * @var int[]
   */
  public $msg_types = null;
  /**
   * @var int[]
   */
  public $msg_statuses = null;
  /**
   * @var bool
   */
  public $popup = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'start_time',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'end_time',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'page_size',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'page_no',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'msg_types',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        6 => array(
          'var' => 'msg_statuses',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        7 => array(
          'var' => 'popup',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['start_time'])) {
        $this->start_time = $vals['start_time'];
      }
      if (isset($vals['end_time'])) {
        $this->end_time = $vals['end_time'];
      }
      if (isset($vals['page_size'])) {
        $this->page_size = $vals['page_size'];
      }
      if (isset($vals['page_no'])) {
        $this->page_no = $vals['page_no'];
      }
      if (isset($vals['msg_types'])) {
        $this->msg_types = $vals['msg_types'];
      }
      if (isset($vals['msg_statuses'])) {
        $this->msg_statuses = $vals['msg_statuses'];
      }
      if (isset($vals['popup'])) {
        $this->popup = $vals['popup'];
      }
    }
  }

  public function getName() {
    return 'CommonMessageCondition';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->start_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->end_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->page_size);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->page_no);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::LST) {
            $this->msg_types = array();
            $_size78 = 0;
            $_etype81 = 0;
            $xfer += $input->readListBegin($_etype81, $_size78);
            for ($_i82 = 0; $_i82 < $_size78; ++$_i82)
            {
              $elem83 = null;
              $xfer += $input->readI32($elem83);
              $this->msg_types []= $elem83;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::LST) {
            $this->msg_statuses = array();
            $_size84 = 0;
            $_etype87 = 0;
            $xfer += $input->readListBegin($_etype87, $_size84);
            for ($_i88 = 0; $_i88 < $_size84; ++$_i88)
            {
              $elem89 = null;
              $xfer += $input->readI32($elem89);
              $this->msg_statuses []= $elem89;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->popup);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CommonMessageCondition');
    if ($this->start_time !== null) {
      $xfer += $output->writeFieldBegin('start_time', TType::I32, 1);
      $xfer += $output->writeI32($this->start_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->end_time !== null) {
      $xfer += $output->writeFieldBegin('end_time', TType::I32, 2);
      $xfer += $output->writeI32($this->end_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->page_size !== null) {
      $xfer += $output->writeFieldBegin('page_size', TType::I32, 3);
      $xfer += $output->writeI32($this->page_size);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->page_no !== null) {
      $xfer += $output->writeFieldBegin('page_no', TType::I32, 4);
      $xfer += $output->writeI32($this->page_no);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->msg_types !== null) {
      if (!is_array($this->msg_types)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('msg_types', TType::LST, 5);
      {
        $output->writeListBegin(TType::I32, count($this->msg_types));
        {
          foreach ($this->msg_types as $iter90)
          {
            $xfer += $output->writeI32($iter90);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->msg_statuses !== null) {
      if (!is_array($this->msg_statuses)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('msg_statuses', TType::LST, 6);
      {
        $output->writeListBegin(TType::I32, count($this->msg_statuses));
        {
          foreach ($this->msg_statuses as $iter91)
          {
            $xfer += $output->writeI32($iter91);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->popup !== null) {
      $xfer += $output->writeFieldBegin('popup', TType::BOOL, 7);
      $xfer += $output->writeBool($this->popup);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class InnerpageMessageCondition {
  static $_TSPEC;

  /**
   * @var int
   */
  public $start_time = null;
  /**
   * @var int
   */
  public $page_size = null;
  /**
   * @var int
   */
  public $page_no = null;
  /**
   * @var int[]
   */
  public $msg_statuses = null;
  /**
   * @var int[]
   */
  public $msg_types = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'start_time',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'page_size',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'page_no',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'msg_statuses',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        5 => array(
          'var' => 'msg_types',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['start_time'])) {
        $this->start_time = $vals['start_time'];
      }
      if (isset($vals['page_size'])) {
        $this->page_size = $vals['page_size'];
      }
      if (isset($vals['page_no'])) {
        $this->page_no = $vals['page_no'];
      }
      if (isset($vals['msg_statuses'])) {
        $this->msg_statuses = $vals['msg_statuses'];
      }
      if (isset($vals['msg_types'])) {
        $this->msg_types = $vals['msg_types'];
      }
    }
  }

  public function getName() {
    return 'InnerpageMessageCondition';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->start_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->page_size);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->page_no);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::LST) {
            $this->msg_statuses = array();
            $_size92 = 0;
            $_etype95 = 0;
            $xfer += $input->readListBegin($_etype95, $_size92);
            for ($_i96 = 0; $_i96 < $_size92; ++$_i96)
            {
              $elem97 = null;
              $xfer += $input->readI32($elem97);
              $this->msg_statuses []= $elem97;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::LST) {
            $this->msg_types = array();
            $_size98 = 0;
            $_etype101 = 0;
            $xfer += $input->readListBegin($_etype101, $_size98);
            for ($_i102 = 0; $_i102 < $_size98; ++$_i102)
            {
              $elem103 = null;
              $xfer += $input->readI32($elem103);
              $this->msg_types []= $elem103;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('InnerpageMessageCondition');
    if ($this->start_time !== null) {
      $xfer += $output->writeFieldBegin('start_time', TType::I32, 1);
      $xfer += $output->writeI32($this->start_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->page_size !== null) {
      $xfer += $output->writeFieldBegin('page_size', TType::I32, 2);
      $xfer += $output->writeI32($this->page_size);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->page_no !== null) {
      $xfer += $output->writeFieldBegin('page_no', TType::I32, 3);
      $xfer += $output->writeI32($this->page_no);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->msg_statuses !== null) {
      if (!is_array($this->msg_statuses)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('msg_statuses', TType::LST, 4);
      {
        $output->writeListBegin(TType::I32, count($this->msg_statuses));
        {
          foreach ($this->msg_statuses as $iter104)
          {
            $xfer += $output->writeI32($iter104);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->msg_types !== null) {
      if (!is_array($this->msg_types)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('msg_types', TType::LST, 5);
      {
        $output->writeListBegin(TType::I32, count($this->msg_types));
        {
          foreach ($this->msg_types as $iter105)
          {
            $xfer += $output->writeI32($iter105);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class IndexpageMessageCondition {
  static $_TSPEC;

  /**
   * @var int[]
   */
  public $msg_statuses = null;
  /**
   * @var int[]
   */
  public $msg_types = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'msg_statuses',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        2 => array(
          'var' => 'msg_types',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['msg_statuses'])) {
        $this->msg_statuses = $vals['msg_statuses'];
      }
      if (isset($vals['msg_types'])) {
        $this->msg_types = $vals['msg_types'];
      }
    }
  }

  public function getName() {
    return 'IndexpageMessageCondition';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->msg_statuses = array();
            $_size106 = 0;
            $_etype109 = 0;
            $xfer += $input->readListBegin($_etype109, $_size106);
            for ($_i110 = 0; $_i110 < $_size106; ++$_i110)
            {
              $elem111 = null;
              $xfer += $input->readI32($elem111);
              $this->msg_statuses []= $elem111;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->msg_types = array();
            $_size112 = 0;
            $_etype115 = 0;
            $xfer += $input->readListBegin($_etype115, $_size112);
            for ($_i116 = 0; $_i116 < $_size112; ++$_i116)
            {
              $elem117 = null;
              $xfer += $input->readI32($elem117);
              $this->msg_types []= $elem117;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('IndexpageMessageCondition');
    if ($this->msg_statuses !== null) {
      if (!is_array($this->msg_statuses)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('msg_statuses', TType::LST, 1);
      {
        $output->writeListBegin(TType::I32, count($this->msg_statuses));
        {
          foreach ($this->msg_statuses as $iter118)
          {
            $xfer += $output->writeI32($iter118);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->msg_types !== null) {
      if (!is_array($this->msg_types)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('msg_types', TType::LST, 2);
      {
        $output->writeListBegin(TType::I32, count($this->msg_types));
        {
          foreach ($this->msg_types as $iter119)
          {
            $xfer += $output->writeI32($iter119);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MobileMessageQueryCondition {
  static $_TSPEC;

  /**
   * @var int
   */
  public $startTime = null;
  /**
   * @var int
   */
  public $pageSize = null;
  /**
   * @var int[]
   */
  public $msg_types = null;
  /**
   * @var int
   */
  public $term = null;
  /**
   * @var int
   */
  public $status = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'startTime',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'pageSize',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'msg_types',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        4 => array(
          'var' => 'term',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'status',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['startTime'])) {
        $this->startTime = $vals['startTime'];
      }
      if (isset($vals['pageSize'])) {
        $this->pageSize = $vals['pageSize'];
      }
      if (isset($vals['msg_types'])) {
        $this->msg_types = $vals['msg_types'];
      }
      if (isset($vals['term'])) {
        $this->term = $vals['term'];
      }
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
    }
  }

  public function getName() {
    return 'MobileMessageQueryCondition';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->startTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->pageSize);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->msg_types = array();
            $_size120 = 0;
            $_etype123 = 0;
            $xfer += $input->readListBegin($_etype123, $_size120);
            for ($_i124 = 0; $_i124 < $_size120; ++$_i124)
            {
              $elem125 = null;
              $xfer += $input->readI32($elem125);
              $this->msg_types []= $elem125;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->term);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MobileMessageQueryCondition');
    if ($this->startTime !== null) {
      $xfer += $output->writeFieldBegin('startTime', TType::I32, 1);
      $xfer += $output->writeI32($this->startTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pageSize !== null) {
      $xfer += $output->writeFieldBegin('pageSize', TType::I32, 2);
      $xfer += $output->writeI32($this->pageSize);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->msg_types !== null) {
      if (!is_array($this->msg_types)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('msg_types', TType::LST, 3);
      {
        $output->writeListBegin(TType::I32, count($this->msg_types));
        {
          foreach ($this->msg_types as $iter126)
          {
            $xfer += $output->writeI32($iter126);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->term !== null) {
      $xfer += $output->writeFieldBegin('term', TType::I32, 4);
      $xfer += $output->writeI32($this->term);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->status !== null) {
      $xfer += $output->writeFieldBegin('status', TType::I32, 5);
      $xfer += $output->writeI32($this->status);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class retcomm {
  static $_TSPEC;

  /**
   * @var int
   */
  public $ret = null;
  /**
   * @var string
   */
  public $msg = null;
  /**
   * @var int
   */
  public $msgid = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ret',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'msg',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'msgid',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ret'])) {
        $this->ret = $vals['ret'];
      }
      if (isset($vals['msg'])) {
        $this->msg = $vals['msg'];
      }
      if (isset($vals['msgid'])) {
        $this->msgid = $vals['msgid'];
      }
    }
  }

  public function getName() {
    return 'retcomm';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ret);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->msg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->msgid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('retcomm');
    if ($this->ret !== null) {
      $xfer += $output->writeFieldBegin('ret', TType::I32, 1);
      $xfer += $output->writeI32($this->ret);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->msg !== null) {
      $xfer += $output->writeFieldBegin('msg', TType::STRING, 2);
      $xfer += $output->writeString($this->msg);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->msgid !== null) {
      $xfer += $output->writeFieldBegin('msgid', TType::I64, 3);
      $xfer += $output->writeI64($this->msgid);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class RetMobileMsg {
  static $_TSPEC;

  /**
   * @var int
   */
  public $ret = null;
  /**
   * @var string
   */
  public $msg = null;
  /**
   * @var int
   */
  public $count = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ret',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'msg',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'count',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ret'])) {
        $this->ret = $vals['ret'];
      }
      if (isset($vals['msg'])) {
        $this->msg = $vals['msg'];
      }
      if (isset($vals['count'])) {
        $this->count = $vals['count'];
      }
    }
  }

  public function getName() {
    return 'RetMobileMsg';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ret);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->msg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->count);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('RetMobileMsg');
    if ($this->ret !== null) {
      $xfer += $output->writeFieldBegin('ret', TType::I32, 1);
      $xfer += $output->writeI32($this->ret);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->msg !== null) {
      $xfer += $output->writeFieldBegin('msg', TType::STRING, 2);
      $xfer += $output->writeString($this->msg);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->count !== null) {
      $xfer += $output->writeFieldBegin('count', TType::I32, 3);
      $xfer += $output->writeI32($this->count);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class RetCommonMsg {
  static $_TSPEC;

  /**
   * @var int
   */
  public $ret = null;
  /**
   * @var string
   */
  public $msg = null;
  /**
   * @var \xyz\msgcentersvr\CommonMessageOut[]
   */
  public $data = null;
  /**
   * @var int
   */
  public $count = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ret',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'msg',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'data',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\xyz\msgcentersvr\CommonMessageOut',
            ),
          ),
        4 => array(
          'var' => 'count',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ret'])) {
        $this->ret = $vals['ret'];
      }
      if (isset($vals['msg'])) {
        $this->msg = $vals['msg'];
      }
      if (isset($vals['data'])) {
        $this->data = $vals['data'];
      }
      if (isset($vals['count'])) {
        $this->count = $vals['count'];
      }
    }
  }

  public function getName() {
    return 'RetCommonMsg';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ret);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->msg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->data = array();
            $_size127 = 0;
            $_etype130 = 0;
            $xfer += $input->readListBegin($_etype130, $_size127);
            for ($_i131 = 0; $_i131 < $_size127; ++$_i131)
            {
              $elem132 = null;
              $elem132 = new \xyz\msgcentersvr\CommonMessageOut();
              $xfer += $elem132->read($input);
              $this->data []= $elem132;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->count);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('RetCommonMsg');
    if ($this->ret !== null) {
      $xfer += $output->writeFieldBegin('ret', TType::I32, 1);
      $xfer += $output->writeI32($this->ret);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->msg !== null) {
      $xfer += $output->writeFieldBegin('msg', TType::STRING, 2);
      $xfer += $output->writeString($this->msg);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->data !== null) {
      if (!is_array($this->data)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('data', TType::LST, 3);
      {
        $output->writeListBegin(TType::STRUCT, count($this->data));
        {
          foreach ($this->data as $iter133)
          {
            $xfer += $iter133->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->count !== null) {
      $xfer += $output->writeFieldBegin('count', TType::I32, 4);
      $xfer += $output->writeI32($this->count);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class RetIndexpageMsg {
  static $_TSPEC;

  /**
   * @var int
   */
  public $ret = null;
  /**
   * @var string
   */
  public $msg = null;
  /**
   * @var \xyz\msgcentersvr\IndexpageMessageOut
   */
  public $data = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ret',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'msg',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'data',
          'type' => TType::STRUCT,
          'class' => '\xyz\msgcentersvr\IndexpageMessageOut',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ret'])) {
        $this->ret = $vals['ret'];
      }
      if (isset($vals['msg'])) {
        $this->msg = $vals['msg'];
      }
      if (isset($vals['data'])) {
        $this->data = $vals['data'];
      }
    }
  }

  public function getName() {
    return 'RetIndexpageMsg';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ret);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->msg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->data = new \xyz\msgcentersvr\IndexpageMessageOut();
            $xfer += $this->data->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('RetIndexpageMsg');
    if ($this->ret !== null) {
      $xfer += $output->writeFieldBegin('ret', TType::I32, 1);
      $xfer += $output->writeI32($this->ret);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->msg !== null) {
      $xfer += $output->writeFieldBegin('msg', TType::STRING, 2);
      $xfer += $output->writeString($this->msg);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->data !== null) {
      if (!is_object($this->data)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('data', TType::STRUCT, 3);
      $xfer += $this->data->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class RetIndexpageMsglist {
  static $_TSPEC;

  /**
   * @var int
   */
  public $ret = null;
  /**
   * @var string
   */
  public $msg = null;
  /**
   * @var \xyz\msgcentersvr\IndexpageMessageOut[]
   */
  public $data = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ret',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'msg',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'data',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\xyz\msgcentersvr\IndexpageMessageOut',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ret'])) {
        $this->ret = $vals['ret'];
      }
      if (isset($vals['msg'])) {
        $this->msg = $vals['msg'];
      }
      if (isset($vals['data'])) {
        $this->data = $vals['data'];
      }
    }
  }

  public function getName() {
    return 'RetIndexpageMsglist';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ret);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->msg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->data = array();
            $_size134 = 0;
            $_etype137 = 0;
            $xfer += $input->readListBegin($_etype137, $_size134);
            for ($_i138 = 0; $_i138 < $_size134; ++$_i138)
            {
              $elem139 = null;
              $elem139 = new \xyz\msgcentersvr\IndexpageMessageOut();
              $xfer += $elem139->read($input);
              $this->data []= $elem139;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('RetIndexpageMsglist');
    if ($this->ret !== null) {
      $xfer += $output->writeFieldBegin('ret', TType::I32, 1);
      $xfer += $output->writeI32($this->ret);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->msg !== null) {
      $xfer += $output->writeFieldBegin('msg', TType::STRING, 2);
      $xfer += $output->writeString($this->msg);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->data !== null) {
      if (!is_array($this->data)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('data', TType::LST, 3);
      {
        $output->writeListBegin(TType::STRUCT, count($this->data));
        {
          foreach ($this->data as $iter140)
          {
            $xfer += $iter140->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class InnerpageMessageOut {
  static $_TSPEC;

  /**
   * @var int
   */
  public $msgid = null;
  /**
   * @var int
   */
  public $type = null;
  /**
   * @var string
   */
  public $content = null;
  /**
   * @var int
   */
  public $status = null;
  /**
   * @var int
   */
  public $access_time = null;
  /**
   * @var int
   */
  public $badge_num = null;
  /**
   * @var int
   */
  public $red_point = null;
  /**
   * @var \xyz\msgcentersvr\Jump
   */
  public $jump = null;
  /**
   * @var int
   */
  public $display = null;
  /**
   * @var int
   */
  public $expire_time = null;
  /**
   * @var int
   */
  public $fromuid = null;
  /**
   * @var int
   */
  public $expired_link = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'msgid',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'type',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'content',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'status',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'access_time',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'badge_num',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'red_point',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'jump',
          'type' => TType::STRUCT,
          'class' => '\xyz\msgcentersvr\Jump',
          ),
        9 => array(
          'var' => 'display',
          'type' => TType::I32,
          ),
        10 => array(
          'var' => 'expire_time',
          'type' => TType::I32,
          ),
        11 => array(
          'var' => 'fromuid',
          'type' => TType::I64,
          ),
        12 => array(
          'var' => 'expired_link',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['msgid'])) {
        $this->msgid = $vals['msgid'];
      }
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['content'])) {
        $this->content = $vals['content'];
      }
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['access_time'])) {
        $this->access_time = $vals['access_time'];
      }
      if (isset($vals['badge_num'])) {
        $this->badge_num = $vals['badge_num'];
      }
      if (isset($vals['red_point'])) {
        $this->red_point = $vals['red_point'];
      }
      if (isset($vals['jump'])) {
        $this->jump = $vals['jump'];
      }
      if (isset($vals['display'])) {
        $this->display = $vals['display'];
      }
      if (isset($vals['expire_time'])) {
        $this->expire_time = $vals['expire_time'];
      }
      if (isset($vals['fromuid'])) {
        $this->fromuid = $vals['fromuid'];
      }
      if (isset($vals['expired_link'])) {
        $this->expired_link = $vals['expired_link'];
      }
    }
  }

  public function getName() {
    return 'InnerpageMessageOut';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->msgid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->content);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->access_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->badge_num);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->red_point);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRUCT) {
            $this->jump = new \xyz\msgcentersvr\Jump();
            $xfer += $this->jump->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->display);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->expire_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->fromuid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->expired_link);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('InnerpageMessageOut');
    if ($this->msgid !== null) {
      $xfer += $output->writeFieldBegin('msgid', TType::I64, 1);
      $xfer += $output->writeI64($this->msgid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::I32, 2);
      $xfer += $output->writeI32($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->content !== null) {
      $xfer += $output->writeFieldBegin('content', TType::STRING, 3);
      $xfer += $output->writeString($this->content);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->status !== null) {
      $xfer += $output->writeFieldBegin('status', TType::I32, 4);
      $xfer += $output->writeI32($this->status);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->access_time !== null) {
      $xfer += $output->writeFieldBegin('access_time', TType::I32, 5);
      $xfer += $output->writeI32($this->access_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->badge_num !== null) {
      $xfer += $output->writeFieldBegin('badge_num', TType::I32, 6);
      $xfer += $output->writeI32($this->badge_num);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->red_point !== null) {
      $xfer += $output->writeFieldBegin('red_point', TType::I32, 7);
      $xfer += $output->writeI32($this->red_point);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->jump !== null) {
      if (!is_object($this->jump)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('jump', TType::STRUCT, 8);
      $xfer += $this->jump->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->display !== null) {
      $xfer += $output->writeFieldBegin('display', TType::I32, 9);
      $xfer += $output->writeI32($this->display);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->expire_time !== null) {
      $xfer += $output->writeFieldBegin('expire_time', TType::I32, 10);
      $xfer += $output->writeI32($this->expire_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->fromuid !== null) {
      $xfer += $output->writeFieldBegin('fromuid', TType::I64, 11);
      $xfer += $output->writeI64($this->fromuid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->expired_link !== null) {
      $xfer += $output->writeFieldBegin('expired_link', TType::I32, 12);
      $xfer += $output->writeI32($this->expired_link);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class RetInnerpagemsg {
  static $_TSPEC;

  /**
   * @var int
   */
  public $ret = null;
  /**
   * @var string
   */
  public $msg = null;
  /**
   * @var \xyz\msgcentersvr\InnerpageMessageOut[]
   */
  public $data = null;
  /**
   * @var int
   */
  public $count = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ret',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'msg',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'data',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\xyz\msgcentersvr\InnerpageMessageOut',
            ),
          ),
        4 => array(
          'var' => 'count',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ret'])) {
        $this->ret = $vals['ret'];
      }
      if (isset($vals['msg'])) {
        $this->msg = $vals['msg'];
      }
      if (isset($vals['data'])) {
        $this->data = $vals['data'];
      }
      if (isset($vals['count'])) {
        $this->count = $vals['count'];
      }
    }
  }

  public function getName() {
    return 'RetInnerpagemsg';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ret);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->msg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->data = array();
            $_size141 = 0;
            $_etype144 = 0;
            $xfer += $input->readListBegin($_etype144, $_size141);
            for ($_i145 = 0; $_i145 < $_size141; ++$_i145)
            {
              $elem146 = null;
              $elem146 = new \xyz\msgcentersvr\InnerpageMessageOut();
              $xfer += $elem146->read($input);
              $this->data []= $elem146;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->count);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('RetInnerpagemsg');
    if ($this->ret !== null) {
      $xfer += $output->writeFieldBegin('ret', TType::I32, 1);
      $xfer += $output->writeI32($this->ret);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->msg !== null) {
      $xfer += $output->writeFieldBegin('msg', TType::STRING, 2);
      $xfer += $output->writeString($this->msg);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->data !== null) {
      if (!is_array($this->data)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('data', TType::LST, 3);
      {
        $output->writeListBegin(TType::STRUCT, count($this->data));
        {
          foreach ($this->data as $iter147)
          {
            $xfer += $iter147->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->count !== null) {
      $xfer += $output->writeFieldBegin('count', TType::I32, 4);
      $xfer += $output->writeI32($this->count);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class RetRedPoint {
  static $_TSPEC;

  /**
   * @var int
   */
  public $ret = null;
  /**
   * @var string
   */
  public $msg = null;
  /**
   * @var int
   */
  public $red_point = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ret',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'msg',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'red_point',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ret'])) {
        $this->ret = $vals['ret'];
      }
      if (isset($vals['msg'])) {
        $this->msg = $vals['msg'];
      }
      if (isset($vals['red_point'])) {
        $this->red_point = $vals['red_point'];
      }
    }
  }

  public function getName() {
    return 'RetRedPoint';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ret);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->msg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->red_point);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('RetRedPoint');
    if ($this->ret !== null) {
      $xfer += $output->writeFieldBegin('ret', TType::I32, 1);
      $xfer += $output->writeI32($this->ret);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->msg !== null) {
      $xfer += $output->writeFieldBegin('msg', TType::STRING, 2);
      $xfer += $output->writeString($this->msg);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->red_point !== null) {
      $xfer += $output->writeFieldBegin('red_point', TType::I32, 3);
      $xfer += $output->writeI32($this->red_point);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class InsertResult {
  static $_TSPEC;

  /**
   * @var int
   */
  public $uid = null;
  /**
   * @var int
   */
  public $ret = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'uid',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'ret',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['uid'])) {
        $this->uid = $vals['uid'];
      }
      if (isset($vals['ret'])) {
        $this->ret = $vals['ret'];
      }
    }
  }

  public function getName() {
    return 'InsertResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ret);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('InsertResult');
    if ($this->uid !== null) {
      $xfer += $output->writeFieldBegin('uid', TType::I64, 1);
      $xfer += $output->writeI64($this->uid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ret !== null) {
      $xfer += $output->writeFieldBegin('ret', TType::I32, 2);
      $xfer += $output->writeI32($this->ret);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class retbatch {
  static $_TSPEC;

  /**
   * @var int
   */
  public $ret = null;
  /**
   * @var string
   */
  public $msg = null;
  /**
   * @var int
   */
  public $msgid = null;
  /**
   * @var \xyz\msgcentersvr\InsertResult[]
   */
  public $errors = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ret',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'msg',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'msgid',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'errors',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\xyz\msgcentersvr\InsertResult',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ret'])) {
        $this->ret = $vals['ret'];
      }
      if (isset($vals['msg'])) {
        $this->msg = $vals['msg'];
      }
      if (isset($vals['msgid'])) {
        $this->msgid = $vals['msgid'];
      }
      if (isset($vals['errors'])) {
        $this->errors = $vals['errors'];
      }
    }
  }

  public function getName() {
    return 'retbatch';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ret);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->msg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->msgid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::LST) {
            $this->errors = array();
            $_size148 = 0;
            $_etype151 = 0;
            $xfer += $input->readListBegin($_etype151, $_size148);
            for ($_i152 = 0; $_i152 < $_size148; ++$_i152)
            {
              $elem153 = null;
              $elem153 = new \xyz\msgcentersvr\InsertResult();
              $xfer += $elem153->read($input);
              $this->errors []= $elem153;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('retbatch');
    if ($this->ret !== null) {
      $xfer += $output->writeFieldBegin('ret', TType::I32, 1);
      $xfer += $output->writeI32($this->ret);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->msg !== null) {
      $xfer += $output->writeFieldBegin('msg', TType::STRING, 2);
      $xfer += $output->writeString($this->msg);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->msgid !== null) {
      $xfer += $output->writeFieldBegin('msgid', TType::I64, 3);
      $xfer += $output->writeI64($this->msgid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->errors !== null) {
      if (!is_array($this->errors)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('errors', TType::LST, 4);
      {
        $output->writeListBegin(TType::STRUCT, count($this->errors));
        {
          foreach ($this->errors as $iter154)
          {
            $xfer += $iter154->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class retmsgstatus {
  static $_TSPEC;

  /**
   * @var int
   */
  public $ret = null;
  /**
   * @var string
   */
  public $msg = null;
  /**
   * @var \xyz\msgcentersvr\SMsgStatus[]
   */
  public $msgstatuslist = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ret',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'msg',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'msgstatuslist',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\xyz\msgcentersvr\SMsgStatus',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ret'])) {
        $this->ret = $vals['ret'];
      }
      if (isset($vals['msg'])) {
        $this->msg = $vals['msg'];
      }
      if (isset($vals['msgstatuslist'])) {
        $this->msgstatuslist = $vals['msgstatuslist'];
      }
    }
  }

  public function getName() {
    return 'retmsgstatus';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ret);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->msg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->msgstatuslist = array();
            $_size155 = 0;
            $_etype158 = 0;
            $xfer += $input->readListBegin($_etype158, $_size155);
            for ($_i159 = 0; $_i159 < $_size155; ++$_i159)
            {
              $elem160 = null;
              $elem160 = new \xyz\msgcentersvr\SMsgStatus();
              $xfer += $elem160->read($input);
              $this->msgstatuslist []= $elem160;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('retmsgstatus');
    if ($this->ret !== null) {
      $xfer += $output->writeFieldBegin('ret', TType::I32, 1);
      $xfer += $output->writeI32($this->ret);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->msg !== null) {
      $xfer += $output->writeFieldBegin('msg', TType::STRING, 2);
      $xfer += $output->writeString($this->msg);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->msgstatuslist !== null) {
      if (!is_array($this->msgstatuslist)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('msgstatuslist', TType::LST, 3);
      {
        $output->writeListBegin(TType::STRUCT, count($this->msgstatuslist));
        {
          foreach ($this->msgstatuslist as $iter161)
          {
            $xfer += $iter161->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class retmsgdata {
  static $_TSPEC;

  /**
   * @var int
   */
  public $ret = null;
  /**
   * @var string
   */
  public $msg = null;
  /**
   * @var \xyz\msgcentersvr\MsgDataProtocolOut[]
   */
  public $msgdatalist = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ret',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'msg',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'msgdatalist',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\xyz\msgcentersvr\MsgDataProtocolOut',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ret'])) {
        $this->ret = $vals['ret'];
      }
      if (isset($vals['msg'])) {
        $this->msg = $vals['msg'];
      }
      if (isset($vals['msgdatalist'])) {
        $this->msgdatalist = $vals['msgdatalist'];
      }
    }
  }

  public function getName() {
    return 'retmsgdata';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ret);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->msg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->msgdatalist = array();
            $_size162 = 0;
            $_etype165 = 0;
            $xfer += $input->readListBegin($_etype165, $_size162);
            for ($_i166 = 0; $_i166 < $_size162; ++$_i166)
            {
              $elem167 = null;
              $elem167 = new \xyz\msgcentersvr\MsgDataProtocolOut();
              $xfer += $elem167->read($input);
              $this->msgdatalist []= $elem167;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('retmsgdata');
    if ($this->ret !== null) {
      $xfer += $output->writeFieldBegin('ret', TType::I32, 1);
      $xfer += $output->writeI32($this->ret);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->msg !== null) {
      $xfer += $output->writeFieldBegin('msg', TType::STRING, 2);
      $xfer += $output->writeString($this->msg);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->msgdatalist !== null) {
      if (!is_array($this->msgdatalist)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('msgdatalist', TType::LST, 3);
      {
        $output->writeListBegin(TType::STRUCT, count($this->msgdatalist));
        {
          foreach ($this->msgdatalist as $iter168)
          {
            $xfer += $iter168->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MobileMessageQueryResult {
  static $_TSPEC;

  /**
   * @var int
   */
  public $ret = null;
  /**
   * @var string
   */
  public $msg = null;
  /**
   * @var \xyz\msgcentersvr\MobileMessageDataProtocolOut[]
   */
  public $messageDataList = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ret',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'msg',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'messageDataList',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\xyz\msgcentersvr\MobileMessageDataProtocolOut',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ret'])) {
        $this->ret = $vals['ret'];
      }
      if (isset($vals['msg'])) {
        $this->msg = $vals['msg'];
      }
      if (isset($vals['messageDataList'])) {
        $this->messageDataList = $vals['messageDataList'];
      }
    }
  }

  public function getName() {
    return 'MobileMessageQueryResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ret);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->msg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->messageDataList = array();
            $_size169 = 0;
            $_etype172 = 0;
            $xfer += $input->readListBegin($_etype172, $_size169);
            for ($_i173 = 0; $_i173 < $_size169; ++$_i173)
            {
              $elem174 = null;
              $elem174 = new \xyz\msgcentersvr\MobileMessageDataProtocolOut();
              $xfer += $elem174->read($input);
              $this->messageDataList []= $elem174;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MobileMessageQueryResult');
    if ($this->ret !== null) {
      $xfer += $output->writeFieldBegin('ret', TType::I32, 1);
      $xfer += $output->writeI32($this->ret);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->msg !== null) {
      $xfer += $output->writeFieldBegin('msg', TType::STRING, 2);
      $xfer += $output->writeString($this->msg);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->messageDataList !== null) {
      if (!is_array($this->messageDataList)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('messageDataList', TType::LST, 3);
      {
        $output->writeListBegin(TType::STRUCT, count($this->messageDataList));
        {
          foreach ($this->messageDataList as $iter175)
          {
            $xfer += $iter175->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class UserType {
  static $_TSPEC;

  /**
   * @var int
   */
  public $type = null;
  /**
   * @var int
   */
  public $expire_time = null;
  /**
   * @var int
   */
  public $renew = null;
  /**
   * @var int
   */
  public $op_term = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'type',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'expire_time',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'renew',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'op_term',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['expire_time'])) {
        $this->expire_time = $vals['expire_time'];
      }
      if (isset($vals['renew'])) {
        $this->renew = $vals['renew'];
      }
      if (isset($vals['op_term'])) {
        $this->op_term = $vals['op_term'];
      }
    }
  }

  public function getName() {
    return 'UserType';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->expire_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->renew);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->op_term);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('UserType');
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::I32, 1);
      $xfer += $output->writeI32($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->expire_time !== null) {
      $xfer += $output->writeFieldBegin('expire_time', TType::I32, 2);
      $xfer += $output->writeI32($this->expire_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->renew !== null) {
      $xfer += $output->writeFieldBegin('renew', TType::I32, 3);
      $xfer += $output->writeI32($this->renew);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->op_term !== null) {
      $xfer += $output->writeFieldBegin('op_term', TType::I32, 4);
      $xfer += $output->writeI32($this->op_term);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TerminalProperty {
  static $_TSPEC;

  /**
   * @var int
   */
  public $uid = null;
  /**
   * @var int
   */
  public $op_term = null;
  /**
   * @var \xyz\msgcentersvr\UserType
   */
  public $user_type = null;
  /**
   * @var string
   */
  public $device_id = null;
  /**
   * @var int
   */
  public $op_location = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'uid',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'op_term',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'user_type',
          'type' => TType::STRUCT,
          'class' => '\xyz\msgcentersvr\UserType',
          ),
        4 => array(
          'var' => 'device_id',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'op_location',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['uid'])) {
        $this->uid = $vals['uid'];
      }
      if (isset($vals['op_term'])) {
        $this->op_term = $vals['op_term'];
      }
      if (isset($vals['user_type'])) {
        $this->user_type = $vals['user_type'];
      }
      if (isset($vals['device_id'])) {
        $this->device_id = $vals['device_id'];
      }
      if (isset($vals['op_location'])) {
        $this->op_location = $vals['op_location'];
      }
    }
  }

  public function getName() {
    return 'TerminalProperty';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->op_term);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->user_type = new \xyz\msgcentersvr\UserType();
            $xfer += $this->user_type->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->device_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->op_location);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TerminalProperty');
    if ($this->uid !== null) {
      $xfer += $output->writeFieldBegin('uid', TType::I64, 1);
      $xfer += $output->writeI64($this->uid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->op_term !== null) {
      $xfer += $output->writeFieldBegin('op_term', TType::I32, 2);
      $xfer += $output->writeI32($this->op_term);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->user_type !== null) {
      if (!is_object($this->user_type)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('user_type', TType::STRUCT, 3);
      $xfer += $this->user_type->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->device_id !== null) {
      $xfer += $output->writeFieldBegin('device_id', TType::STRING, 4);
      $xfer += $output->writeString($this->device_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->op_location !== null) {
      $xfer += $output->writeFieldBegin('op_location', TType::I32, 5);
      $xfer += $output->writeI32($this->op_location);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


