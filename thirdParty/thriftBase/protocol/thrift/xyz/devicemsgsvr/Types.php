<?php
namespace xyz\devicemsgsvr;

/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


final class EM_MSG_TYPE {
  const EM_MSG_PRIVATE = 1;
  const EM_MSG_PUBLIC = 2;
  static public $__names = array(
    1 => 'EM_MSG_PRIVATE',
    2 => 'EM_MSG_PUBLIC',
  );
}

final class EM_MSG_STATUS {
  const EM_NEW = 1;
  const EM_READ = 2;
  const EM_DEL = 3;
  static public $__names = array(
    1 => 'EM_NEW',
    2 => 'EM_READ',
    3 => 'EM_DEL',
  );
}

class DeviceMsgDataStorage {
  static $_TSPEC;

  /**
   * @var string
   */
  public $device_id = null;
  /**
   * @var \xyz\devicemsgsvr\MsgInfo[]
   */
  public $msglist = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'device_id',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'msglist',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\xyz\devicemsgsvr\MsgInfo',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['device_id'])) {
        $this->device_id = $vals['device_id'];
      }
      if (isset($vals['msglist'])) {
        $this->msglist = $vals['msglist'];
      }
    }
  }

  public function getName() {
    return 'DeviceMsgDataStorage';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->device_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->msglist = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readListBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $elem5 = new \xyz\devicemsgsvr\MsgInfo();
              $xfer += $elem5->read($input);
              $this->msglist []= $elem5;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('DeviceMsgDataStorage');
    if ($this->device_id !== null) {
      $xfer += $output->writeFieldBegin('device_id', TType::STRING, 1);
      $xfer += $output->writeString($this->device_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->msglist !== null) {
      if (!is_array($this->msglist)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('msglist', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRUCT, count($this->msglist));
        {
          foreach ($this->msglist as $iter6)
          {
            $xfer += $iter6->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class retcomm {
  static $_TSPEC;

  /**
   * @var int
   */
  public $ret = null;
  /**
   * @var string
   */
  public $msg = null;
  /**
   * @var int
   */
  public $msgid = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ret',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'msg',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'msgid',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ret'])) {
        $this->ret = $vals['ret'];
      }
      if (isset($vals['msg'])) {
        $this->msg = $vals['msg'];
      }
      if (isset($vals['msgid'])) {
        $this->msgid = $vals['msgid'];
      }
    }
  }

  public function getName() {
    return 'retcomm';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ret);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->msg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->msgid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('retcomm');
    if ($this->ret !== null) {
      $xfer += $output->writeFieldBegin('ret', TType::I32, 1);
      $xfer += $output->writeI32($this->ret);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->msg !== null) {
      $xfer += $output->writeFieldBegin('msg', TType::STRING, 2);
      $xfer += $output->writeString($this->msg);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->msgid !== null) {
      $xfer += $output->writeFieldBegin('msgid', TType::I64, 3);
      $xfer += $output->writeI64($this->msgid);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MsgInfo {
  static $_TSPEC;

  /**
   * @var int
   */
  public $push_time = null;
  /**
   * @var string
   */
  public $contents = null;
  /**
   * @var int
   */
  public $msg_type = null;
  /**
   * @var int
   */
  public $msg_status = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'push_time',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'contents',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'msg_type',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'msg_status',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['push_time'])) {
        $this->push_time = $vals['push_time'];
      }
      if (isset($vals['contents'])) {
        $this->contents = $vals['contents'];
      }
      if (isset($vals['msg_type'])) {
        $this->msg_type = $vals['msg_type'];
      }
      if (isset($vals['msg_status'])) {
        $this->msg_status = $vals['msg_status'];
      }
    }
  }

  public function getName() {
    return 'MsgInfo';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->push_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->contents);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->msg_type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->msg_status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MsgInfo');
    if ($this->push_time !== null) {
      $xfer += $output->writeFieldBegin('push_time', TType::I32, 1);
      $xfer += $output->writeI32($this->push_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->contents !== null) {
      $xfer += $output->writeFieldBegin('contents', TType::STRING, 2);
      $xfer += $output->writeString($this->contents);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->msg_type !== null) {
      $xfer += $output->writeFieldBegin('msg_type', TType::I32, 3);
      $xfer += $output->writeI32($this->msg_type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->msg_status !== null) {
      $xfer += $output->writeFieldBegin('msg_status', TType::I32, 4);
      $xfer += $output->writeI32($this->msg_status);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class resMsgList {
  static $_TSPEC;

  /**
   * @var int
   */
  public $ret = null;
  /**
   * @var string
   */
  public $msg = null;
  /**
   * @var \xyz\devicemsgsvr\MsgInfo[]
   */
  public $msgdatalist = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ret',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'msg',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'msgdatalist',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\xyz\devicemsgsvr\MsgInfo',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ret'])) {
        $this->ret = $vals['ret'];
      }
      if (isset($vals['msg'])) {
        $this->msg = $vals['msg'];
      }
      if (isset($vals['msgdatalist'])) {
        $this->msgdatalist = $vals['msgdatalist'];
      }
    }
  }

  public function getName() {
    return 'resMsgList';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ret);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->msg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->msgdatalist = array();
            $_size7 = 0;
            $_etype10 = 0;
            $xfer += $input->readListBegin($_etype10, $_size7);
            for ($_i11 = 0; $_i11 < $_size7; ++$_i11)
            {
              $elem12 = null;
              $elem12 = new \xyz\devicemsgsvr\MsgInfo();
              $xfer += $elem12->read($input);
              $this->msgdatalist []= $elem12;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('resMsgList');
    if ($this->ret !== null) {
      $xfer += $output->writeFieldBegin('ret', TType::I32, 1);
      $xfer += $output->writeI32($this->ret);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->msg !== null) {
      $xfer += $output->writeFieldBegin('msg', TType::STRING, 2);
      $xfer += $output->writeString($this->msg);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->msgdatalist !== null) {
      if (!is_array($this->msgdatalist)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('msgdatalist', TType::LST, 3);
      {
        $output->writeListBegin(TType::STRUCT, count($this->msgdatalist));
        {
          foreach ($this->msgdatalist as $iter13)
          {
            $xfer += $iter13->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


