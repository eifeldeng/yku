<?php
namespace xyz\statsvr;

/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


final class SUBCMD {
  const STAT_SVR_REPORT_REQ = 1;
  const STAT_SVR_REPORT_RSP = 2;
  const STAT_SVR_RECOMMEND_REQ = 3;
  const STAT_SVR_RECOMMEND_RSP = 4;
  static public $__names = array(
    1 => 'STAT_SVR_REPORT_REQ',
    2 => 'STAT_SVR_REPORT_RSP',
    3 => 'STAT_SVR_RECOMMEND_REQ',
    4 => 'STAT_SVR_RECOMMEND_RSP',
  );
}

final class ErrorCode {
  const ERR_SVR_DB_INSERT = -400043001;
  const ERR_SVR_DB_NOTFOUND = -400043002;
  const ERR_SVR_DB_QUERY = -400043003;
  static public $__names = array(
    -400043001 => 'ERR_SVR_DB_INSERT',
    -400043002 => 'ERR_SVR_DB_NOTFOUND',
    -400043003 => 'ERR_SVR_DB_QUERY',
  );
}

class StatInfo {
  static $_TSPEC;

  public $uid = null;
  public $euid = null;
  public $key = null;
  public $value = null;
  public $reporttime = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'uid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'euid',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'value',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'reporttime',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['uid'])) {
        $this->uid = $vals['uid'];
      }
      if (isset($vals['euid'])) {
        $this->euid = $vals['euid'];
      }
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['value'])) {
        $this->value = $vals['value'];
      }
      if (isset($vals['reporttime'])) {
        $this->reporttime = $vals['reporttime'];
      }
    }
  }

  public function getName() {
    return 'StatInfo';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->euid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->value);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->reporttime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('StatInfo');
    if ($this->uid !== null) {
      $xfer += $output->writeFieldBegin('uid', TType::STRING, 1);
      $xfer += $output->writeString($this->uid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->euid !== null) {
      $xfer += $output->writeFieldBegin('euid', TType::STRING, 2);
      $xfer += $output->writeString($this->euid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 3);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->value !== null) {
      $xfer += $output->writeFieldBegin('value', TType::STRING, 4);
      $xfer += $output->writeString($this->value);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->reporttime !== null) {
      $xfer += $output->writeFieldBegin('reporttime', TType::I64, 5);
      $xfer += $output->writeI64($this->reporttime);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ReportStatReqMsg {
  static $_TSPEC;

  public $list_stat = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'list_stat',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\xyz\statsvr\StatInfo',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['list_stat'])) {
        $this->list_stat = $vals['list_stat'];
      }
    }
  }

  public function getName() {
    return 'ReportStatReqMsg';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->list_stat = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readListBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $elem5 = new \xyz\statsvr\StatInfo();
              $xfer += $elem5->read($input);
              $this->list_stat []= $elem5;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ReportStatReqMsg');
    if ($this->list_stat !== null) {
      if (!is_array($this->list_stat)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('list_stat', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->list_stat));
        {
          foreach ($this->list_stat as $iter6)
          {
            $xfer += $iter6->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ReportStatRspMsg {
  static $_TSPEC;


  public function __construct() {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        );
    }
  }

  public function getName() {
    return 'ReportStatRspMsg';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ReportStatRspMsg');
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class StatMsg {
  static $_TSPEC;

  public $subcmd = null;
  public $serviceid = null;
  public $errorinfo = null;
  public $reportReq = null;
  public $reportRsp = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'subcmd',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'serviceid',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'errorinfo',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'reportReq',
          'type' => TType::STRUCT,
          'class' => '\xyz\statsvr\ReportStatReqMsg',
          ),
        5 => array(
          'var' => 'reportRsp',
          'type' => TType::STRUCT,
          'class' => '\xyz\statsvr\ReportStatRspMsg',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['subcmd'])) {
        $this->subcmd = $vals['subcmd'];
      }
      if (isset($vals['serviceid'])) {
        $this->serviceid = $vals['serviceid'];
      }
      if (isset($vals['errorinfo'])) {
        $this->errorinfo = $vals['errorinfo'];
      }
      if (isset($vals['reportReq'])) {
        $this->reportReq = $vals['reportReq'];
      }
      if (isset($vals['reportRsp'])) {
        $this->reportRsp = $vals['reportRsp'];
      }
    }
  }

  public function getName() {
    return 'StatMsg';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->subcmd);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->serviceid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->errorinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->reportReq = new \xyz\statsvr\ReportStatReqMsg();
            $xfer += $this->reportReq->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->reportRsp = new \xyz\statsvr\ReportStatRspMsg();
            $xfer += $this->reportRsp->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('StatMsg');
    if ($this->subcmd !== null) {
      $xfer += $output->writeFieldBegin('subcmd', TType::I32, 1);
      $xfer += $output->writeI32($this->subcmd);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->serviceid !== null) {
      $xfer += $output->writeFieldBegin('serviceid', TType::I32, 2);
      $xfer += $output->writeI32($this->serviceid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->errorinfo !== null) {
      $xfer += $output->writeFieldBegin('errorinfo', TType::STRING, 3);
      $xfer += $output->writeString($this->errorinfo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->reportReq !== null) {
      if (!is_object($this->reportReq)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('reportReq', TType::STRUCT, 4);
      $xfer += $this->reportReq->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->reportRsp !== null) {
      if (!is_object($this->reportRsp)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('reportRsp', TType::STRUCT, 5);
      $xfer += $this->reportRsp->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


