<?php
namespace xyz\monitorsvr;
/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


interface monitorsvrIf {
  public function svr_timedelay(\xyz\monitorsvr\IpTimedelay $td);
  public function svr_monitorinfo(\xyz\monitorsvr\IpMonitorinfo $ds);
  public function svr_livealarm(\xyz\monitorsvr\IpLivealarm $la);
  public function machine_monitorinfo(\xyz\monitorsvr\MacMonitorinfo $ds);
  public function exp_timedelay(\xyz\monitorsvr\IpExpTimedelay $td);
  public function svr_log(\xyz\monitorsvr\IpLog $logs);
  public function svr_timedelay_merge(\xyz\monitorsvr\IpTimedelayMerge $td);
  public function syncconfig(\xyz\monitorsvr\LogSwitchConfig $conf);
}

class monitorsvrClient implements \xyz\monitorsvr\monitorsvrIf {
  protected $input_ = null;
  protected $output_ = null;

  protected $seqid_ = 0;

  public function __construct($input, $output=null) {
    $this->input_ = $input;
    $this->output_ = $output ? $output : $input;
  }

  public function svr_timedelay(\xyz\monitorsvr\IpTimedelay $td)
  {
    $this->send_svr_timedelay($td);
  }

  public function send_svr_timedelay(\xyz\monitorsvr\IpTimedelay $td)
  {
    $args = new \xyz\monitorsvr\monitorsvr_svr_timedelay_args();
    $args->td = $td;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'svr_timedelay', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('svr_timedelay', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }
  public function svr_monitorinfo(\xyz\monitorsvr\IpMonitorinfo $ds)
  {
    $this->send_svr_monitorinfo($ds);
  }

  public function send_svr_monitorinfo(\xyz\monitorsvr\IpMonitorinfo $ds)
  {
    $args = new \xyz\monitorsvr\monitorsvr_svr_monitorinfo_args();
    $args->ds = $ds;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'svr_monitorinfo', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('svr_monitorinfo', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }
  public function svr_livealarm(\xyz\monitorsvr\IpLivealarm $la)
  {
    $this->send_svr_livealarm($la);
    return $this->recv_svr_livealarm();
  }

  public function send_svr_livealarm(\xyz\monitorsvr\IpLivealarm $la)
  {
    $args = new \xyz\monitorsvr\monitorsvr_svr_livealarm_args();
    $args->la = $la;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'svr_livealarm', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('svr_livealarm', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_svr_livealarm()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\xyz\monitorsvr\monitorsvr_svr_livealarm_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \xyz\monitorsvr\monitorsvr_svr_livealarm_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("svr_livealarm failed: unknown result");
  }

  public function machine_monitorinfo(\xyz\monitorsvr\MacMonitorinfo $ds)
  {
    $this->send_machine_monitorinfo($ds);
  }

  public function send_machine_monitorinfo(\xyz\monitorsvr\MacMonitorinfo $ds)
  {
    $args = new \xyz\monitorsvr\monitorsvr_machine_monitorinfo_args();
    $args->ds = $ds;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'machine_monitorinfo', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('machine_monitorinfo', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }
  public function exp_timedelay(\xyz\monitorsvr\IpExpTimedelay $td)
  {
    $this->send_exp_timedelay($td);
  }

  public function send_exp_timedelay(\xyz\monitorsvr\IpExpTimedelay $td)
  {
    $args = new \xyz\monitorsvr\monitorsvr_exp_timedelay_args();
    $args->td = $td;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'exp_timedelay', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('exp_timedelay', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }
  public function svr_log(\xyz\monitorsvr\IpLog $logs)
  {
    $this->send_svr_log($logs);
  }

  public function send_svr_log(\xyz\monitorsvr\IpLog $logs)
  {
    $args = new \xyz\monitorsvr\monitorsvr_svr_log_args();
    $args->logs = $logs;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'svr_log', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('svr_log', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }
  public function svr_timedelay_merge(\xyz\monitorsvr\IpTimedelayMerge $td)
  {
    $this->send_svr_timedelay_merge($td);
  }

  public function send_svr_timedelay_merge(\xyz\monitorsvr\IpTimedelayMerge $td)
  {
    $args = new \xyz\monitorsvr\monitorsvr_svr_timedelay_merge_args();
    $args->td = $td;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'svr_timedelay_merge', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('svr_timedelay_merge', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }
  public function syncconfig(\xyz\monitorsvr\LogSwitchConfig $conf)
  {
    $this->send_syncconfig($conf);
    return $this->recv_syncconfig();
  }

  public function send_syncconfig(\xyz\monitorsvr\LogSwitchConfig $conf)
  {
    $args = new \xyz\monitorsvr\monitorsvr_syncconfig_args();
    $args->conf = $conf;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'syncconfig', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('syncconfig', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_syncconfig()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\xyz\monitorsvr\monitorsvr_syncconfig_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \xyz\monitorsvr\monitorsvr_syncconfig_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("syncconfig failed: unknown result");
  }

}

// HELPER FUNCTIONS AND STRUCTURES

class monitorsvr_svr_timedelay_args {
  static $_TSPEC;

  public $td = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'td',
          'type' => TType::STRUCT,
          'class' => '\xyz\monitorsvr\ip_timedelay',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['td'])) {
        $this->td = $vals['td'];
      }
    }
  }

  public function getName() {
    return 'monitorsvr_svr_timedelay_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->td = new \xyz\monitorsvr\ip_timedelay();
            $xfer += $this->td->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('monitorsvr_svr_timedelay_args');
    if ($this->td !== null) {
      if (!is_object($this->td)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('td', TType::STRUCT, 1);
      $xfer += $this->td->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class monitorsvr_svr_monitorinfo_args {
  static $_TSPEC;

  public $ds = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ds',
          'type' => TType::STRUCT,
          'class' => '\xyz\monitorsvr\ip_monitorinfo',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ds'])) {
        $this->ds = $vals['ds'];
      }
    }
  }

  public function getName() {
    return 'monitorsvr_svr_monitorinfo_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ds = new \xyz\monitorsvr\ip_monitorinfo();
            $xfer += $this->ds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('monitorsvr_svr_monitorinfo_args');
    if ($this->ds !== null) {
      if (!is_object($this->ds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('ds', TType::STRUCT, 1);
      $xfer += $this->ds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class monitorsvr_svr_livealarm_args {
  static $_TSPEC;

  public $la = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'la',
          'type' => TType::STRUCT,
          'class' => '\xyz\monitorsvr\ip_livealarm',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['la'])) {
        $this->la = $vals['la'];
      }
    }
  }

  public function getName() {
    return 'monitorsvr_svr_livealarm_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->la = new \xyz\monitorsvr\ip_livealarm();
            $xfer += $this->la->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('monitorsvr_svr_livealarm_args');
    if ($this->la !== null) {
      if (!is_object($this->la)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('la', TType::STRUCT, 1);
      $xfer += $this->la->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class monitorsvr_svr_livealarm_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'monitorsvr_svr_livealarm_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('monitorsvr_svr_livealarm_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I32, 0);
      $xfer += $output->writeI32($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class monitorsvr_machine_monitorinfo_args {
  static $_TSPEC;

  public $ds = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ds',
          'type' => TType::STRUCT,
          'class' => '\xyz\monitorsvr\mac_monitorinfo',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ds'])) {
        $this->ds = $vals['ds'];
      }
    }
  }

  public function getName() {
    return 'monitorsvr_machine_monitorinfo_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ds = new \xyz\monitorsvr\mac_monitorinfo();
            $xfer += $this->ds->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('monitorsvr_machine_monitorinfo_args');
    if ($this->ds !== null) {
      if (!is_object($this->ds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('ds', TType::STRUCT, 1);
      $xfer += $this->ds->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class monitorsvr_exp_timedelay_args {
  static $_TSPEC;

  public $td = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'td',
          'type' => TType::STRUCT,
          'class' => '\xyz\monitorsvr\ip_exp_timedelay',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['td'])) {
        $this->td = $vals['td'];
      }
    }
  }

  public function getName() {
    return 'monitorsvr_exp_timedelay_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->td = new \xyz\monitorsvr\ip_exp_timedelay();
            $xfer += $this->td->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('monitorsvr_exp_timedelay_args');
    if ($this->td !== null) {
      if (!is_object($this->td)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('td', TType::STRUCT, 1);
      $xfer += $this->td->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class monitorsvr_svr_log_args {
  static $_TSPEC;

  public $logs = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'logs',
          'type' => TType::STRUCT,
          'class' => '\xyz\monitorsvr\ip_log',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['logs'])) {
        $this->logs = $vals['logs'];
      }
    }
  }

  public function getName() {
    return 'monitorsvr_svr_log_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->logs = new \xyz\monitorsvr\ip_log();
            $xfer += $this->logs->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('monitorsvr_svr_log_args');
    if ($this->logs !== null) {
      if (!is_object($this->logs)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('logs', TType::STRUCT, 1);
      $xfer += $this->logs->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class monitorsvr_svr_timedelay_merge_args {
  static $_TSPEC;

  public $td = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'td',
          'type' => TType::STRUCT,
          'class' => '\xyz\monitorsvr\ip_timedelay_merge',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['td'])) {
        $this->td = $vals['td'];
      }
    }
  }

  public function getName() {
    return 'monitorsvr_svr_timedelay_merge_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->td = new \xyz\monitorsvr\ip_timedelay_merge();
            $xfer += $this->td->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('monitorsvr_svr_timedelay_merge_args');
    if ($this->td !== null) {
      if (!is_object($this->td)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('td', TType::STRUCT, 1);
      $xfer += $this->td->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class monitorsvr_syncconfig_args {
  static $_TSPEC;

  public $conf = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'conf',
          'type' => TType::STRUCT,
          'class' => '\xyz\monitorsvr\log_switch_config',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['conf'])) {
        $this->conf = $vals['conf'];
      }
    }
  }

  public function getName() {
    return 'monitorsvr_syncconfig_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->conf = new \xyz\monitorsvr\log_switch_config();
            $xfer += $this->conf->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('monitorsvr_syncconfig_args');
    if ($this->conf !== null) {
      if (!is_object($this->conf)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('conf', TType::STRUCT, 1);
      $xfer += $this->conf->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class monitorsvr_syncconfig_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\xyz\monitorsvr\log_switch_config',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'monitorsvr_syncconfig_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \xyz\monitorsvr\log_switch_config();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('monitorsvr_syncconfig_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


