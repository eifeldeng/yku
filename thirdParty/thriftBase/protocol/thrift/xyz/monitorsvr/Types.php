<?php
namespace xyz\monitorsvr;

/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


class log_switch_config {
  static $_TSPEC;

  public $ip = null;
  public $svrnames = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ip',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'svrnames',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ip'])) {
        $this->ip = $vals['ip'];
      }
      if (isset($vals['svrnames'])) {
        $this->svrnames = $vals['svrnames'];
      }
    }
  }

  public function getName() {
    return 'log_switch_config';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ip);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->svrnames = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readListBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $xfer += $input->readString($elem5);
              $this->svrnames []= $elem5;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('log_switch_config');
    if ($this->ip !== null) {
      $xfer += $output->writeFieldBegin('ip', TType::STRING, 1);
      $xfer += $output->writeString($this->ip);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->svrnames !== null) {
      if (!is_array($this->svrnames)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('svrnames', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRING, count($this->svrnames));
        {
          foreach ($this->svrnames as $iter6)
          {
            $xfer += $output->writeString($iter6);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class raw_exp_timedelay {
  static $_TSPEC;

  public $expname = null;
  public $expurl = null;
  public $expuri = null;
  public $totalcount = null;
  public $totaldelayms = null;
  public $retcode = null;
  public $timestamp = null;
  public $loginfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'expname',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'expurl',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'expuri',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'totalcount',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'totaldelayms',
          'type' => TType::I64,
          ),
        6 => array(
          'var' => 'retcode',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        8 => array(
          'var' => 'loginfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['expname'])) {
        $this->expname = $vals['expname'];
      }
      if (isset($vals['expurl'])) {
        $this->expurl = $vals['expurl'];
      }
      if (isset($vals['expuri'])) {
        $this->expuri = $vals['expuri'];
      }
      if (isset($vals['totalcount'])) {
        $this->totalcount = $vals['totalcount'];
      }
      if (isset($vals['totaldelayms'])) {
        $this->totaldelayms = $vals['totaldelayms'];
      }
      if (isset($vals['retcode'])) {
        $this->retcode = $vals['retcode'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['loginfo'])) {
        $this->loginfo = $vals['loginfo'];
      }
    }
  }

  public function getName() {
    return 'raw_exp_timedelay';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->expname);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->expurl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->expuri);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->totalcount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->totaldelayms);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->retcode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->loginfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('raw_exp_timedelay');
    if ($this->expname !== null) {
      $xfer += $output->writeFieldBegin('expname', TType::STRING, 1);
      $xfer += $output->writeString($this->expname);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->expurl !== null) {
      $xfer += $output->writeFieldBegin('expurl', TType::STRING, 2);
      $xfer += $output->writeString($this->expurl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->expuri !== null) {
      $xfer += $output->writeFieldBegin('expuri', TType::STRING, 3);
      $xfer += $output->writeString($this->expuri);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->totalcount !== null) {
      $xfer += $output->writeFieldBegin('totalcount', TType::I64, 4);
      $xfer += $output->writeI64($this->totalcount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->totaldelayms !== null) {
      $xfer += $output->writeFieldBegin('totaldelayms', TType::I64, 5);
      $xfer += $output->writeI64($this->totaldelayms);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->retcode !== null) {
      $xfer += $output->writeFieldBegin('retcode', TType::STRING, 6);
      $xfer += $output->writeString($this->retcode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 7);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->loginfo !== null) {
      $xfer += $output->writeFieldBegin('loginfo', TType::STRING, 8);
      $xfer += $output->writeString($this->loginfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class pid_exp_timedelay {
  static $_TSPEC;

  public $expname = null;
  public $expurl = null;
  public $expuri = null;
  public $totalcount = null;
  public $totaldelayms = null;
  public $retcodecounts = null;
  public $delaymscounts = null;
  public $timestamp = null;
  public $retcodelogs = null;
  public $delaymslogs = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'expname',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'expurl',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'expuri',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'totalcount',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'totaldelayms',
          'type' => TType::I64,
          ),
        6 => array(
          'var' => 'retcodecounts',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::I64,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::I64,
            ),
          ),
        7 => array(
          'var' => 'delaymscounts',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::I64,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::I64,
            ),
          ),
        8 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        9 => array(
          'var' => 'retcodelogs',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        10 => array(
          'var' => 'delaymslogs',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['expname'])) {
        $this->expname = $vals['expname'];
      }
      if (isset($vals['expurl'])) {
        $this->expurl = $vals['expurl'];
      }
      if (isset($vals['expuri'])) {
        $this->expuri = $vals['expuri'];
      }
      if (isset($vals['totalcount'])) {
        $this->totalcount = $vals['totalcount'];
      }
      if (isset($vals['totaldelayms'])) {
        $this->totaldelayms = $vals['totaldelayms'];
      }
      if (isset($vals['retcodecounts'])) {
        $this->retcodecounts = $vals['retcodecounts'];
      }
      if (isset($vals['delaymscounts'])) {
        $this->delaymscounts = $vals['delaymscounts'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['retcodelogs'])) {
        $this->retcodelogs = $vals['retcodelogs'];
      }
      if (isset($vals['delaymslogs'])) {
        $this->delaymslogs = $vals['delaymslogs'];
      }
    }
  }

  public function getName() {
    return 'pid_exp_timedelay';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->expname);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->expurl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->expuri);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->totalcount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->totaldelayms);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::MAP) {
            $this->retcodecounts = array();
            $_size7 = 0;
            $_ktype8 = 0;
            $_vtype9 = 0;
            $xfer += $input->readMapBegin($_ktype8, $_vtype9, $_size7);
            for ($_i11 = 0; $_i11 < $_size7; ++$_i11)
            {
              $key12 = '';
              $val13 = 0;
              $xfer += $input->readString($key12);
              $xfer += $input->readI64($val13);
              $this->retcodecounts[$key12] = $val13;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::MAP) {
            $this->delaymscounts = array();
            $_size14 = 0;
            $_ktype15 = 0;
            $_vtype16 = 0;
            $xfer += $input->readMapBegin($_ktype15, $_vtype16, $_size14);
            for ($_i18 = 0; $_i18 < $_size14; ++$_i18)
            {
              $key19 = '';
              $val20 = 0;
              $xfer += $input->readString($key19);
              $xfer += $input->readI64($val20);
              $this->delaymscounts[$key19] = $val20;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::MAP) {
            $this->retcodelogs = array();
            $_size21 = 0;
            $_ktype22 = 0;
            $_vtype23 = 0;
            $xfer += $input->readMapBegin($_ktype22, $_vtype23, $_size21);
            for ($_i25 = 0; $_i25 < $_size21; ++$_i25)
            {
              $key26 = '';
              $val27 = '';
              $xfer += $input->readString($key26);
              $xfer += $input->readString($val27);
              $this->retcodelogs[$key26] = $val27;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::MAP) {
            $this->delaymslogs = array();
            $_size28 = 0;
            $_ktype29 = 0;
            $_vtype30 = 0;
            $xfer += $input->readMapBegin($_ktype29, $_vtype30, $_size28);
            for ($_i32 = 0; $_i32 < $_size28; ++$_i32)
            {
              $key33 = '';
              $val34 = '';
              $xfer += $input->readString($key33);
              $xfer += $input->readString($val34);
              $this->delaymslogs[$key33] = $val34;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('pid_exp_timedelay');
    if ($this->expname !== null) {
      $xfer += $output->writeFieldBegin('expname', TType::STRING, 1);
      $xfer += $output->writeString($this->expname);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->expurl !== null) {
      $xfer += $output->writeFieldBegin('expurl', TType::STRING, 2);
      $xfer += $output->writeString($this->expurl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->expuri !== null) {
      $xfer += $output->writeFieldBegin('expuri', TType::STRING, 3);
      $xfer += $output->writeString($this->expuri);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->totalcount !== null) {
      $xfer += $output->writeFieldBegin('totalcount', TType::I64, 4);
      $xfer += $output->writeI64($this->totalcount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->totaldelayms !== null) {
      $xfer += $output->writeFieldBegin('totaldelayms', TType::I64, 5);
      $xfer += $output->writeI64($this->totaldelayms);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->retcodecounts !== null) {
      if (!is_array($this->retcodecounts)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('retcodecounts', TType::MAP, 6);
      {
        $output->writeMapBegin(TType::STRING, TType::I64, count($this->retcodecounts));
        {
          foreach ($this->retcodecounts as $kiter35 => $viter36)
          {
            $xfer += $output->writeString($kiter35);
            $xfer += $output->writeI64($viter36);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->delaymscounts !== null) {
      if (!is_array($this->delaymscounts)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('delaymscounts', TType::MAP, 7);
      {
        $output->writeMapBegin(TType::STRING, TType::I64, count($this->delaymscounts));
        {
          foreach ($this->delaymscounts as $kiter37 => $viter38)
          {
            $xfer += $output->writeString($kiter37);
            $xfer += $output->writeI64($viter38);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 8);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->retcodelogs !== null) {
      if (!is_array($this->retcodelogs)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('retcodelogs', TType::MAP, 9);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->retcodelogs));
        {
          foreach ($this->retcodelogs as $kiter39 => $viter40)
          {
            $xfer += $output->writeString($kiter39);
            $xfer += $output->writeString($viter40);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->delaymslogs !== null) {
      if (!is_array($this->delaymslogs)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('delaymslogs', TType::MAP, 10);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->delaymslogs));
        {
          foreach ($this->delaymslogs as $kiter41 => $viter42)
          {
            $xfer += $output->writeString($kiter41);
            $xfer += $output->writeString($viter42);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ip_exp_timedelay {
  static $_TSPEC;

  public $ip = null;
  public $timestamp = null;
  public $expname = null;
  public $expurl = null;
  public $expuri = null;
  public $totalcount = null;
  public $totaldelayms = null;
  public $retcodecounts = null;
  public $delaymscounts = null;
  public $retcodelogs = null;
  public $delaymslogs = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ip',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'expname',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'expurl',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'expuri',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'totalcount',
          'type' => TType::I64,
          ),
        7 => array(
          'var' => 'totaldelayms',
          'type' => TType::I64,
          ),
        8 => array(
          'var' => 'retcodecounts',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::I64,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::I64,
            ),
          ),
        9 => array(
          'var' => 'delaymscounts',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::I64,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::I64,
            ),
          ),
        10 => array(
          'var' => 'retcodelogs',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        11 => array(
          'var' => 'delaymslogs',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ip'])) {
        $this->ip = $vals['ip'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['expname'])) {
        $this->expname = $vals['expname'];
      }
      if (isset($vals['expurl'])) {
        $this->expurl = $vals['expurl'];
      }
      if (isset($vals['expuri'])) {
        $this->expuri = $vals['expuri'];
      }
      if (isset($vals['totalcount'])) {
        $this->totalcount = $vals['totalcount'];
      }
      if (isset($vals['totaldelayms'])) {
        $this->totaldelayms = $vals['totaldelayms'];
      }
      if (isset($vals['retcodecounts'])) {
        $this->retcodecounts = $vals['retcodecounts'];
      }
      if (isset($vals['delaymscounts'])) {
        $this->delaymscounts = $vals['delaymscounts'];
      }
      if (isset($vals['retcodelogs'])) {
        $this->retcodelogs = $vals['retcodelogs'];
      }
      if (isset($vals['delaymslogs'])) {
        $this->delaymslogs = $vals['delaymslogs'];
      }
    }
  }

  public function getName() {
    return 'ip_exp_timedelay';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ip);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->expname);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->expurl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->expuri);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->totalcount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->totaldelayms);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::MAP) {
            $this->retcodecounts = array();
            $_size43 = 0;
            $_ktype44 = 0;
            $_vtype45 = 0;
            $xfer += $input->readMapBegin($_ktype44, $_vtype45, $_size43);
            for ($_i47 = 0; $_i47 < $_size43; ++$_i47)
            {
              $key48 = '';
              $val49 = 0;
              $xfer += $input->readString($key48);
              $xfer += $input->readI64($val49);
              $this->retcodecounts[$key48] = $val49;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::MAP) {
            $this->delaymscounts = array();
            $_size50 = 0;
            $_ktype51 = 0;
            $_vtype52 = 0;
            $xfer += $input->readMapBegin($_ktype51, $_vtype52, $_size50);
            for ($_i54 = 0; $_i54 < $_size50; ++$_i54)
            {
              $key55 = '';
              $val56 = 0;
              $xfer += $input->readString($key55);
              $xfer += $input->readI64($val56);
              $this->delaymscounts[$key55] = $val56;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::MAP) {
            $this->retcodelogs = array();
            $_size57 = 0;
            $_ktype58 = 0;
            $_vtype59 = 0;
            $xfer += $input->readMapBegin($_ktype58, $_vtype59, $_size57);
            for ($_i61 = 0; $_i61 < $_size57; ++$_i61)
            {
              $key62 = '';
              $val63 = '';
              $xfer += $input->readString($key62);
              $xfer += $input->readString($val63);
              $this->retcodelogs[$key62] = $val63;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::MAP) {
            $this->delaymslogs = array();
            $_size64 = 0;
            $_ktype65 = 0;
            $_vtype66 = 0;
            $xfer += $input->readMapBegin($_ktype65, $_vtype66, $_size64);
            for ($_i68 = 0; $_i68 < $_size64; ++$_i68)
            {
              $key69 = '';
              $val70 = '';
              $xfer += $input->readString($key69);
              $xfer += $input->readString($val70);
              $this->delaymslogs[$key69] = $val70;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ip_exp_timedelay');
    if ($this->ip !== null) {
      $xfer += $output->writeFieldBegin('ip', TType::STRING, 1);
      $xfer += $output->writeString($this->ip);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 2);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->expname !== null) {
      $xfer += $output->writeFieldBegin('expname', TType::STRING, 3);
      $xfer += $output->writeString($this->expname);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->expurl !== null) {
      $xfer += $output->writeFieldBegin('expurl', TType::STRING, 4);
      $xfer += $output->writeString($this->expurl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->expuri !== null) {
      $xfer += $output->writeFieldBegin('expuri', TType::STRING, 5);
      $xfer += $output->writeString($this->expuri);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->totalcount !== null) {
      $xfer += $output->writeFieldBegin('totalcount', TType::I64, 6);
      $xfer += $output->writeI64($this->totalcount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->totaldelayms !== null) {
      $xfer += $output->writeFieldBegin('totaldelayms', TType::I64, 7);
      $xfer += $output->writeI64($this->totaldelayms);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->retcodecounts !== null) {
      if (!is_array($this->retcodecounts)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('retcodecounts', TType::MAP, 8);
      {
        $output->writeMapBegin(TType::STRING, TType::I64, count($this->retcodecounts));
        {
          foreach ($this->retcodecounts as $kiter71 => $viter72)
          {
            $xfer += $output->writeString($kiter71);
            $xfer += $output->writeI64($viter72);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->delaymscounts !== null) {
      if (!is_array($this->delaymscounts)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('delaymscounts', TType::MAP, 9);
      {
        $output->writeMapBegin(TType::STRING, TType::I64, count($this->delaymscounts));
        {
          foreach ($this->delaymscounts as $kiter73 => $viter74)
          {
            $xfer += $output->writeString($kiter73);
            $xfer += $output->writeI64($viter74);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->retcodelogs !== null) {
      if (!is_array($this->retcodelogs)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('retcodelogs', TType::MAP, 10);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->retcodelogs));
        {
          foreach ($this->retcodelogs as $kiter75 => $viter76)
          {
            $xfer += $output->writeString($kiter75);
            $xfer += $output->writeString($viter76);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->delaymslogs !== null) {
      if (!is_array($this->delaymslogs)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('delaymslogs', TType::MAP, 11);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->delaymslogs));
        {
          foreach ($this->delaymslogs as $kiter77 => $viter78)
          {
            $xfer += $output->writeString($kiter77);
            $xfer += $output->writeString($viter78);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class raw_timedelay {
  static $_TSPEC;

  public $svrname = null;
  public $pid = null;
  public $timestamp = null;
  public $objname = null;
  public $totalcount = null;
  public $totaldelayms = null;
  public $retcode = null;
  public $loginfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'svrname',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'pid',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'objname',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'totalcount',
          'type' => TType::I64,
          ),
        6 => array(
          'var' => 'totaldelayms',
          'type' => TType::I64,
          ),
        7 => array(
          'var' => 'retcode',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'loginfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['svrname'])) {
        $this->svrname = $vals['svrname'];
      }
      if (isset($vals['pid'])) {
        $this->pid = $vals['pid'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['objname'])) {
        $this->objname = $vals['objname'];
      }
      if (isset($vals['totalcount'])) {
        $this->totalcount = $vals['totalcount'];
      }
      if (isset($vals['totaldelayms'])) {
        $this->totaldelayms = $vals['totaldelayms'];
      }
      if (isset($vals['retcode'])) {
        $this->retcode = $vals['retcode'];
      }
      if (isset($vals['loginfo'])) {
        $this->loginfo = $vals['loginfo'];
      }
    }
  }

  public function getName() {
    return 'raw_timedelay';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->svrname);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->pid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->objname);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->totalcount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->totaldelayms);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->retcode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->loginfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('raw_timedelay');
    if ($this->svrname !== null) {
      $xfer += $output->writeFieldBegin('svrname', TType::STRING, 1);
      $xfer += $output->writeString($this->svrname);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pid !== null) {
      $xfer += $output->writeFieldBegin('pid', TType::I64, 2);
      $xfer += $output->writeI64($this->pid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 3);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->objname !== null) {
      $xfer += $output->writeFieldBegin('objname', TType::STRING, 4);
      $xfer += $output->writeString($this->objname);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->totalcount !== null) {
      $xfer += $output->writeFieldBegin('totalcount', TType::I64, 5);
      $xfer += $output->writeI64($this->totalcount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->totaldelayms !== null) {
      $xfer += $output->writeFieldBegin('totaldelayms', TType::I64, 6);
      $xfer += $output->writeI64($this->totaldelayms);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->retcode !== null) {
      $xfer += $output->writeFieldBegin('retcode', TType::STRING, 7);
      $xfer += $output->writeString($this->retcode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->loginfo !== null) {
      $xfer += $output->writeFieldBegin('loginfo', TType::STRING, 8);
      $xfer += $output->writeString($this->loginfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class pid_timedelay {
  static $_TSPEC;

  public $svrname = null;
  public $pid = null;
  public $timestamp = null;
  public $objname = null;
  public $totalcount = null;
  public $totaldelayms = null;
  public $retcodecounts = null;
  public $delaymscounts = null;
  public $retcodelogs = null;
  public $delaymslogs = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'svrname',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'pid',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'objname',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'totalcount',
          'type' => TType::I64,
          ),
        6 => array(
          'var' => 'totaldelayms',
          'type' => TType::I64,
          ),
        7 => array(
          'var' => 'retcodecounts',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::I64,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::I64,
            ),
          ),
        8 => array(
          'var' => 'delaymscounts',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::I64,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::I64,
            ),
          ),
        9 => array(
          'var' => 'retcodelogs',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        10 => array(
          'var' => 'delaymslogs',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['svrname'])) {
        $this->svrname = $vals['svrname'];
      }
      if (isset($vals['pid'])) {
        $this->pid = $vals['pid'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['objname'])) {
        $this->objname = $vals['objname'];
      }
      if (isset($vals['totalcount'])) {
        $this->totalcount = $vals['totalcount'];
      }
      if (isset($vals['totaldelayms'])) {
        $this->totaldelayms = $vals['totaldelayms'];
      }
      if (isset($vals['retcodecounts'])) {
        $this->retcodecounts = $vals['retcodecounts'];
      }
      if (isset($vals['delaymscounts'])) {
        $this->delaymscounts = $vals['delaymscounts'];
      }
      if (isset($vals['retcodelogs'])) {
        $this->retcodelogs = $vals['retcodelogs'];
      }
      if (isset($vals['delaymslogs'])) {
        $this->delaymslogs = $vals['delaymslogs'];
      }
    }
  }

  public function getName() {
    return 'pid_timedelay';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->svrname);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->pid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->objname);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->totalcount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->totaldelayms);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::MAP) {
            $this->retcodecounts = array();
            $_size79 = 0;
            $_ktype80 = 0;
            $_vtype81 = 0;
            $xfer += $input->readMapBegin($_ktype80, $_vtype81, $_size79);
            for ($_i83 = 0; $_i83 < $_size79; ++$_i83)
            {
              $key84 = '';
              $val85 = 0;
              $xfer += $input->readString($key84);
              $xfer += $input->readI64($val85);
              $this->retcodecounts[$key84] = $val85;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::MAP) {
            $this->delaymscounts = array();
            $_size86 = 0;
            $_ktype87 = 0;
            $_vtype88 = 0;
            $xfer += $input->readMapBegin($_ktype87, $_vtype88, $_size86);
            for ($_i90 = 0; $_i90 < $_size86; ++$_i90)
            {
              $key91 = '';
              $val92 = 0;
              $xfer += $input->readString($key91);
              $xfer += $input->readI64($val92);
              $this->delaymscounts[$key91] = $val92;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::MAP) {
            $this->retcodelogs = array();
            $_size93 = 0;
            $_ktype94 = 0;
            $_vtype95 = 0;
            $xfer += $input->readMapBegin($_ktype94, $_vtype95, $_size93);
            for ($_i97 = 0; $_i97 < $_size93; ++$_i97)
            {
              $key98 = '';
              $val99 = '';
              $xfer += $input->readString($key98);
              $xfer += $input->readString($val99);
              $this->retcodelogs[$key98] = $val99;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::MAP) {
            $this->delaymslogs = array();
            $_size100 = 0;
            $_ktype101 = 0;
            $_vtype102 = 0;
            $xfer += $input->readMapBegin($_ktype101, $_vtype102, $_size100);
            for ($_i104 = 0; $_i104 < $_size100; ++$_i104)
            {
              $key105 = '';
              $val106 = '';
              $xfer += $input->readString($key105);
              $xfer += $input->readString($val106);
              $this->delaymslogs[$key105] = $val106;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('pid_timedelay');
    if ($this->svrname !== null) {
      $xfer += $output->writeFieldBegin('svrname', TType::STRING, 1);
      $xfer += $output->writeString($this->svrname);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pid !== null) {
      $xfer += $output->writeFieldBegin('pid', TType::I64, 2);
      $xfer += $output->writeI64($this->pid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 3);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->objname !== null) {
      $xfer += $output->writeFieldBegin('objname', TType::STRING, 4);
      $xfer += $output->writeString($this->objname);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->totalcount !== null) {
      $xfer += $output->writeFieldBegin('totalcount', TType::I64, 5);
      $xfer += $output->writeI64($this->totalcount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->totaldelayms !== null) {
      $xfer += $output->writeFieldBegin('totaldelayms', TType::I64, 6);
      $xfer += $output->writeI64($this->totaldelayms);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->retcodecounts !== null) {
      if (!is_array($this->retcodecounts)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('retcodecounts', TType::MAP, 7);
      {
        $output->writeMapBegin(TType::STRING, TType::I64, count($this->retcodecounts));
        {
          foreach ($this->retcodecounts as $kiter107 => $viter108)
          {
            $xfer += $output->writeString($kiter107);
            $xfer += $output->writeI64($viter108);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->delaymscounts !== null) {
      if (!is_array($this->delaymscounts)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('delaymscounts', TType::MAP, 8);
      {
        $output->writeMapBegin(TType::STRING, TType::I64, count($this->delaymscounts));
        {
          foreach ($this->delaymscounts as $kiter109 => $viter110)
          {
            $xfer += $output->writeString($kiter109);
            $xfer += $output->writeI64($viter110);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->retcodelogs !== null) {
      if (!is_array($this->retcodelogs)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('retcodelogs', TType::MAP, 9);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->retcodelogs));
        {
          foreach ($this->retcodelogs as $kiter111 => $viter112)
          {
            $xfer += $output->writeString($kiter111);
            $xfer += $output->writeString($viter112);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->delaymslogs !== null) {
      if (!is_array($this->delaymslogs)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('delaymslogs', TType::MAP, 10);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->delaymslogs));
        {
          foreach ($this->delaymslogs as $kiter113 => $viter114)
          {
            $xfer += $output->writeString($kiter113);
            $xfer += $output->writeString($viter114);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ip_timedelay {
  static $_TSPEC;

  public $ip = null;
  public $timedelay = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ip',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'timedelay',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\xyz\monitorsvr\pid_timedelay',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ip'])) {
        $this->ip = $vals['ip'];
      }
      if (isset($vals['timedelay'])) {
        $this->timedelay = $vals['timedelay'];
      }
    }
  }

  public function getName() {
    return 'ip_timedelay';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ip);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->timedelay = array();
            $_size115 = 0;
            $_etype118 = 0;
            $xfer += $input->readListBegin($_etype118, $_size115);
            for ($_i119 = 0; $_i119 < $_size115; ++$_i119)
            {
              $elem120 = null;
              $elem120 = new \xyz\monitorsvr\pid_timedelay();
              $xfer += $elem120->read($input);
              $this->timedelay []= $elem120;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ip_timedelay');
    if ($this->ip !== null) {
      $xfer += $output->writeFieldBegin('ip', TType::STRING, 1);
      $xfer += $output->writeString($this->ip);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timedelay !== null) {
      if (!is_array($this->timedelay)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('timedelay', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRUCT, count($this->timedelay));
        {
          foreach ($this->timedelay as $iter121)
          {
            $xfer += $iter121->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ip_timedelay_merge {
  static $_TSPEC;

  public $svrname = null;
  public $ip = null;
  public $timestamp = null;
  public $objname = null;
  public $totalcount = null;
  public $totaldelayms = null;
  public $retcodecounts = null;
  public $delaymscounts = null;
  public $retcodelogs = null;
  public $delaymslogs = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'svrname',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'ip',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'objname',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'totalcount',
          'type' => TType::I64,
          ),
        6 => array(
          'var' => 'totaldelayms',
          'type' => TType::I64,
          ),
        7 => array(
          'var' => 'retcodecounts',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::I64,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::I64,
            ),
          ),
        8 => array(
          'var' => 'delaymscounts',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::I64,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::I64,
            ),
          ),
        9 => array(
          'var' => 'retcodelogs',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        10 => array(
          'var' => 'delaymslogs',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['svrname'])) {
        $this->svrname = $vals['svrname'];
      }
      if (isset($vals['ip'])) {
        $this->ip = $vals['ip'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['objname'])) {
        $this->objname = $vals['objname'];
      }
      if (isset($vals['totalcount'])) {
        $this->totalcount = $vals['totalcount'];
      }
      if (isset($vals['totaldelayms'])) {
        $this->totaldelayms = $vals['totaldelayms'];
      }
      if (isset($vals['retcodecounts'])) {
        $this->retcodecounts = $vals['retcodecounts'];
      }
      if (isset($vals['delaymscounts'])) {
        $this->delaymscounts = $vals['delaymscounts'];
      }
      if (isset($vals['retcodelogs'])) {
        $this->retcodelogs = $vals['retcodelogs'];
      }
      if (isset($vals['delaymslogs'])) {
        $this->delaymslogs = $vals['delaymslogs'];
      }
    }
  }

  public function getName() {
    return 'ip_timedelay_merge';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->svrname);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ip);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->objname);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->totalcount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->totaldelayms);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::MAP) {
            $this->retcodecounts = array();
            $_size122 = 0;
            $_ktype123 = 0;
            $_vtype124 = 0;
            $xfer += $input->readMapBegin($_ktype123, $_vtype124, $_size122);
            for ($_i126 = 0; $_i126 < $_size122; ++$_i126)
            {
              $key127 = '';
              $val128 = 0;
              $xfer += $input->readString($key127);
              $xfer += $input->readI64($val128);
              $this->retcodecounts[$key127] = $val128;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::MAP) {
            $this->delaymscounts = array();
            $_size129 = 0;
            $_ktype130 = 0;
            $_vtype131 = 0;
            $xfer += $input->readMapBegin($_ktype130, $_vtype131, $_size129);
            for ($_i133 = 0; $_i133 < $_size129; ++$_i133)
            {
              $key134 = '';
              $val135 = 0;
              $xfer += $input->readString($key134);
              $xfer += $input->readI64($val135);
              $this->delaymscounts[$key134] = $val135;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::MAP) {
            $this->retcodelogs = array();
            $_size136 = 0;
            $_ktype137 = 0;
            $_vtype138 = 0;
            $xfer += $input->readMapBegin($_ktype137, $_vtype138, $_size136);
            for ($_i140 = 0; $_i140 < $_size136; ++$_i140)
            {
              $key141 = '';
              $val142 = '';
              $xfer += $input->readString($key141);
              $xfer += $input->readString($val142);
              $this->retcodelogs[$key141] = $val142;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::MAP) {
            $this->delaymslogs = array();
            $_size143 = 0;
            $_ktype144 = 0;
            $_vtype145 = 0;
            $xfer += $input->readMapBegin($_ktype144, $_vtype145, $_size143);
            for ($_i147 = 0; $_i147 < $_size143; ++$_i147)
            {
              $key148 = '';
              $val149 = '';
              $xfer += $input->readString($key148);
              $xfer += $input->readString($val149);
              $this->delaymslogs[$key148] = $val149;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ip_timedelay_merge');
    if ($this->svrname !== null) {
      $xfer += $output->writeFieldBegin('svrname', TType::STRING, 1);
      $xfer += $output->writeString($this->svrname);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ip !== null) {
      $xfer += $output->writeFieldBegin('ip', TType::STRING, 2);
      $xfer += $output->writeString($this->ip);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 3);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->objname !== null) {
      $xfer += $output->writeFieldBegin('objname', TType::STRING, 4);
      $xfer += $output->writeString($this->objname);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->totalcount !== null) {
      $xfer += $output->writeFieldBegin('totalcount', TType::I64, 5);
      $xfer += $output->writeI64($this->totalcount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->totaldelayms !== null) {
      $xfer += $output->writeFieldBegin('totaldelayms', TType::I64, 6);
      $xfer += $output->writeI64($this->totaldelayms);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->retcodecounts !== null) {
      if (!is_array($this->retcodecounts)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('retcodecounts', TType::MAP, 7);
      {
        $output->writeMapBegin(TType::STRING, TType::I64, count($this->retcodecounts));
        {
          foreach ($this->retcodecounts as $kiter150 => $viter151)
          {
            $xfer += $output->writeString($kiter150);
            $xfer += $output->writeI64($viter151);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->delaymscounts !== null) {
      if (!is_array($this->delaymscounts)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('delaymscounts', TType::MAP, 8);
      {
        $output->writeMapBegin(TType::STRING, TType::I64, count($this->delaymscounts));
        {
          foreach ($this->delaymscounts as $kiter152 => $viter153)
          {
            $xfer += $output->writeString($kiter152);
            $xfer += $output->writeI64($viter153);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->retcodelogs !== null) {
      if (!is_array($this->retcodelogs)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('retcodelogs', TType::MAP, 9);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->retcodelogs));
        {
          foreach ($this->retcodelogs as $kiter154 => $viter155)
          {
            $xfer += $output->writeString($kiter154);
            $xfer += $output->writeString($viter155);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->delaymslogs !== null) {
      if (!is_array($this->delaymslogs)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('delaymslogs', TType::MAP, 10);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->delaymslogs));
        {
          foreach ($this->delaymslogs as $kiter156 => $viter157)
          {
            $xfer += $output->writeString($kiter156);
            $xfer += $output->writeString($viter157);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class pid_livealarm {
  static $_TSPEC;

  public $svrname = null;
  public $pid = null;
  public $timestamp = null;
  public $tag = null;
  public $alarmmsg = null;
  public $filename = null;
  public $lineno = null;
  public $tagsvrname = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'svrname',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'pid',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'tag',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'alarmmsg',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'filename',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'lineno',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'tagsvrname',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['svrname'])) {
        $this->svrname = $vals['svrname'];
      }
      if (isset($vals['pid'])) {
        $this->pid = $vals['pid'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['tag'])) {
        $this->tag = $vals['tag'];
      }
      if (isset($vals['alarmmsg'])) {
        $this->alarmmsg = $vals['alarmmsg'];
      }
      if (isset($vals['filename'])) {
        $this->filename = $vals['filename'];
      }
      if (isset($vals['lineno'])) {
        $this->lineno = $vals['lineno'];
      }
      if (isset($vals['tagsvrname'])) {
        $this->tagsvrname = $vals['tagsvrname'];
      }
    }
  }

  public function getName() {
    return 'pid_livealarm';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->svrname);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->pid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tag);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->alarmmsg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->filename);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->lineno);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tagsvrname);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('pid_livealarm');
    if ($this->svrname !== null) {
      $xfer += $output->writeFieldBegin('svrname', TType::STRING, 1);
      $xfer += $output->writeString($this->svrname);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pid !== null) {
      $xfer += $output->writeFieldBegin('pid', TType::I64, 2);
      $xfer += $output->writeI64($this->pid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 3);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tag !== null) {
      $xfer += $output->writeFieldBegin('tag', TType::STRING, 4);
      $xfer += $output->writeString($this->tag);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->alarmmsg !== null) {
      $xfer += $output->writeFieldBegin('alarmmsg', TType::STRING, 5);
      $xfer += $output->writeString($this->alarmmsg);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->filename !== null) {
      $xfer += $output->writeFieldBegin('filename', TType::STRING, 6);
      $xfer += $output->writeString($this->filename);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lineno !== null) {
      $xfer += $output->writeFieldBegin('lineno', TType::I32, 7);
      $xfer += $output->writeI32($this->lineno);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tagsvrname !== null) {
      $xfer += $output->writeFieldBegin('tagsvrname', TType::STRING, 8);
      $xfer += $output->writeString($this->tagsvrname);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ip_livealarm {
  static $_TSPEC;

  public $ip = null;
  public $livealarms = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ip',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'livealarms',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\xyz\monitorsvr\pid_livealarm',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ip'])) {
        $this->ip = $vals['ip'];
      }
      if (isset($vals['livealarms'])) {
        $this->livealarms = $vals['livealarms'];
      }
    }
  }

  public function getName() {
    return 'ip_livealarm';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ip);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->livealarms = array();
            $_size158 = 0;
            $_etype161 = 0;
            $xfer += $input->readListBegin($_etype161, $_size158);
            for ($_i162 = 0; $_i162 < $_size158; ++$_i162)
            {
              $elem163 = null;
              $elem163 = new \xyz\monitorsvr\pid_livealarm();
              $xfer += $elem163->read($input);
              $this->livealarms []= $elem163;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ip_livealarm');
    if ($this->ip !== null) {
      $xfer += $output->writeFieldBegin('ip', TType::STRING, 1);
      $xfer += $output->writeString($this->ip);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->livealarms !== null) {
      if (!is_array($this->livealarms)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('livealarms', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRUCT, count($this->livealarms));
        {
          foreach ($this->livealarms as $iter164)
          {
            $xfer += $iter164->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class pid_monitorinfo {
  static $_TSPEC;

  public $svrname = null;
  public $pid = null;
  public $timestamp = null;
  public $objname = null;
  public $content = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'svrname',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'pid',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'objname',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'content',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['svrname'])) {
        $this->svrname = $vals['svrname'];
      }
      if (isset($vals['pid'])) {
        $this->pid = $vals['pid'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['objname'])) {
        $this->objname = $vals['objname'];
      }
      if (isset($vals['content'])) {
        $this->content = $vals['content'];
      }
    }
  }

  public function getName() {
    return 'pid_monitorinfo';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->svrname);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->pid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->objname);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->content);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('pid_monitorinfo');
    if ($this->svrname !== null) {
      $xfer += $output->writeFieldBegin('svrname', TType::STRING, 1);
      $xfer += $output->writeString($this->svrname);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pid !== null) {
      $xfer += $output->writeFieldBegin('pid', TType::I64, 2);
      $xfer += $output->writeI64($this->pid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 3);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->objname !== null) {
      $xfer += $output->writeFieldBegin('objname', TType::STRING, 4);
      $xfer += $output->writeString($this->objname);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->content !== null) {
      $xfer += $output->writeFieldBegin('content', TType::STRING, 5);
      $xfer += $output->writeString($this->content);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ip_monitorinfo {
  static $_TSPEC;

  public $ip = null;
  public $monitorinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ip',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'monitorinfo',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\xyz\monitorsvr\pid_monitorinfo',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ip'])) {
        $this->ip = $vals['ip'];
      }
      if (isset($vals['monitorinfo'])) {
        $this->monitorinfo = $vals['monitorinfo'];
      }
    }
  }

  public function getName() {
    return 'ip_monitorinfo';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ip);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->monitorinfo = array();
            $_size165 = 0;
            $_etype168 = 0;
            $xfer += $input->readListBegin($_etype168, $_size165);
            for ($_i169 = 0; $_i169 < $_size165; ++$_i169)
            {
              $elem170 = null;
              $elem170 = new \xyz\monitorsvr\pid_monitorinfo();
              $xfer += $elem170->read($input);
              $this->monitorinfo []= $elem170;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ip_monitorinfo');
    if ($this->ip !== null) {
      $xfer += $output->writeFieldBegin('ip', TType::STRING, 1);
      $xfer += $output->writeString($this->ip);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->monitorinfo !== null) {
      if (!is_array($this->monitorinfo)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('monitorinfo', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRUCT, count($this->monitorinfo));
        {
          foreach ($this->monitorinfo as $iter171)
          {
            $xfer += $iter171->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class mac_monitorinfo {
  static $_TSPEC;

  public $ip = null;
  public $timestamp = null;
  public $objname = null;
  public $content = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ip',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'objname',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'content',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ip'])) {
        $this->ip = $vals['ip'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['objname'])) {
        $this->objname = $vals['objname'];
      }
      if (isset($vals['content'])) {
        $this->content = $vals['content'];
      }
    }
  }

  public function getName() {
    return 'mac_monitorinfo';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ip);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->objname);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->content);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('mac_monitorinfo');
    if ($this->ip !== null) {
      $xfer += $output->writeFieldBegin('ip', TType::STRING, 1);
      $xfer += $output->writeString($this->ip);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 2);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->objname !== null) {
      $xfer += $output->writeFieldBegin('objname', TType::STRING, 3);
      $xfer += $output->writeString($this->objname);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->content !== null) {
      $xfer += $output->writeFieldBegin('content', TType::STRING, 4);
      $xfer += $output->writeString($this->content);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class pid_log {
  static $_TSPEC;

  public $svrname = null;
  public $pid = null;
  public $timestamp = null;
  public $count = null;
  public $delayms = null;
  public $retcode = null;
  public $loginfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'svrname',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'pid',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'count',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'delayms',
          'type' => TType::I64,
          ),
        6 => array(
          'var' => 'retcode',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'loginfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['svrname'])) {
        $this->svrname = $vals['svrname'];
      }
      if (isset($vals['pid'])) {
        $this->pid = $vals['pid'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
      if (isset($vals['count'])) {
        $this->count = $vals['count'];
      }
      if (isset($vals['delayms'])) {
        $this->delayms = $vals['delayms'];
      }
      if (isset($vals['retcode'])) {
        $this->retcode = $vals['retcode'];
      }
      if (isset($vals['loginfo'])) {
        $this->loginfo = $vals['loginfo'];
      }
    }
  }

  public function getName() {
    return 'pid_log';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->svrname);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->pid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->count);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->delayms);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->retcode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->loginfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('pid_log');
    if ($this->svrname !== null) {
      $xfer += $output->writeFieldBegin('svrname', TType::STRING, 1);
      $xfer += $output->writeString($this->svrname);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pid !== null) {
      $xfer += $output->writeFieldBegin('pid', TType::I64, 2);
      $xfer += $output->writeI64($this->pid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::I64, 3);
      $xfer += $output->writeI64($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->count !== null) {
      $xfer += $output->writeFieldBegin('count', TType::I64, 4);
      $xfer += $output->writeI64($this->count);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->delayms !== null) {
      $xfer += $output->writeFieldBegin('delayms', TType::I64, 5);
      $xfer += $output->writeI64($this->delayms);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->retcode !== null) {
      $xfer += $output->writeFieldBegin('retcode', TType::STRING, 6);
      $xfer += $output->writeString($this->retcode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->loginfo !== null) {
      $xfer += $output->writeFieldBegin('loginfo', TType::STRING, 7);
      $xfer += $output->writeString($this->loginfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ip_log {
  static $_TSPEC;

  public $ip = null;
  public $logs = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ip',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'logs',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\xyz\monitorsvr\pid_log',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ip'])) {
        $this->ip = $vals['ip'];
      }
      if (isset($vals['logs'])) {
        $this->logs = $vals['logs'];
      }
    }
  }

  public function getName() {
    return 'ip_log';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ip);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->logs = array();
            $_size172 = 0;
            $_etype175 = 0;
            $xfer += $input->readListBegin($_etype175, $_size172);
            for ($_i176 = 0; $_i176 < $_size172; ++$_i176)
            {
              $elem177 = null;
              $elem177 = new \xyz\monitorsvr\pid_log();
              $xfer += $elem177->read($input);
              $this->logs []= $elem177;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ip_log');
    if ($this->ip !== null) {
      $xfer += $output->writeFieldBegin('ip', TType::STRING, 1);
      $xfer += $output->writeString($this->ip);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->logs !== null) {
      if (!is_array($this->logs)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('logs', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRUCT, count($this->logs));
        {
          foreach ($this->logs as $iter178)
          {
            $xfer += $iter178->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


