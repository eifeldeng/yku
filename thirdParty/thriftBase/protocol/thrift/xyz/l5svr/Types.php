<?php
namespace xyz\l5svr;

/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


final class L5SUBCMD {
  const SUBCMD_GET_ONE_HOST_REQ = 1;
  const SUBCMD_GET_ONE_HOST_RSP = 2;
  const SUBCMD_GET_MUL_HOST_REQ = 3;
  const SUBCMD_GET_MUL_HOST_RSP = 4;
  const SUBCMD_BAT_GET_HOST_REQ = 5;
  const SUBCMD_BAT_GET_HOST_RSP = 6;
  const SUBCMD_REPORT_RESUL_REQ = 7;
  const SUBCMD_REPORT_RESUL_RSP = 8;
  static public $__names = array(
    1 => 'SUBCMD_GET_ONE_HOST_REQ',
    2 => 'SUBCMD_GET_ONE_HOST_RSP',
    3 => 'SUBCMD_GET_MUL_HOST_REQ',
    4 => 'SUBCMD_GET_MUL_HOST_RSP',
    5 => 'SUBCMD_BAT_GET_HOST_REQ',
    6 => 'SUBCMD_BAT_GET_HOST_RSP',
    7 => 'SUBCMD_REPORT_RESUL_REQ',
    8 => 'SUBCMD_REPORT_RESUL_RSP',
  );
}

final class ERR_L5SVR {
  const ERR_L5_SVR_SERVICE_NAME_NOT_EXIST = -400008001;
  const ERR_L5_SVR_SERVICE_NO_INSTANCE = -400008002;
  const ERR_L5_SVR_THRIFT_FIELD_NOT_PRESENT = -400008003;
  const ERR_L5_SVR_SERVICE_NAME_LEN = -400008004;
  const ERR_L5_SVR_SERVICE_NO_IP = -400008005;
  const ERR_L5_CLI_SERVICE_NAME_NOT_EXIST = -400008301;
  const ERR_L5_CLI_SERVICE_NO_INSTANCE = -400008302;
  const ERR_L5_CLI_THRIFT_FIELD_NOT_PRESENT = -400008303;
  const ERR_L5_CLI_SERVICE_NAME_LEN = -400008304;
  const ERR_L5_CLI_SERVICE_NO_IP = -400008305;
  const ERR_L5_CLI_NO_CONFIG_L5SVRIP = -400008306;
  const ERR_L5_CLI_ASYN_PARAM = -400008601;
  const ERR_L5_CLI_ASYN_NOMOD = -400008602;
  const ERR_L5_CLI_ASYN_NOACT = -400008603;
  const ERR_L5_CLI_ASYN_NET = -400008604;
  const ERR_L5_CLI_ASYN_PACKET = -400008605;
  const ERR_L5_CLI_ASYN_UNPACKET = -400008606;
  const ERR_L5_CLI_ASYN_PACKHEADLEN = -400008607;
  const ERR_L5_CLI_ASYN_PACKBODYLEN = -400008608;
  const ERR_L5_CLI_ASYN_NOMEM = -400008609;
  const ERR_L5_CLI_ASYN_CMD = -400008610;
  const ERR_L5_CLI_ASYN_SUBCMD = -400008611;
  const ERR_L5_CLI_ASYN_AUTHUDB = -400008612;
  const ERR_L5_CLI_ASYN_GETDKEY = -400008613;
  const ERR_L5_CLI_ASYN_DENYIP = -400008614;
  const ERR_L5_CLI_ASYN_CMN_BAD_PRECI = -400008615;
  const ERR_L5_CLI_ASYN_INPUT_WORD = -400008616;
  const ERR_L5_CLI_ASYN_OPTIONE_PARAM_NOSET = -400008617;
  const ERR_L5_CLI_ASYN_NOT_IN_WITELIST = -400008618;
  const ERR_L5_CLI_ASYN_SEQ = -400008619;
  const ERR_L5_CLI_ASYN_SERIAL = -400008620;
  const ERR_L5_CLI_ASYN_UNSERIAL = -400008621;
  const ERR_L5_CLI_ASYN_NO_RESPONE_FROM_L5SVR = -400008900;
  const ERR_L5_CLI_ASYN_CCS_BEGIN = -400008901;
  static public $__names = array(
    -400008001 => 'ERR_L5_SVR_SERVICE_NAME_NOT_EXIST',
    -400008002 => 'ERR_L5_SVR_SERVICE_NO_INSTANCE',
    -400008003 => 'ERR_L5_SVR_THRIFT_FIELD_NOT_PRESENT',
    -400008004 => 'ERR_L5_SVR_SERVICE_NAME_LEN',
    -400008005 => 'ERR_L5_SVR_SERVICE_NO_IP',
    -400008301 => 'ERR_L5_CLI_SERVICE_NAME_NOT_EXIST',
    -400008302 => 'ERR_L5_CLI_SERVICE_NO_INSTANCE',
    -400008303 => 'ERR_L5_CLI_THRIFT_FIELD_NOT_PRESENT',
    -400008304 => 'ERR_L5_CLI_SERVICE_NAME_LEN',
    -400008305 => 'ERR_L5_CLI_SERVICE_NO_IP',
    -400008306 => 'ERR_L5_CLI_NO_CONFIG_L5SVRIP',
    -400008601 => 'ERR_L5_CLI_ASYN_PARAM',
    -400008602 => 'ERR_L5_CLI_ASYN_NOMOD',
    -400008603 => 'ERR_L5_CLI_ASYN_NOACT',
    -400008604 => 'ERR_L5_CLI_ASYN_NET',
    -400008605 => 'ERR_L5_CLI_ASYN_PACKET',
    -400008606 => 'ERR_L5_CLI_ASYN_UNPACKET',
    -400008607 => 'ERR_L5_CLI_ASYN_PACKHEADLEN',
    -400008608 => 'ERR_L5_CLI_ASYN_PACKBODYLEN',
    -400008609 => 'ERR_L5_CLI_ASYN_NOMEM',
    -400008610 => 'ERR_L5_CLI_ASYN_CMD',
    -400008611 => 'ERR_L5_CLI_ASYN_SUBCMD',
    -400008612 => 'ERR_L5_CLI_ASYN_AUTHUDB',
    -400008613 => 'ERR_L5_CLI_ASYN_GETDKEY',
    -400008614 => 'ERR_L5_CLI_ASYN_DENYIP',
    -400008615 => 'ERR_L5_CLI_ASYN_CMN_BAD_PRECI',
    -400008616 => 'ERR_L5_CLI_ASYN_INPUT_WORD',
    -400008617 => 'ERR_L5_CLI_ASYN_OPTIONE_PARAM_NOSET',
    -400008618 => 'ERR_L5_CLI_ASYN_NOT_IN_WITELIST',
    -400008619 => 'ERR_L5_CLI_ASYN_SEQ',
    -400008620 => 'ERR_L5_CLI_ASYN_SERIAL',
    -400008621 => 'ERR_L5_CLI_ASYN_UNSERIAL',
    -400008900 => 'ERR_L5_CLI_ASYN_NO_RESPONE_FROM_L5SVR',
    -400008901 => 'ERR_L5_CLI_ASYN_CCS_BEGIN',
  );
}

class L5Host {
  static $_TSPEC;

  public $ip = null;
  public $port = null;
  public $weight = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ip',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'port',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'weight',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ip'])) {
        $this->ip = $vals['ip'];
      }
      if (isset($vals['port'])) {
        $this->port = $vals['port'];
      }
      if (isset($vals['weight'])) {
        $this->weight = $vals['weight'];
      }
    }
  }

  public function getName() {
    return 'L5Host';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ip);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->port);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->weight);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('L5Host');
    if ($this->ip !== null) {
      $xfer += $output->writeFieldBegin('ip', TType::STRING, 1);
      $xfer += $output->writeString($this->ip);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->port !== null) {
      $xfer += $output->writeFieldBegin('port', TType::I32, 2);
      $xfer += $output->writeI32($this->port);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->weight !== null) {
      $xfer += $output->writeFieldBegin('weight', TType::I32, 3);
      $xfer += $output->writeI32($this->weight);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetOneHostReqMsg {
  static $_TSPEC;

  public $servicename = null;
  public $fromsvr = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'servicename',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'fromsvr',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['servicename'])) {
        $this->servicename = $vals['servicename'];
      }
      if (isset($vals['fromsvr'])) {
        $this->fromsvr = $vals['fromsvr'];
      }
    }
  }

  public function getName() {
    return 'GetOneHostReqMsg';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->servicename);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->fromsvr);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetOneHostReqMsg');
    if ($this->servicename !== null) {
      $xfer += $output->writeFieldBegin('servicename', TType::STRING, 1);
      $xfer += $output->writeString($this->servicename);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->fromsvr !== null) {
      $xfer += $output->writeFieldBegin('fromsvr', TType::I32, 2);
      $xfer += $output->writeI32($this->fromsvr);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetOneHostRspMsg {
  static $_TSPEC;

  public $servicename = null;
  public $host = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'servicename',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'host',
          'type' => TType::STRUCT,
          'class' => '\xyz\l5svr\L5Host',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['servicename'])) {
        $this->servicename = $vals['servicename'];
      }
      if (isset($vals['host'])) {
        $this->host = $vals['host'];
      }
    }
  }

  public function getName() {
    return 'GetOneHostRspMsg';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->servicename);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->host = new \xyz\l5svr\L5Host();
            $xfer += $this->host->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetOneHostRspMsg');
    if ($this->servicename !== null) {
      $xfer += $output->writeFieldBegin('servicename', TType::STRING, 1);
      $xfer += $output->writeString($this->servicename);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->host !== null) {
      if (!is_object($this->host)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('host', TType::STRUCT, 2);
      $xfer += $this->host->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetMulHostReqMsg {
  static $_TSPEC;

  public $servicename = null;
  public $fromsvr = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'servicename',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'fromsvr',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['servicename'])) {
        $this->servicename = $vals['servicename'];
      }
      if (isset($vals['fromsvr'])) {
        $this->fromsvr = $vals['fromsvr'];
      }
    }
  }

  public function getName() {
    return 'GetMulHostReqMsg';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->servicename);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->fromsvr);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetMulHostReqMsg');
    if ($this->servicename !== null) {
      $xfer += $output->writeFieldBegin('servicename', TType::STRING, 1);
      $xfer += $output->writeString($this->servicename);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->fromsvr !== null) {
      $xfer += $output->writeFieldBegin('fromsvr', TType::I32, 2);
      $xfer += $output->writeI32($this->fromsvr);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetMulHostRspMsg {
  static $_TSPEC;

  public $servicename = null;
  public $hosts = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'servicename',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'hosts',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\xyz\l5svr\L5Host',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['servicename'])) {
        $this->servicename = $vals['servicename'];
      }
      if (isset($vals['hosts'])) {
        $this->hosts = $vals['hosts'];
      }
    }
  }

  public function getName() {
    return 'GetMulHostRspMsg';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->servicename);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->hosts = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readListBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $elem5 = new \xyz\l5svr\L5Host();
              $xfer += $elem5->read($input);
              $this->hosts []= $elem5;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetMulHostRspMsg');
    if ($this->servicename !== null) {
      $xfer += $output->writeFieldBegin('servicename', TType::STRING, 1);
      $xfer += $output->writeString($this->servicename);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->hosts !== null) {
      if (!is_array($this->hosts)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('hosts', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRUCT, count($this->hosts));
        {
          foreach ($this->hosts as $iter6)
          {
            $xfer += $iter6->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BatGetHostReqMsg {
  static $_TSPEC;

  public $servicename_list = null;
  public $fromsvr = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'servicename_list',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'fromsvr',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['servicename_list'])) {
        $this->servicename_list = $vals['servicename_list'];
      }
      if (isset($vals['fromsvr'])) {
        $this->fromsvr = $vals['fromsvr'];
      }
    }
  }

  public function getName() {
    return 'BatGetHostReqMsg';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->servicename_list = array();
            $_size7 = 0;
            $_etype10 = 0;
            $xfer += $input->readListBegin($_etype10, $_size7);
            for ($_i11 = 0; $_i11 < $_size7; ++$_i11)
            {
              $elem12 = null;
              $xfer += $input->readString($elem12);
              $this->servicename_list []= $elem12;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->fromsvr);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BatGetHostReqMsg');
    if ($this->servicename_list !== null) {
      if (!is_array($this->servicename_list)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('servicename_list', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->servicename_list));
        {
          foreach ($this->servicename_list as $iter13)
          {
            $xfer += $output->writeString($iter13);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->fromsvr !== null) {
      $xfer += $output->writeFieldBegin('fromsvr', TType::I32, 2);
      $xfer += $output->writeI32($this->fromsvr);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BatGetHostRspMsg {
  static $_TSPEC;

  public $hostlist = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'hostlist',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::LST,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
              'type' => TType::STRUCT,
              'class' => '\xyz\l5svr\L5Host',
              ),
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['hostlist'])) {
        $this->hostlist = $vals['hostlist'];
      }
    }
  }

  public function getName() {
    return 'BatGetHostRspMsg';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::MAP) {
            $this->hostlist = array();
            $_size14 = 0;
            $_ktype15 = 0;
            $_vtype16 = 0;
            $xfer += $input->readMapBegin($_ktype15, $_vtype16, $_size14);
            for ($_i18 = 0; $_i18 < $_size14; ++$_i18)
            {
              $key19 = '';
              $val20 = array();
              $xfer += $input->readString($key19);
              $val20 = array();
              $_size21 = 0;
              $_etype24 = 0;
              $xfer += $input->readListBegin($_etype24, $_size21);
              for ($_i25 = 0; $_i25 < $_size21; ++$_i25)
              {
                $elem26 = null;
                $elem26 = new \xyz\l5svr\L5Host();
                $xfer += $elem26->read($input);
                $val20 []= $elem26;
              }
              $xfer += $input->readListEnd();
              $this->hostlist[$key19] = $val20;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BatGetHostRspMsg');
    if ($this->hostlist !== null) {
      if (!is_array($this->hostlist)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('hostlist', TType::MAP, 1);
      {
        $output->writeMapBegin(TType::STRING, TType::LST, count($this->hostlist));
        {
          foreach ($this->hostlist as $kiter27 => $viter28)
          {
            $xfer += $output->writeString($kiter27);
            {
              $output->writeListBegin(TType::STRUCT, count($viter28));
              {
                foreach ($viter28 as $iter29)
                {
                  $xfer += $iter29->write($output);
                }
              }
              $output->writeListEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ReportResultReqMsg {
  static $_TSPEC;

  public $servicename = null;
  public $host = null;
  public $resultcode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'servicename',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'host',
          'type' => TType::STRUCT,
          'class' => '\xyz\l5svr\L5Host',
          ),
        3 => array(
          'var' => 'resultcode',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['servicename'])) {
        $this->servicename = $vals['servicename'];
      }
      if (isset($vals['host'])) {
        $this->host = $vals['host'];
      }
      if (isset($vals['resultcode'])) {
        $this->resultcode = $vals['resultcode'];
      }
    }
  }

  public function getName() {
    return 'ReportResultReqMsg';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->servicename);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->host = new \xyz\l5svr\L5Host();
            $xfer += $this->host->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->resultcode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ReportResultReqMsg');
    if ($this->servicename !== null) {
      $xfer += $output->writeFieldBegin('servicename', TType::STRING, 1);
      $xfer += $output->writeString($this->servicename);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->host !== null) {
      if (!is_object($this->host)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('host', TType::STRUCT, 2);
      $xfer += $this->host->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->resultcode !== null) {
      $xfer += $output->writeFieldBegin('resultcode', TType::I32, 3);
      $xfer += $output->writeI32($this->resultcode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ReportResultRspMsg {
  static $_TSPEC;

  public $servicename = null;
  public $host = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'servicename',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'host',
          'type' => TType::STRUCT,
          'class' => '\xyz\l5svr\L5Host',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['servicename'])) {
        $this->servicename = $vals['servicename'];
      }
      if (isset($vals['host'])) {
        $this->host = $vals['host'];
      }
    }
  }

  public function getName() {
    return 'ReportResultRspMsg';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->servicename);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->host = new \xyz\l5svr\L5Host();
            $xfer += $this->host->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ReportResultRspMsg');
    if ($this->servicename !== null) {
      $xfer += $output->writeFieldBegin('servicename', TType::STRING, 1);
      $xfer += $output->writeString($this->servicename);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->host !== null) {
      if (!is_object($this->host)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('host', TType::STRUCT, 2);
      $xfer += $this->host->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class L5Msg {
  static $_TSPEC;

  public $get_onehost_req = null;
  public $get_onehost_rsp = null;
  public $get_mulhost_req = null;
  public $get_mulhost_rsp = null;
  public $batch_gethost_req = null;
  public $batch_gethost_rsp = null;
  public $report_req = null;
  public $report_rsp = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'get_onehost_req',
          'type' => TType::STRUCT,
          'class' => '\xyz\l5svr\GetOneHostReqMsg',
          ),
        2 => array(
          'var' => 'get_onehost_rsp',
          'type' => TType::STRUCT,
          'class' => '\xyz\l5svr\GetOneHostRspMsg',
          ),
        3 => array(
          'var' => 'get_mulhost_req',
          'type' => TType::STRUCT,
          'class' => '\xyz\l5svr\GetMulHostReqMsg',
          ),
        4 => array(
          'var' => 'get_mulhost_rsp',
          'type' => TType::STRUCT,
          'class' => '\xyz\l5svr\GetMulHostRspMsg',
          ),
        5 => array(
          'var' => 'batch_gethost_req',
          'type' => TType::STRUCT,
          'class' => '\xyz\l5svr\BatGetHostReqMsg',
          ),
        6 => array(
          'var' => 'batch_gethost_rsp',
          'type' => TType::STRUCT,
          'class' => '\xyz\l5svr\BatGetHostRspMsg',
          ),
        7 => array(
          'var' => 'report_req',
          'type' => TType::STRUCT,
          'class' => '\xyz\l5svr\ReportResultReqMsg',
          ),
        8 => array(
          'var' => 'report_rsp',
          'type' => TType::STRUCT,
          'class' => '\xyz\l5svr\ReportResultRspMsg',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['get_onehost_req'])) {
        $this->get_onehost_req = $vals['get_onehost_req'];
      }
      if (isset($vals['get_onehost_rsp'])) {
        $this->get_onehost_rsp = $vals['get_onehost_rsp'];
      }
      if (isset($vals['get_mulhost_req'])) {
        $this->get_mulhost_req = $vals['get_mulhost_req'];
      }
      if (isset($vals['get_mulhost_rsp'])) {
        $this->get_mulhost_rsp = $vals['get_mulhost_rsp'];
      }
      if (isset($vals['batch_gethost_req'])) {
        $this->batch_gethost_req = $vals['batch_gethost_req'];
      }
      if (isset($vals['batch_gethost_rsp'])) {
        $this->batch_gethost_rsp = $vals['batch_gethost_rsp'];
      }
      if (isset($vals['report_req'])) {
        $this->report_req = $vals['report_req'];
      }
      if (isset($vals['report_rsp'])) {
        $this->report_rsp = $vals['report_rsp'];
      }
    }
  }

  public function getName() {
    return 'L5Msg';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->get_onehost_req = new \xyz\l5svr\GetOneHostReqMsg();
            $xfer += $this->get_onehost_req->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->get_onehost_rsp = new \xyz\l5svr\GetOneHostRspMsg();
            $xfer += $this->get_onehost_rsp->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->get_mulhost_req = new \xyz\l5svr\GetMulHostReqMsg();
            $xfer += $this->get_mulhost_req->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->get_mulhost_rsp = new \xyz\l5svr\GetMulHostRspMsg();
            $xfer += $this->get_mulhost_rsp->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->batch_gethost_req = new \xyz\l5svr\BatGetHostReqMsg();
            $xfer += $this->batch_gethost_req->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->batch_gethost_rsp = new \xyz\l5svr\BatGetHostRspMsg();
            $xfer += $this->batch_gethost_rsp->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRUCT) {
            $this->report_req = new \xyz\l5svr\ReportResultReqMsg();
            $xfer += $this->report_req->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRUCT) {
            $this->report_rsp = new \xyz\l5svr\ReportResultRspMsg();
            $xfer += $this->report_rsp->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('L5Msg');
    if ($this->get_onehost_req !== null) {
      if (!is_object($this->get_onehost_req)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('get_onehost_req', TType::STRUCT, 1);
      $xfer += $this->get_onehost_req->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->get_onehost_rsp !== null) {
      if (!is_object($this->get_onehost_rsp)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('get_onehost_rsp', TType::STRUCT, 2);
      $xfer += $this->get_onehost_rsp->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->get_mulhost_req !== null) {
      if (!is_object($this->get_mulhost_req)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('get_mulhost_req', TType::STRUCT, 3);
      $xfer += $this->get_mulhost_req->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->get_mulhost_rsp !== null) {
      if (!is_object($this->get_mulhost_rsp)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('get_mulhost_rsp', TType::STRUCT, 4);
      $xfer += $this->get_mulhost_rsp->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->batch_gethost_req !== null) {
      if (!is_object($this->batch_gethost_req)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('batch_gethost_req', TType::STRUCT, 5);
      $xfer += $this->batch_gethost_req->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->batch_gethost_rsp !== null) {
      if (!is_object($this->batch_gethost_rsp)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('batch_gethost_rsp', TType::STRUCT, 6);
      $xfer += $this->batch_gethost_rsp->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->report_req !== null) {
      if (!is_object($this->report_req)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('report_req', TType::STRUCT, 7);
      $xfer += $this->report_req->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->report_rsp !== null) {
      if (!is_object($this->report_rsp)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('report_rsp', TType::STRUCT, 8);
      $xfer += $this->report_rsp->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


